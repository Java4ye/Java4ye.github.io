{
    "version": "https://jsonfeed.org/version/1",
    "title": "程序员小站",
    "subtitle": "4ye的后端技术小站",
    "icon": "/images/favicon.ico",
    "description": "定个小目标，写个三年(还有两年啦~） 分享一个普通程序员的技术生涯，生活点滴，让学习成为一种习惯！",
    "home_page_url": "https:///Java4ye.github.io",
    "items": [
        {
            "id": "Study/这5个GitHub项目+3个网站，助你一飞冲天！/",
            "url": "Study/这5个GitHub项目+3个网站，助你一飞冲天！/",
            "title": "这5个GitHub项目+3个网站，助你一飞冲天！",
            "date_published": "2022-01-16T15:30:57.029Z",
            "content_html": "<p>小伙伴们周末好呀，这次来更新一波学习资源啦～👍</p>\n<p>之前推荐过一些书，这次我们就来看看 <strong>4ye</strong> 平时常关顾的一些学习网站叭！😋</p>\n<p>（同时会更新在菜单栏的 <strong>宝藏资源</strong> 中，方便查找）</p>\n<h3 id=\"资源一览\"><a class=\"anchor\" href=\"#资源一览\">#</a> 资源一览</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807235820378.png\" alt=\"image-20210807235820378\" /></p>\n<h3 id=\"cyc2018-cs-notes\"><a class=\"anchor\" href=\"#cyc2018-cs-notes\">#</a> CyC2018 / CS-Notes</h3>\n<p>高达 <strong>136K</strong> star 的项目！😄</p>\n<blockquote>\n<p>📚 技术面试必备基础知识、Leetcode、计算机操作系统、计算机网络、系统设计</p>\n</blockquote>\n<h4 id=\"概览图\"><a class=\"anchor\" href=\"#概览图\">#</a> 概览图</h4>\n<p>地址👉  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0N5QzIwMTgvQ1MtTm90ZXM=\">https://github.com/CyC2018/CS-Notes</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807210235663.png\" alt=\"image-20210807210235663\" /></p>\n<h4 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h4>\n<ul>\n<li>分类清晰 ，技术齐全</li>\n<li>算法文章较多</li>\n</ul>\n<hr />\n<h3 id=\"snailclimb-javaguide\"><a class=\"anchor\" href=\"#snailclimb-javaguide\">#</a> Snailclimb / JavaGuide</h3>\n<p>Guide 哥的，高达 <strong>109k</strong> star ！😄</p>\n<blockquote>\n<p>「Java 学习 + 面试指南」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide！</p>\n</blockquote>\n<h4 id=\"概览图-2\"><a class=\"anchor\" href=\"#概览图-2\">#</a> 概览图</h4>\n<p>地址 👉  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1NuYWlsY2xpbWIvSmF2YUd1aWRl\">https://github.com/Snailclimb/JavaGuide</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0N5QzIwMTgvQ1MtTm90ZXM=\"></span></p>\n<p>推荐国内地址👇（<strong>在线文档</strong>）</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zbmFpbGNsaW1iLmdpdGVlLmlvL2phdmFndWlkZS8jLw==\">https://snailclimb.gitee.io/javaguide/#/</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807213513537.png\" alt=\"image-20210807213513537\" /></p>\n<h4 id=\"特点-2\"><a class=\"anchor\" href=\"#特点-2\">#</a> 特点</h4>\n<ul>\n<li>针对性比较强，主要是  <code>Java</code>  以及常见的一些技术</li>\n<li>基础，进阶</li>\n<li>面试</li>\n</ul>\n<p>如果你不知道怎么复习，打开网站文档看看目录就能很快明白了 😄</p>\n<hr />\n<h3 id=\"macrozheng-mall\"><a class=\"anchor\" href=\"#macrozheng-mall\">#</a> macrozheng / mall</h3>\n<p>一个超级棒的电商项目！高达 <strong>51.6k</strong> star ！😄</p>\n<p>而且还有两个配套的项目！太顶了！👍</p>\n<ul>\n<li><strong>mall 学习教程</strong></li>\n<li><strong>微服务版</strong></li>\n</ul>\n<blockquote>\n<p>mall 项目是一套电商系统，包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现，采用 Docker 容器化部署。 前台商城系统包含首页门户、商品推荐、商品搜索、商品展示、购物车、订单流程、会员中心、客户服务、帮助中心等模块。 后台管理系统包含商品管理、订单管理、会员管理、促销管理、运营管理、内容管理、统计报表、财务管理、权限管理、设置等模块。</p>\n</blockquote>\n<h4 id=\"概览图-3\"><a class=\"anchor\" href=\"#概览图-3\">#</a> 概览图</h4>\n<p>地址都在这了👇</p>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5tYWNyb3poZW5nLmNvbS8jL1JFQURNRQ==\">http://www.macrozheng.com/#/README</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hY3JvemhlbmcvbWFsbC1sZWFybmluZw==\">https://github.com/macrozheng/mall-learning</span> （配套的学习教程）</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hY3JvemhlbmcvbWFsbC1zd2FybQ==\">https://github.com/macrozheng/mall-swarm</span> (微服务版)</p>\n</li>\n</ul>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807223251628.png\" alt=\"image-20210807223251628\" /></p>\n<h4 id=\"特点-3\"><a class=\"anchor\" href=\"#特点-3\">#</a> 特点</h4>\n<ul>\n<li><strong>超赞的学习项目！</strong></li>\n<li><strong>专业</strong>，<strong>齐全</strong></li>\n</ul>\n<p>如果你想找项目练练手的话，这是一个非常不错的选择～从单体到微服务，都给你安排得明明白白的了，而且可以在线体验，有专门的教程！👍👍</p>\n<hr />\n<h3 id=\"doocs-advanced-java\"><a class=\"anchor\" href=\"#doocs-advanced-java\">#</a> doocs / advanced-java</h3>\n<p>这是一个开源组织  <code>doocs</code>  ， 哈哈 我加了好久了，还没贡献过（尴尬😅）</p>\n<p>这里只是列举了其中一个项目，还有其他好几个非常顶的，包括  <code>JVM</code>  和 <strong>框架源码</strong> ，算法，书籍等👍👍</p>\n<blockquote>\n<p>Core Interview Questions &amp; Answers For Experienced Java (Backend) Developers | 互联网 Java 工程师进阶知识完全扫盲：涵盖高并发、分布式、高可用、微服务、海量数据处理等领域知识</p>\n</blockquote>\n<h4 id=\"概览图-4\"><a class=\"anchor\" href=\"#概览图-4\">#</a> 概览图</h4>\n<p>有这么多非常顶的项目！</p>\n<p>地址 👉   <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Rvb2Nz\">https://github.com/doocs</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807225219109.png\" alt=\"image-20210807225219109\" /></p>\n<p>其中一个在线文档</p>\n<p>地址 👉  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hZGphdmEubmV0bGlmeS5hcHAvIy8/aWQ9JUU0JUJBJTkyJUU4JTgxJTk0JUU3JUJEJTkxLWphdmEtJUU1JUI3JUE1JUU3JUE4JThCJUU1JUI4JTg4JUU4JUJGJTlCJUU5JTk4JUI2JUU3JTlGJUE1JUU4JUFGJTg2JUU1JUFFJThDJUU1JTg1JUE4JUU2JTg5JUFCJUU3JTlCJUIy\">https://adjava.netlify.app/#/?id=%e4%ba%92%e8%81%94%e7%bd%91-java-%e5%b7%a5%e7%a8%8b%e5%b8%88%e8%bf%9b%e9%98%b6%e7%9f%a5%e8%af%86%e5%ae%8c%e5%85%a8%e6%89%ab%e7%9b%b2</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807225300343.png\" alt=\"image-20210807225300343\" /></p>\n<h4 id=\"特点-4\"><a class=\"anchor\" href=\"#特点-4\">#</a> 特点</h4>\n<ul>\n<li>超级多优秀的文章 👍</li>\n<li>有源码分析专区！ 👍</li>\n<li>进阶大厂必看系列 👍</li>\n</ul>\n<p>反正我把它当作进阶修炼的地方 哈哈哈哈 😄</p>\n<hr />\n<h3 id=\"shishan100-java-interview-advanced\"><a class=\"anchor\" href=\"#shishan100-java-interview-advanced\">#</a> shishan100 / Java-Interview-Advanced</h3>\n<p>这个就不用过多介绍了 哈哈，从上面  <code>doocs</code>  仓库就知道这里的文章质量得多顶 ，而且确确实实帮我打开了眼界！😋</p>\n<blockquote>\n<p>中华石杉 -- 互联网 Java 进阶面试训练营</p>\n</blockquote>\n<h4 id=\"概览图-5\"><a class=\"anchor\" href=\"#概览图-5\">#</a> 概览图</h4>\n<p>地址 👉  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NoaXNoYW4xMDAvSmF2YS1JbnRlcnZpZXctQWR2YW5jZWQ=\">https://github.com/shishan100/Java-Interview-Advanced</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807230930031.png\" alt=\"image-20210807230930031\" /></p>\n<h4 id=\"特点-5\"><a class=\"anchor\" href=\"#特点-5\">#</a> 特点</h4>\n<ul>\n<li>进阶大厂必看系列 👍</li>\n<li>主要是 <strong>高并发</strong> 类的文章👍</li>\n<li>业内很有名气！</li>\n</ul>\n<hr />\n<h3 id=\"并发编程网\"><a class=\"anchor\" href=\"#并发编程网\">#</a> 并发编程网</h3>\n<p>说到并发，就不得不提下这个网站了，里面的内容几乎都是关于并发的，是提升并发能力的好地方 😝</p>\n<p>就是网站的主题有点老了，不知道为啥看着就像是用  <code>wordpress</code>  搭建的😂</p>\n<h4 id=\"概览图-6\"><a class=\"anchor\" href=\"#概览图-6\">#</a> 概览图</h4>\n<p>地址 👉  <span class=\"exturl\" data-url=\"aHR0cDovL2lmZXZlLmNvbS8=\">http://ifeve.com/</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807231718781.png\" alt=\"image-20210807231718781\" /></p>\n<h4 id=\"特点-6\"><a class=\"anchor\" href=\"#特点-6\">#</a> 特点</h4>\n<ul>\n<li>并发专区 😄</li>\n</ul>\n<p>高质量的并发文章，如果你对并发有啥不懂的话，这里肯定是个不错的选择！</p>\n<p>而且还有部分翻译了国外大佬的文章，能很好地解惑😄</p>\n<h3 id=\"阿里云知行动手实验室\"><a class=\"anchor\" href=\"#阿里云知行动手实验室\">#</a> 阿里云知行动手实验室</h3>\n<p>阿里的技术那没得说 哈哈</p>\n<p>而且这个真的是超级赞，以前我们还要自己装环境啥的，跟着文档或者视频，一步步来，现在好了，直接云端给你安排了，直接在这里练习！！</p>\n<p>那话咋说来的 ， 就吹爆！ 哈哈哈</p>\n<h4 id=\"概览图-7\"><a class=\"anchor\" href=\"#概览图-7\">#</a> 概览图</h4>\n<p>地址 👉  [<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFydC5hbGl5dW4uY29tLw==\">https://start.aliyun.com</span>](<span class=\"exturl\" data-url=\"aHR0cDovL2lmZXZlLmNvbS8=\">http://ifeve.com/</span>)</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807232644268.png\" alt=\"image-20210807232644268\" /></p>\n<p>比如我选这个 <strong>Arthas 基础教程</strong></p>\n<p>直接左边文档，右边  <code>shell</code>  窗口，这真的太方便了！！</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807233007404.png\" alt=\"image-20210807233007404\" /></p>\n<h4 id=\"特点-7\"><a class=\"anchor\" href=\"#特点-7\">#</a> 特点</h4>\n<ul>\n<li>方便！！快捷！！</li>\n</ul>\n<p>真的很赞，直接边看文档边敲代码，不用捣鼓环境先了！👍</p>\n<hr />\n<h3 id=\"力扣\"><a class=\"anchor\" href=\"#力扣\">#</a> 力扣</h3>\n<p>这肯定得推荐呀，因为 <strong>数据结构和算法</strong> 真的特别重要，特别是越低层的开发，越重要！😄</p>\n<p>crud 太无聊了，平时没事可以刷刷题锻炼下 哈哈 有种做数学题的感觉 还是很有意思的😝</p>\n<h4 id=\"概览图-8\"><a class=\"anchor\" href=\"#概览图-8\">#</a> 概览图</h4>\n<p>地址 👉  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXNldC9hbGw=\">https://leetcode-cn.com/problemset/all</span></p>\n<p>可以看到这里有非常多<strong>专业的讲解</strong>！，<strong>超级棒 (๑・̀ㅂ・́)و✧</strong></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807234151768.png\" alt=\"image-20210807234151768\" /></p>\n<h4 id=\"特点-8\"><a class=\"anchor\" href=\"#特点-8\">#</a> 特点</h4>\n<ul>\n<li>算法</li>\n</ul>\n<p>有很多优秀的解析！现在不用担心不会做了 哈哈😄</p>\n<hr />\n<h3 id=\"凑个数\"><a class=\"anchor\" href=\"#凑个数\">#</a> 凑个数🤣</h3>\n<p>自己的仓库 <strong>(lll￢ω￢)</strong> ，就  <code>GitHub</code>  主页好看些了 哈哈哈</p>\n<blockquote>\n<p>不定期推荐优秀的学习资源，帮助你快速成长！共同进步，多摸鱼 哈哈哈</p>\n</blockquote>\n<p>地址 👉  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0phdmE0eWU=\">https://github.com/Java4ye</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807234617130.png\" alt=\"image-20210807234617130\" /></p>\n<p>额，会不定期上传一些项目啦，哈哈 有时间再好好折腾下🐷</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807235451336.png\" alt=\"image-20210807235451336\" /></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>老规矩，画个图叭😝</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210808002110587.png\" alt=\"image-20210808002110587\" /></p>\n<h4 id=\"别只收藏吃灰啦\"><a class=\"anchor\" href=\"#别只收藏吃灰啦\">#</a> 别只收藏吃灰啦！</h4>\n<p>这话也是对我自己说  哈哈哈哈</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210808091424597.png\" alt=\"image-20210808091424597\" /></p>\n<h3 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>欢迎小伙伴们来一起探讨问题～</p>\n<blockquote>\n<p>如果你觉得本篇文章还不错的话，那<strong>拜托再点点赞</strong>支持一下呀😝</p>\n<p><strong>让我们开始这一场意外的相遇吧！~</strong></p>\n<p>欢迎留言！谢谢支持！ヾ (≧▽≦*) o 冲冲冲！！</p>\n<p><strong>我是 4ye 咱们下期应该…… 很快再见！！</strong> 😆</p>\n</blockquote>\n",
            "tags": [
                "学习资源"
            ]
        },
        {
            "id": "DB/MySQL各大版本新特性一览/",
            "url": "DB/MySQL各大版本新特性一览/",
            "title": "MySQL各大版本新特性一览",
            "date_published": "2022-01-16T15:26:05.223Z",
            "content_html": "<p>嘀嘀嘀～理想每天都更文，现实几天一篇文，横批： 文呢？</p>\n<p>哈哈哈 无奈呀</p>\n<p>这是第二次为小伙伴写文章啦！ 上一次是恋爱的味道，这次却是学习的芳香 哈哈😋</p>\n<p>这次应小伙伴的要求，来总结下这个  <code>MySQL</code>  主要版本的新特性</p>\n<p>那么，我们一起往下看看叭～</p>\n<p>我们直接来到官网查看👇</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy8=\">MySQL 官方文档</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210605095506697.png\" alt=\"image-20210605095506697\" /></p>\n<p>可以看到这里有三个版本 <strong>5.6 ， 5.7 ， 8.0</strong></p>\n<p>额 既然 <strong>5.5</strong> 找不到了，那我们就记住他的主要特点：</p>\n<ol>\n<li><code>innodb</code>  就是从 <strong>5.5</strong> 这个版本开始成为 <strong>默认的存储引擎</strong> 😄</li>\n<li>引入了真  <code>UTF8</code>  ——&gt;  <code>utf8mb4</code></li>\n</ol>\n<p>为什么只有两点呢？ 因为 4ye 的脑瓜子就只有这两点 哈哈哈</p>\n<p><img data-src=\"http://img.ryzeyang.top/v1zwq\" alt=\"img\" /></p>\n<p>下面开始 <strong>5.6</strong> 的探索～😄</p>\n<h2 id=\"56\"><a class=\"anchor\" href=\"#56\">#</a> 5.6</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWxub3Rlcy9teXNxbC81LjYvZW4v\">MySQL 5.6 Release Notes</span></p>\n<p>打开上面的链接👆 ， 如下图，这里在介绍这个新特性</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210608215611924.png\" alt=\"image-20210608215611924\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS42L2VuL215c3FsLW51dHNoZWxsLmh0bWw=\">What Is New in MySQL 5.6</span></p>\n<p>剩下的就不多赘述啦，简单摘录了一些，需要完整资料的小伙伴请移步到官网查看～😄 （建议去翻一翻 ，毕竟除了新特性，还有  <code>innodb</code>  整体的介绍！）</p>\n<p><img data-src=\"http://img.ryzeyang.top/WzNzk\" alt=\"img\" /></p>\n<h3 id=\"innodb\"><a class=\"anchor\" href=\"#innodb\">#</a> innodb</h3>\n<p>这里对存储引擎  <code>innodb</code>  做了下面的增强 🐷</p>\n<ol>\n<li>\n<p>可以创建 <strong>全文索引</strong></p>\n</li>\n<li>\n<p>可以修改未压缩表的  <code>InnoDB</code>  页大小设置为 <strong>8KB</strong> 或 <strong>4KB</strong> ，默认是 <strong>16KB</strong></p>\n<p>注意这里只有这三个参数<strong>有效</strong>（4 ，8 ，16） 。</p>\n<p><strong>参数</strong>：  <code>innodb_page_size</code></p>\n</li>\n<li>\n<p><code>InnoDB</code>  的  <code>redo log</code>  文件可存储的最大值从 <strong>4g</strong> 升到 <strong>512g</strong> ,</p>\n<p><strong>参数</strong>：  <code>innodb_log_file_size</code></p>\n</li>\n<li>\n<p>可以设置  <code>innodb</code>  压缩级别 ， 级别等级为 0-9</p>\n<p><strong>参数</strong>： <a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_compression_level\"> <code>innodb_compression_level</code> </a></p>\n</li>\n<li>\n<p><code>Innodb</code>  将  <code>flush</code>  刷盘操作从主线程移动到其他线程</p>\n</li>\n<li>\n<p>默认用独立的表空间  <code>ibd</code></p>\n</li>\n<li>\n<p><code>Undo Log</code>  可以保存在独立的表空间</p>\n</li>\n</ol>\n<h3 id=\"partitioning\"><a class=\"anchor\" href=\"#partitioning\">#</a> Partitioning</h3>\n<p>这里对分区做了下面的加强 🐖</p>\n<ol>\n<li>\n<p>最大分区数量增加到 <strong>8192</strong></p>\n</li>\n<li>\n<p>支持显示分区选择</p>\n<p>比如：  <code>SELECT * FROM t PARTITION (p0, p1) WHERE c &lt; 5</code></p>\n</li>\n</ol>\n<h3 id=\"mysql-ndb-cluster\"><a class=\"anchor\" href=\"#mysql-ndb-cluster\">#</a> MySQL NDB Cluster</h3>\n<p>Mysql 集群，在这个版本作为独立的产品发布</p>\n<p>注意存储引擎不是默认的  <code>innodb</code>  ，而是  <code>NDB</code></p>\n<p><img data-src=\"http://img.ryzeyang.top/cluster-components-1.png\" alt=\"In this cluster, three MySQL servers (mysqld program) are SQL nodes that provide access to four data nodes (ndbd program) that store data. The SQL nodes and data nodes are under the control of an NDB management server (ndb_mgmd program). Various clients and APIs can interact with the SQL nodes - the mysql client, the MySQL C API, PHP, Connector/J, and Connector/NET. Custom clients can also be created using the NDB API to interact with the data nodes or the NDB management server. The NDB management client (ndb_mgm program) interacts with the NDB management server.\" /></p>\n<h3 id=\"replication-and-logging\"><a class=\"anchor\" href=\"#replication-and-logging\">#</a> Replication and logging</h3>\n<p>复制和日志记录</p>\n<ol>\n<li>\n<p>可以从远程服务器读取  <code>binlog</code></p>\n<p><strong>参数</strong>：</p>\n<p><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqlbinlog.html#option_mysqlbinlog_read-from-remote-server\"> <code>--read-from-remote-server</code> </a>,  <code>-R</code>  ；</p>\n<p><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqlbinlog.html#option_mysqlbinlog_raw\"> <code>--raw</code> </a></p>\n</li>\n<li>\n<p>延迟复制</p>\n<p><strong>参数</strong>： <a href=\"https://dev.mysql.com/doc/refman/5.6/en/change-master-to.html\"> <code>CHANGE MASTER TO</code> </a></p>\n</li>\n</ol>\n<h3 id=\"optimizer-enhancements\"><a class=\"anchor\" href=\"#optimizer-enhancements\">#</a> Optimizer enhancements</h3>\n<p>优化器增强</p>\n<ol>\n<li>\n<p>就是在这里开始的，我们可以用  <code>EXPLAIN</code>  来查看  <code>DELETE</code> ， <code>INSERT</code> ， <code>REPLACE</code> ， <code>UPDATE</code>  等  <code>DML</code>  操作的执行计划。 在这之前，它只支持  <code>SELECT</code>  操作。</p>\n</li>\n<li>\n<p>优化子查询</p>\n</li>\n<li>\n<p>主机缓存</p>\n</li>\n</ol>\n<h3 id=\"configuration-changes\"><a class=\"anchor\" href=\"#configuration-changes\">#</a> Configuration Changes</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_back_log\"> <code>back_log</code> </a></th>\n<th>50</th>\n<th>Autosized using <a href=\"https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_max_connections\"> <code>max_connections</code> </a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/replication-options-binary-log.html#sysvar_binlog_checksum\"> <code>binlog_checksum</code> </a></td>\n<td><code>NONE</code></td>\n<td><code>CRC32</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/replication-options-binary-log.html#option_mysqld_binlog-row-event-max-size\"> <code>--binlog-row-event-max-size</code> </a></td>\n<td>1024</td>\n<td>8192</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_flush_time\"> <code>flush_time</code> </a></td>\n<td>1800 (on Windows)</td>\n<td>0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_autoextend_increment\"> <code>innodb_autoextend_increment</code> </a></td>\n<td>8</td>\n<td>64</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_buffer_pool_instances\"> <code>innodb_buffer_pool_instances</code> </a></td>\n<td>1</td>\n<td>8 (platform dependent)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_checksum_algorithm\"> <code>innodb_checksum_algorithm</code> </a></td>\n<td><code>INNODB</code></td>\n<td><code>CRC32 (changed back to INNODB in MySQL 5.6.7)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_concurrency_tickets\"> <code>innodb_concurrency_tickets</code> </a></td>\n<td>500</td>\n<td>5000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_file_per_table\"> <code>innodb_file_per_table</code> </a></td>\n<td><code>0</code></td>\n<td><code>1</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_old_blocks_time\"> <code>innodb_old_blocks_time</code> </a></td>\n<td>0</td>\n<td>1000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_open_files\"> <code>innodb_open_files</code> </a></td>\n<td>300</td>\n<td>Autosized using <a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_file_per_table\"> <code>innodb_file_per_table</code> </a>,<a href=\"https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_table_open_cache\"> <code>table_open_cache</code> </a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_stats_on_metadata\"> <code>innodb_stats_on_metadata</code> </a></td>\n<td><code>ON</code></td>\n<td><code>OFF</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_join_buffer_size\"> <code>join_buffer_size</code> </a></td>\n<td>128KB</td>\n<td>256KB</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_max_allowed_packet\"> <code>max_allowed_packet</code> </a></td>\n<td>1MB</td>\n<td>4MB</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_max_connect_errors\"> <code>max_connect_errors</code> </a></td>\n<td>10</td>\n<td>100</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/replication-options-replica.html#sysvar_sync_master_info\"> <code>sync_master_info</code> </a></td>\n<td>0</td>\n<td>10000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/replication-options-replica.html#sysvar_sync_relay_log\"> <code>sync_relay_log</code> </a></td>\n<td>0</td>\n<td>10000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/replication-options-replica.html#sysvar_sync_relay_log_info\"> <code>sync_relay_log_info</code> </a></td>\n<td>0</td>\n<td>10000</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"57\"><a class=\"anchor\" href=\"#57\">#</a> 5.7</h2>\n<h3 id=\"innodb-2\"><a class=\"anchor\" href=\"#innodb-2\">#</a> innodb</h3>\n<ol>\n<li>\n<p>增加  <code>DATA_GEOMETRY</code>  类型来支持空间数据类型，以前是用  <code>blob</code></p>\n</li>\n<li>\n<p><code>innodb</code>  的缓存池  <code>dump</code>  和  <code>load</code>  加强 ，允许按百分比去存储缓存池中的页面</p>\n<p><strong>参数</strong>:  <code>innodb_buffer_pool_dump_pct</code>  默认值是 25</p>\n</li>\n<li>\n<p><code>InnoDB</code>  增加了对全文解析器插件的支持。</p>\n</li>\n<li>\n<p>支持多线程来刷新缓冲池中的<strong>脏页面</strong></p>\n<blockquote>\n<p>内存数据页跟磁盘上数据页内容不一致，将内存页称为脏页</p>\n</blockquote>\n</li>\n<li>\n<p>由于文件系统  <code>The Fusion-io Non-Volatile Memory (NVM) </code>   在  <code>Linux</code>   上提供了原子操作，这导致  <code>innodb</code>  的  <code>doublewrite</code>  变得冗余，所以在该文件系统上，会自动关闭  <code>doublewrite</code></p>\n</li>\n<li>\n<p><code>innodb_buffer_pool_size</code>  参数是动态的，允许您在<strong>不重启服务器</strong>的情况下<strong>调整缓冲池的大小</strong>。</p>\n</li>\n<li>\n<p><code>InnoDB</code>  支持使用  <code>spatial</code>  索引来索引<strong>空间数据</strong>类型</p>\n</li>\n<li>\n<p>支持本地分区</p>\n</li>\n<li>\n<p>默认行格式由  <code>compact</code>  改为  <code>DYNAMIC</code></p>\n</li>\n</ol>\n<h3 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h3>\n<p><strong>一。支持 JSON</strong></p>\n<blockquote>\n<p>从 MySQL 5.7.8 开始，MySQL 支持原生 JSON 类型。</p>\n</blockquote>\n<p>震惊（居然还有这回事🐖）</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2ltZy5yeXpleWFuZy50b3AvaW1hZ2UtMjAyMTA2MDgwODMxMDQyNDQucG5n\">http://img.ryzeyang.top/image-20210608083104244.png</span>&quot; alt=&quot;image-20210608083104244&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>二. <a href=\"http://www.searchdoc.cn/rdbms/mysql/dev.mysql.com/doc/refman/5.7/en/explain.com.coder114.cn.html\"> <code>EXPLAIN</code> </a> 可以用来获取在命名连接中执行的可解释语句的<strong>执行计划</strong></p>\n<pre><code class=\"language-mysql\">EXPLAIN [options] FOR CONNECTION connection_id;\n</code></pre>\n<p>三。允许在某个时间点，有多个触发事件</p>\n<p><strong>之前</strong>：对于<strong>触发器</strong>事件 (INSERT、UPDATE、DELETE) 和操作时间 (BEFORE、AFTER) 的组合，一个表最多只能有一个触发器，即在某个触发时间点只能有一个触发事件</p>\n<p>四. <strong>多源复制</strong></p>\n<p>可将多个服务器的内容备份到一个服务器</p>\n<h2 id=\"80\"><a class=\"anchor\" href=\"#80\">#</a> 8.0</h2>\n<p>突然发现每次更新都在加强这个  <code>innnodb</code>  😄</p>\n<h3 id=\"innodb-3\"><a class=\"anchor\" href=\"#innodb-3\">#</a> innodb</h3>\n<ol>\n<li>\n<p>可以通过 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/information-schema-innodb-cached-indexes-table.html\"> <code>INNODB_CACHED_INDEXES</code> </a> 查看每个索引缓存在  <code>InnoDB</code>  缓冲池中的索引页数量</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210608213614660.png\" alt=\"image-20210608213614660\" /></p>\n</li>\n<li>\n<p>可以使用一个新的动态变量  <code>innodb_deadlock_detect</code>  来禁用死锁检测</p>\n</li>\n<li>\n<p><code>redo log</code>  优化，可以并发地写到日志缓冲区</p>\n</li>\n<li>\n<p>日志缓冲区的大小可以通过  <code>innodb_log_buffer_size</code>  动态调整</p>\n</li>\n<li>\n<p><code>undo log</code>  不再存放在系统表中</p>\n</li>\n<li>\n<p>支持原子性的  <code>DDL</code>  ， 确保操作完全成功或者失败</p>\n</li>\n<li>\n<p>从  <code>MySQL 8.0.20</code>  开始， <code>doublewrite</code>  缓冲区存储在  <code>doublewrite</code>  文件中</p>\n</li>\n</ol>\n<h3 id=\"其他-2\"><a class=\"anchor\" href=\"#其他-2\">#</a> 其他</h3>\n<p>一.  <code>Json</code>  增强</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210608213650740.png\" alt=\"image-20210608213650740\" /></p>\n<p>二。默认值</p>\n<p>可以为这些类型增加默认值  <code>BLOB</code> 、 <code>TEXT</code> 、 <code>GEOMETRY</code>  、  <code>JSON</code></p>\n<p>三。优化器增强</p>\n<ul>\n<li>\n<p>支持隐藏索引</p>\n<pre><code class=\"language-mysql\">ALTER TABLE t1 ALTER INDEX i_idx INVISIBLE;\nALTER TABLE t1 ALTER INDEX i_idx VISIBLE;\n</code></pre>\n</li>\n<li>\n<p>索引支持降序排序</p>\n</li>\n</ul>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210608213517588.png\" alt=\"image-20210608213517588\" /></p>\n<p>四。支持窗口函数</p>\n<p>五。支持正则表达式</p>\n<p>（还有这操作的 🐂）</p>\n<p>六。备份锁</p>\n<p>允许在线备份时使用  <code>DML</code>  语句</p>\n<hr />\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>看完这篇文章后，不知道小伙伴们会对哪个更新印象最深呢？😝</p>\n<p>比如 <strong>4ye</strong> 对这几点有点小印象～</p>\n<ol>\n<li><strong>5.6</strong> 的<strong>全文索引</strong>， <code>innodb</code>  页的大小调整（4，8，16 KB）三档，<strong>独立表空间</strong>还有<strong>执行计划</strong>的加强，不仅仅 <code>select</code> . 以及结尾那么大一个表格的参数</li>\n<li><strong>5.7</strong> 的  <code>JSON</code> ，<strong>空间数据类型</strong>  <code>DATA_GEOMETRY</code>  ，以及<strong>空间索引</strong>  <code>spatial</code>  的出现，还有 <code>doublewrite</code>  ，<strong>脏页面</strong>的优化 和 行格式  <code>DYNAMIC</code>  的出现（以前  <code>compact</code>  )</li>\n<li><strong>8.0</strong> 的<strong>正则</strong>，<strong>隐藏索引</strong>以及它的<strong>索引排序</strong></li>\n</ol>\n<p>对了 还有，开头的那两句～</p>\n<blockquote>\n<ol>\n<li><code>innodb</code>  就是从 <strong>5.5</strong> 这个版本开始成为 <strong>默认的存储引擎</strong> 😄</li>\n<li>引入了真  <code>UTF8</code>  ——&gt;  <code>utf8mb4</code></li>\n</ol>\n</blockquote>\n<p><img data-src=\"http://img.ryzeyang.top/bjgZj\" alt=\"img\" /></p>\n<h2 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>欢迎小伙伴们来一起探讨问题～</p>\n<blockquote>\n<p>如果你觉得本篇文章还不错的话，那拜托再点点赞支持一下呀😝</p>\n<p><strong>让我们开始这一场意外的相遇吧！~</strong></p>\n<p>欢迎留言！谢谢支持！ヾ (≧▽≦*) o 冲冲冲！！</p>\n<p><strong>我是 4ye 咱们下期很快再见！！</strong></p>\n</blockquote>\n",
            "tags": [
                "DB领域"
            ]
        },
        {
            "id": "SearchEngine/ElasticSearch中必须掌握的七个概念/",
            "url": "SearchEngine/ElasticSearch中必须掌握的七个概念/",
            "title": "ElasticSearch中必须掌握的七个概念",
            "date_published": "2022-01-16T15:21:44.429Z",
            "content_html": "<p>小伙伴们好呀～我是 4ye (・̀ ω・́) y，今天来和大家分享下这个 ElasticSearch 中必须要掌握的几个概念。👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211124230156625.png\" alt=\"image-20211124230156625\" /></p>\n<h3 id=\"整体关系\"><a class=\"anchor\" href=\"#整体关系\">#</a> 整体关系</h3>\n<p>老规矩～先从整体上认识认识他们～😄</p>\n<blockquote>\n<p>每个 Index 由一个或者多个 shard 组成，分布在不同的 node ，document 由 Field 组成，存储在这些 shard 中。</p>\n</blockquote>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211123221816578.png\" alt=\"image-20211123221816578\" /></p>\n<p>先有个大致的印象，下面我们再细讲这些概念～😋</p>\n<h3 id=\"es-vs-关系型数据库\"><a class=\"anchor\" href=\"#es-vs-关系型数据库\">#</a> ES vs 关系型数据库</h3>\n<p>和传统的关系型数据库有这么一种关系 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211112080838065.png\" alt=\"image-20211112080838065\" /></p>\n<h3 id=\"索引-index\"><a class=\"anchor\" href=\"#索引-index\">#</a> 索引 Index</h3>\n<p>没想到，这么一个词，居然有这三层含义 🐷🐖 <sup>(*￣(oo)￣)</sup></p>\n<p>① <strong>名词</strong></p>\n<blockquote>\n<p>Index (Indices，Indexes) 是文档的集合，类似传统的关系型数据库。</p>\n<p><strong>是分片的集合，每个分片相当于 Lucene 中的索引</strong>。</p>\n</blockquote>\n<p>② <strong>动词</strong></p>\n<blockquote>\n<p>索引一个文档，就是存储一个文档到一个索引中以便被检索</p>\n</blockquote>\n<p>③ <strong>数据结构</strong></p>\n<blockquote>\n<p>这里指：<strong>倒排索引</strong> ，就是通过  value ——&gt; Key ，如下👇 通过记录这个词和它所在的文档 ID，<strong>对应 Lucene 中的 segments (分段)</strong></p>\n</blockquote>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211123214903621.png\" alt=\"image-20211123214903621\" /></p>\n<h3 id=\"类型-type\"><a class=\"anchor\" href=\"#类型-type\">#</a> 类型 Type</h3>\n<blockquote>\n<p>这里指的是 文档的类型，而不是字段的类型</p>\n</blockquote>\n<p>先看看以前版本的样子 👇</p>\n<p>以前的 API 是   <code>&#123;index&#125;/&#123;type&#125;/&#123;id&#125;</code>   ，现在是  <code>&#123;index&#125;/_doc/&#123;id&#125;</code>  🐖</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211121171644400.png\" alt=\"image-20211121171644400\" /></p>\n<p><strong>这个 type 从 7.x 开始就被移除了</strong>！ 默认是这个  <code>_doc</code>   （默认类型～，现在 8.x 版本就也不再支持修改这个类型了），  因为这个设计会降低 Lucene 压缩数据的能力，导致数据稀疏。从本质上来看，这个 Type 是对索引进行逻辑分区，使用文档类型  <code>_type</code>  和文档  <code>_id</code>   组成  <code>_uid</code>  ，形成文档的唯一 ID，对索引进行细分～。</p>\n<p>而在 Lucene 中，我们这个字段域在索引中是唯一的，所以原本的字段也会被细分，导致字段域增多的同时，数据的密度也就降低了，压缩效率也就降低了。</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211124081729642.png\" alt=\"image-20211124081729642\" /></p>\n<p><strong>Tip</strong>:  <strong>ElasticSearch</strong>  底层的全文检索是居于 <strong>Lucene</strong> 实现的。</p>\n<p>我们前面也分享过这个 Lucene，地址在这 👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRmo0TThRMU5kdUtRSjhaOUJoNTJjQQ==\">《快速上手搜索引擎的秘密武器 ——Lucene》</span></p>\n<p>移除 Type 的具体原因可以看官网的解释 👇</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9lbGFzdGljc2VhcmNoL3JlZmVyZW5jZS83LjE1L3JlbW92YWwtb2YtdHlwZXMuaHRtbCNyZW1vdmFsLW9mLXR5cGVz\">https://www.elastic.co/guide/en/elasticsearch/reference/7.15/removal-of-types.html#removal-of-types</span></p>\n<h3 id=\"文档-document\"><a class=\"anchor\" href=\"#文档-document\">#</a> 文档 Document</h3>\n<blockquote>\n<p>ElasticSearch 是面向文档的，文档是数据存储和索引的最小单位，是字段的集合 （相当于 Lucene 中的文档） ，在 ElasticSearch 中以序列化 JSON 结构存储，文档结构如下👇，下划线开头的是官方提供的字段，称为 元数据</p>\n</blockquote>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"_index\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"java4ye\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"_type\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"_doc\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"_id\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"_score\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"_source\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token property\">\"user\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">\"id\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"123456789\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token property\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"4ye\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token property\">\"age\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token property\">\"desc\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"nice to meet you 2!\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个文档主要看  <code>_source</code>  字段，里面就是我们上传的文档数据</p>\n<h3 id=\"字段-field\"><a class=\"anchor\" href=\"#字段-field\">#</a> 字段 Field</h3>\n<blockquote>\n<p>是文档中的基本单位，以键值对的形式存在，如 上面的 &quot;_id&quot; : &quot;1001&quot; ，（相当于 Lucene 中的字段）</p>\n</blockquote>\n<p>可以在官网中查看，有这么一些元字段🐖</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211124152050026.png\" alt=\"image-20211124152050026\" /></p>\n<h3 id=\"映射-mapping\"><a class=\"anchor\" href=\"#映射-mapping\">#</a> 映射 Mapping</h3>\n<blockquote>\n<p>用于表示这个字段的数据类型，如 字符串，整数，浮点数，日期等，不指定时会自动创建 （相当于 Lucene 中的字段类型）</p>\n</blockquote>\n<p>如下👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211124151945621.png\" alt=\"image-20211124151945621\" /></p>\n<h3 id=\"节点-node\"><a class=\"anchor\" href=\"#节点-node\">#</a> 节点 node</h3>\n<p>ElasticSearch 是以集群的方式运行的，每个 ElasticSearch 实例就是一个节点。</p>\n<p>而节点有很多种角色 👇，好复杂🙃</p>\n<p>当你没有配置这个 node.roles ，这个节点默认有下面这些角色</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211123074254875.png\" alt=\"image-20211123074254875\" /></p>\n<h4 id=\"主节点-masternode\"><a class=\"anchor\" href=\"#主节点-masternode\">#</a> 主节点 MasterNode</h4>\n<blockquote>\n<p>负责集群节点状态的维护，索引的创建，删除，数据的 rebalance，分片的分配等工作，不负责具体数据的索引和检索</p>\n</blockquote>\n<h4 id=\"数据节点-datanode\"><a class=\"anchor\" href=\"#数据节点-datanode\">#</a> 数据节点 DataNode</h4>\n<blockquote>\n<p>负责集群中数据的写入和检索，属于 IO，内存 和 CPU 密集型操作，需要的计算资源大</p>\n</blockquote>\n<h4 id=\"提取节点-ingestnode\"><a class=\"anchor\" href=\"#提取节点-ingestnode\">#</a> 提取节点 IngestNode</h4>\n<blockquote>\n<p>数据预处理通道，在数据被索引前预先处理文档。</p>\n</blockquote>\n<h4 id=\"协调节点-coordinatingnode\"><a class=\"anchor\" href=\"#协调节点-coordinatingnode\">#</a> 协调节点 CoordinatingNode</h4>\n<blockquote>\n<p>接受客户端请求，然后转发到数据节点，最后将各个节点返回来的数据进行整合。对应着<strong>两个阶段</strong></p>\n<ol>\n<li><strong>分散阶段，协调节点将请求转发到保存数据的数据节点</strong></li>\n<li><strong>收集阶段，协调节点将每个数据节点的结果缩减为单个全局结果集</strong></li>\n</ol>\n</blockquote>\n<h4 id=\"链接\"><a class=\"anchor\" href=\"#链接\">#</a> 链接</h4>\n<p>详情请从这里获取～</p>\n<p>官网地址 ： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9lbGFzdGljc2VhcmNoL3JlZmVyZW5jZS83LjE1L21vZHVsZXMtbm9kZS5odG1s\">https://www.elastic.co/guide/en/elasticsearch/reference/7.15/modules-node.html</span></p>\n<p>或者看看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldC8=\">Elastic 中国社区官方博客</span> 的这篇文章 👇</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldC9hcnRpY2xlL2RldGFpbHMvMTEwOTQ3Mzcy\">https://elasticstack.blog.csdn.net/article/details/110947372</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211124163025361.png\" alt=\"image-20211124163025361\" /></p>\n<h3 id=\"分片-shard-和-副本-replica\"><a class=\"anchor\" href=\"#分片-shard-和-副本-replica\">#</a> 分片 Shard 和 副本 Replica</h3>\n<blockquote>\n<p>Elasticsearch 的 索引是以分片的方式来组织的，每个分片就是 Lucene 中的索引。</p>\n<p>分片分为 <strong>主分片</strong> 和 <strong>副本分片</strong>，默认配置是 每个索引 5 个主分片，每个主分片都有一个副本分片，主分片和它的副本不在一个节点上，主要作用是 <strong>故障转移和负载均衡</strong></p>\n</blockquote>\n<h4 id=\"文档怎么路由到对应的分片上呢\"><a class=\"anchor\" href=\"#文档怎么路由到对应的分片上呢\">#</a> 文档怎么路由到对应的分片上呢？</h4>\n<p>公式如下 👇</p>\n<pre><code>shard = hash(routing) % number_of_primary_shards\n</code></pre>\n<blockquote>\n<p><code>routing</code>  是一个可变值，默认是文档的  <code>_id</code>  ，也可以设置成一个自定义的值。  <code>routing</code>  通过 hash 函数生成一个数字，然后这个数字再除以  <code>number_of_primary_shards</code>  （主分片的数量）后得到 <strong>余数</strong> 。这个分布在  <code>0</code>  到  <code>number_of_primary_shards-1</code>  之间的余数，就是我们所寻求的文档所在分片的位置。</p>\n<p>这就解释了为什么我们要在创建索引的时候就确定好主分片的数量 并且永远不会改变这个数量：因为如果数量变化了，那么所有之前路由的值都会无效，文档也再也找不到了。</p>\n<p>—— 引用 《Elasticsearch: 权威指南 》</p>\n</blockquote>\n<h4 id=\"近实时-nrt\"><a class=\"anchor\" href=\"#近实时-nrt\">#</a> 近实时 NRT</h4>\n<p>这个 近实时 NRT（Near Realtime）是 Elasticsearch 的一大特点，为啥它是近实时的呢～🐖</p>\n<p>原因还是和 Lucene 有关，简单来说，就是 ElasticSearch 在写入文档时，数据会先写入这个内存，然后再写到这个 Lucene 的 Segment 中，<strong>等到写到 Segment 中才可以被搜索到</strong>，此时文档处在文件系统缓存中，后面才会刷到磁盘中的。</p>\n<p>这些都在官网的 <strong>《Elasticsearch: 权威指南 》</strong> 中介绍到～图文并茂！地址👇</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9jbi9lbGFzdGljc2VhcmNoL2d1aWRlL2N1cnJlbnQvaW5kZXguaHRtbA==\">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211124225732491.png\" alt=\"image-20211124225732491\" /></p>\n<h3 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>本文就分享到这里啦🐖</p>\n<p>强烈建议小伙伴们看看这个 <strong>《Elasticsearch: 权威指南 》</strong> ，了解这个原理！下次有点实质性的干货，再来分享这个 ElasticSearch 叭，现在没啥特别的实战经验，写不出来呀✍ 这个话题先告一段落啦～🐖</p>\n<p>对了，在仓库里有这个 Lucene 的小例子，可以帮助你更快的去了解这个 ElasticSearch 的底层原理～</p>\n<p>👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0phdmE0eWUvc3ByaW5nYm9vdC1kZW1vLTR5ZQ==\">https://github.com/Java4ye/springboot-demo-4ye</span></p>\n<blockquote>\n<p>喜欢的话可以 <strong>点赞 &amp;</strong> <strong>关注</strong> 并 <strong>星标</strong> 下公众号 <strong>Java4ye</strong> 支持下 <strong>4ye</strong> 呀😝，这样就可以第一时间收到更文消息啦🐷</p>\n</blockquote>\n<p><strong>我是 4ye 咱们下期应该…… 很快再见！！</strong> 😆</p>\n",
            "tags": [
                "搜索引擎"
            ]
        },
        {
            "id": "Spring/16张图解锁Spring的整体脉络啦/",
            "url": "Spring/16张图解锁Spring的整体脉络啦/",
            "title": "16张图解锁Spring的整体脉络",
            "date_published": "2022-01-16T10:34:27.097Z",
            "content_html": "<p>今天来梳理下 <strong>Spring</strong> 的整体脉络啦，为后面的文章做个铺垫～</p>\n<p>后面几篇文章应该会讲讲这些内容啦 😆</p>\n<ol>\n<li>Spring  AOP 插件 🐖  （🕊了好久都忘了 😅）</li>\n<li>分享下  <strong>4ye</strong> 在项目中利用  <strong>AOP + MybatisPlus</strong>   对项目进行重构，优化系统中特殊的日志模块的故事</li>\n<li>Spring <strong>属性注入</strong>，<strong>循环依赖</strong>，<strong>事务</strong> 等这几个比较重要的</li>\n<li>Spring  源码中的要点  <strong>AbstractApplicationContext</strong>  中的 <strong>refresh</strong> 方法里的 12 个方法</li>\n<li>Spring 中的设计模式  等等</li>\n<li>目前就想到这么多啦🐷</li>\n</ol>\n<hr />\n<p>话说咱们一直都在用这个 Spring  ，你们对它的感受是啥呀？还是说说不出来 哈哈</p>\n<p>4ye 的感觉也是零零散散的，而且印象中一直都在用 Springboot ，不用再配置一堆东西呀，管理依赖啥的，方便太多了。</p>\n<p>所以借此机会简单梳理下其中的一些脉络，这样去看源码就有条理多啦，更能知道一些扩展点的使用等😝</p>\n<h3 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h3>\n<p>本文会先大概介绍下这些知识点 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904200622280.png\" alt=\"image-20210904200622280\" /></p>\n<h3 id=\"印象中的-spring\"><a class=\"anchor\" href=\"#印象中的-spring\">#</a> 印象中的 Spring</h3>\n<p>脑海中有这么一条公式：</p>\n<p>👉  IOC  = 工厂模式 + XML + 反射</p>\n<p>👉 而 DI ,  AOP ， <strong>事务</strong> 等也都在  XML  中很直观的表现出来</p>\n<p>虽然我们现在大部分用这个注解来代替，但是原理还是基本一样的🐖</p>\n<p>注解使用起来很方便，但是学习的话，还是建议先通过这个 XML ，毕竟结构性的文档，有层次感，可以留下更深的印象～😄</p>\n<h3 id=\"小小spring\"><a class=\"anchor\" href=\"#小小spring\">#</a> 小小 Spring</h3>\n<p>把 Spring 浓缩一下，就有了这么一点小东西🐖</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210831215104931.png\" alt=\"image-20210831215104931\" /></p>\n<p>想了下，我们用 Spring ，其中最主要的一点，就是用它来帮我们管理，创建这个 Bean 。</p>\n<p>那么先从源头看起  —— Bean 从哪来 (＠_＠😉</p>\n<h3 id=\"bean-解析流程\"><a class=\"anchor\" href=\"#bean-解析流程\">#</a> Bean 解析流程</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210901220458461.png\" alt=\"image-20210901220458461\" /></p>\n<p>如图所示，就是通过 <strong>解析器</strong>，对我们的 XML 文件或者注解进行解析，最后将这些信息封装在  BeanDefinition 类中，并通过 BeanDefinitionRegistry 接口将这些信息 <strong>注册</strong> 起来，放在 beanDefinitionMap 变量中，key : beanName , value ：BeanDefinition 。</p>\n<p>简单看看  BeanDefinition 中的属性叭</p>\n<h3 id=\"beandefinition\"><a class=\"anchor\" href=\"#beandefinition\">#</a> BeanDefinition</h3>\n<ul>\n<li>\n<p>beanClass  :  bean 的类型 ，实例化时用的 🐖</p>\n</li>\n<li>\n<p>scope  :  作用范围有 singleton，prototype</p>\n</li>\n<li>\n<p>isLazy   :  <strong>懒加载</strong> ，true  的话 会在 getBean 时生成，而且 scope 的 prototype 无效，false 在 Spring 启动过程中直接生成</p>\n</li>\n<li>\n<p>initMethodName  :  初始化方法，当然是初始化时调用🐖</p>\n</li>\n<li>\n<p>primary  :  主要的，有多个 Bean 时使用它</p>\n</li>\n<li>\n<p>dependsOn  :   依赖的 Bean，必须等依赖 Bean 创建好才可以创建</p>\n</li>\n</ul>\n<blockquote>\n<p>PS: @Component ，@Bean , &lt;bean/&gt; 都会被解析成 BeanDefinition</p>\n</blockquote>\n<h3 id=\"反射\"><a class=\"anchor\" href=\"#反射\">#</a> 反射</h3>\n<p>有了原料后呢，咋们再来看看这个 <strong>工厂</strong> BeanFactory</p>\n<p>先简单想一想这个工厂要怎么创建这个 Bean 呢？</p>\n<p>没错，肯定就是这个 <strong>反射</strong> 啦 😄</p>\n<p>那么，结合我们从原料中获取的重要属性之一的 beanClass ，我们可以画出这么一张图 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210901221544464.png\" alt=\"image-20210901221544464\" /></p>\n<p>那么我们再来看看这个 BeanFactory 叭 😄</p>\n<h3 id=\"beanfactory\"><a class=\"anchor\" href=\"#beanfactory\">#</a> BeanFactory</h3>\n<p>先来看看 作为 IOC 容器的<strong>根接口</strong> 的 BeanFactory  提供了什么方法吧👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904162844126.png\" alt=\"image-20210904162844126\" /></p>\n<p>主要是这个 getBean 方法，以及 <strong>别名获取</strong>，<strong>类型获取</strong> 方法和其他一些判断方法如 ：<strong>单例</strong>，<strong>多例</strong>，<strong>类型匹配</strong>，<strong>包含 bean</strong></p>\n<p>我们来简单看看它的子接口都有哪些叭～😄</p>\n<p>这里分享个小技巧叭🐖</p>\n<p>看源码的时候，一般就直接看这个<strong>默认</strong>接口 如这里的 DefaultListableBeanFactory</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904161436139.png\" alt=\"image-20210904161436139\" /></p>\n<p>基本上看个类名就知道大概作用了，那么先对号入座下👇</p>\n<p><strong>ListableBeanFactory</strong></p>\n<blockquote>\n<p>👉 遍历 bean</p>\n</blockquote>\n<p><strong>HierarchicalBeanFactory</strong></p>\n<blockquote>\n<p>👉  提供 父子关系，可以获取上一级的 BeanFactory</p>\n</blockquote>\n<p><strong>ConfigurableBeanFactory</strong></p>\n<blockquote>\n<p>👉  实现了 SingletonBeanRegistry ，主要是 单例 Bean 的注册，生成</p>\n</blockquote>\n<p><strong>AutowireCapableBeanFactory</strong></p>\n<blockquote>\n<p>👉  和自动装配有关的</p>\n</blockquote>\n<p><strong>AbstractBeanFactory</strong></p>\n<blockquote>\n<p>👉  单例缓存，以及 FactoryBean 相关的</p>\n</blockquote>\n<p><strong>ConfigurableListableBeanFactory</strong></p>\n<blockquote>\n<p>👉  预实例化单例 Bean，分析，修改 BeanDefinition</p>\n</blockquote>\n<p><strong>AbstractAutowireCapableBeanFactory</strong></p>\n<blockquote>\n<p>👉 创建 Bean ，属性注入，实例化，调用初始化方法 等等</p>\n</blockquote>\n<p><strong>DefaultListableBeanFactory</strong></p>\n<blockquote>\n<p>👉 支持单例 Bean ，Bean 别名 ，父子 BeanFactory，Bean 类型转化 ，Bean 后置处理，FactoryBean，自动装配等</p>\n</blockquote>\n<p>是不是非常丰富 😄</p>\n<h3 id=\"factorybean\"><a class=\"anchor\" href=\"#factorybean\">#</a> FactoryBean</h3>\n<p>FactoryBean  ，它本身就是个 Bean，算是小工厂 ，归 BeanFactory 这个大工厂管理的。</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904174616712.png\" alt=\"image-20210904174616712\" /></p>\n<p>可以看到它就只有三个方法</p>\n<ol>\n<li>getObject () 获取对象</li>\n<li>isSingleton () 单例对象</li>\n<li>getObjectType ()  返回的是 Bean 对象的类型</li>\n</ol>\n<p>相比大工厂 BeanFactory 少了特别多东西，没有严格的 Bean 生命周期流程</p>\n<p>在 👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbUxHOERXdW1vVmg0a18tMUdDWTBWUQ==\">《三分钟快速了解 Spring 中的工厂模式》</span> 一文中有介绍到 😄</p>\n<p>FacotryBean 对象本身也是一个 Bean，是一个小工厂，可以生产另外的 Bean</p>\n<p>BeanFactory 是 Spring 容器的根接口，是大工厂，生产各种各样的 Bean</p>\n<p>beanName  就是正常对象</p>\n<p>“&amp;”+beanName   ， 获取的是实现了该接口的 FacotryBean 工厂对象</p>\n<p>大致如下 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904180204105.png\" alt=\"image-20210904180204105\" /></p>\n<h3 id=\"applicationcontext\"><a class=\"anchor\" href=\"#applicationcontext\">#</a> ApplicationContext</h3>\n<p>我们再来看看这个 ApplicationContext</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904161808341.png\" alt=\"image-20210904161808341\" /></p>\n<p>可以看到它扩展了很多功能，除了 BeanFactory ，它还可以<strong>创建，获取 Bean</strong>，以及处理<strong>国际化</strong>，<strong>事件</strong>，<strong>获取资源</strong>等</p>\n<ul>\n<li>EnvironmentCapable  获取 环境变量 的功能，可以获取到 <strong>操作系统变量</strong> 和 <strong>JVM 环境变量</strong></li>\n<li>ListableBeanFactory 获取所有 BeanNames，判断某个 BeanName 是否存在 BeanDefinition 对象，统计 BeanDefinition 对象，获取某个类型对应的所有 beanNames 等功能</li>\n<li>HierarchicalBeanFactory  获取父 BeanFactory ，判断某个 name 是否存在 bean 对象的功能</li>\n<li>MessageSource  <strong>国际化功能</strong>，获取某个国际化资源</li>\n<li>ApplicationEventPublisher <strong>事件发布功能</strong>（重点）</li>\n<li>ResourcePatternResolver <strong>加载，获取资源的功能</strong>，这里的资源可能是文件，图片 等某个 URL 资源都可以</li>\n</ul>\n<p>还有这三个重要的类👇, 就不一一介绍先啦😄</p>\n<ol>\n<li>ClassPathXmlApplicationContext</li>\n<li>AnnotationConfigApplicationContext</li>\n<li>FileSystemXmlApplicationContext</li>\n</ol>\n<p>赶紧来看看这个核心叭！</p>\n<h3 id=\"ioc-容器\"><a class=\"anchor\" href=\"#ioc-容器\">#</a> IOC 容器</h3>\n<p>当然，这时候出场的肯定是 IOC 啦。</p>\n<p>我们都知道 IOC 是 <strong>控制反转</strong>  ，但是别忘了 <strong>容器</strong> 这个词，比如 ** 容器的根接口 **BeanFactory  ，<strong>容器的实现</strong> 👇</p>\n<ol>\n<li>ClassPathXmlApplicationContext</li>\n<li>AnnotationConfigApplicationContext</li>\n<li>FileSystemXmlApplicationContext</li>\n</ol>\n<p>同时我们要注意这里无处不在的 <strong>后置处理器</strong>  xxxPostProcessor 🐷</p>\n<p>这个是 Spring 中扩展性强的原因了！</p>\n<p>我们可以在各个过程中合理应用这些 PostProcessor 来扩展，或者修改 Bean 定义信息等等</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210901222805351.png\" alt=\"image-20210901222805351\" /></p>\n<p>可以看到在这个容器中，完成了 Bean 的初始化，而这个过程还有很多细节 ，请往下看看👇</p>\n<p>DI 到时写 <strong>属性填充</strong> 时再介绍🐷</p>\n<h3 id=\"beanfactory-后置处理器\"><a class=\"anchor\" href=\"#beanfactory-后置处理器\">#</a> BeanFactory 后置处理器</h3>\n<p>作为 IOC 容器根接口的 BeanFactory ，有着非常高的扩展性，比如最开始获取原料 BeanDefinition  时，就出现了两个针对 BeanFactory  工厂的后置处理器 👇</p>\n<p>BeanDefinitionRegistryPostProcessor</p>\n<blockquote>\n<p>通过该接口，我们可以自己掌控我们的 <strong>原料</strong>，通过 BeanDefinitionRegistry  接口去 <strong>新增</strong>，<strong>删除</strong>，<strong>获取</strong>我们这个 BeanDefinition</p>\n</blockquote>\n<p>BeanFactoryPostProcessor</p>\n<blockquote>\n<p>通过该接口，可以在 <strong>实例化对象前</strong>，对  BeanDefinition 进行修改 ，<strong>冻结</strong> ，<strong>预实例化单例 Bean</strong> 等</p>\n</blockquote>\n<p>经过上面层层阻碍后，我们最终会来到目标方法 getBean ，将原料投入生产，最终获取一个个 Bean 对象出来</p>\n<p>那么随之而来的就是这个 Bean 的生命周期啦 😄</p>\n<h3 id=\"bean-生命周期\"><a class=\"anchor\" href=\"#bean-生命周期\">#</a> Bean 生命周期</h3>\n<p>Bean 的创建和管理有<strong>标准化的流程</strong>！</p>\n<p>这里在我们的工厂 BeanFactory 中写得很清楚 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210902072224002.png\" alt=\"image-20210902072224002\" /></p>\n<p>总共 <strong>14</strong> 个步骤，是不是一下子就清晰多了😄</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210902073122559.png\" alt=\"image-20210902073122559\" /></p>\n<p>在看这部分的源码时，要多注意两个英文单词 😝</p>\n<ol>\n<li><strong>实例化</strong> 👉 <strong>Instantiation</strong></li>\n<li><strong>初始化</strong> 👉 <strong>Initialization</strong></li>\n</ol>\n<p>ps: 别看快搞错了 哈哈😝</p>\n<p>仔细阅读上面这 14 个步骤，会发现前面 <strong>8</strong> 个都是 Aware 接口，而他们的作用也很简单，就是获取 xxAware 这个单词的前缀 xx 😄</p>\n<p>比如我们在上文 👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvWGpHSUsxMUZlTnBKV1VUWmhKaHFsZw==\">《三分钟快速上手 Spring 事件机制》</span> 中提到的事件发布器 ApplicationEventPublisher ，只要你实现了 ApplicationEventPublisherAware 接口，就可以<strong>获取</strong> 事件发布器 ApplicationEventPublisher  ！</p>\n<h3 id=\"bean-后置处理器\"><a class=\"anchor\" href=\"#bean-后置处理器\">#</a> Bean 后置处理器</h3>\n<p>在实例化 和 初始化流程中，把这个 Bean 的后置处理器 BeanPostProcessor 安排上，就得到下图啦 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210902082034253.png\" alt=\"image-20210902082034253\" /></p>\n<p>这里留意下 <strong>实例化</strong> 有扩展点  InstantiationAwareBeanPostProcessor ， <strong>初始化</strong> 扩展点 BeanPostProcessor 就非常多啦，我们主要来关注下这个 AOP</p>\n<h3 id=\"aop\"><a class=\"anchor\" href=\"#aop\">#</a> AOP</h3>\n<p>那么 AOP 是在哪个步骤代理对象的呢？👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210903080503505.png\" alt=\"image-20210903080503505\" /></p>\n<p>可以在 AbstractAutoProxyCreator 类中看到 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210903080803199.png\" alt=\"image-20210903080803199\" /></p>\n<p>其他具体信息在下文的 <strong>AOP 插件</strong> 一文中再讲一下😄</p>\n<p>关于代理的知识点可以看看这里</p>\n<p>👉  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvSXpHV0c3Ti1HSVRKc2lIRkxsZHVwQQ==\">《Java 代理模式和字节码的探索》</span></p>\n<p>👉  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvUkJNVjJscWNZSDNINkY2dGJBQ0I1QQ==\">《Cglib 动态代理探索 (ASM，Spring)》</span></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>本文就先介绍到这里啦🐖</p>\n<p>主要介绍了 Spring 里面的这些脉络，方便小伙伴们对它有个整体的印象先～</p>\n<p>再介绍其中的一些扩展点，比如从源材料开始的 BeanFactoryPostprocessor ，到产物 Bean 的 BeanPostprocessor 。</p>\n<p>实例化，初始化的顺序，Bean 的生命周期，以及 BeanFactory 及子类扩展的功能，再到 ApplicationContext 的功能。</p>\n<p>还有这个核心机制： <strong>工厂 + XML + 反射</strong>，以及引出下文要说的 AOP <strong>发生的地方</strong>。</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904203613899.png\" alt=\"image-20210904203613899\" /></p>\n<p>本期的思维导图会和后面的章节汇总一起再分享哦😋</p>\n<p><strong>ps</strong>：最近忙起来啦，更文速度会慢一些哦～，喜欢的话可以 <strong>星标</strong> 哦，这样可以第一时间收到更文消息🐷</p>\n<p><strong>我是 4ye 咱们下期应该…… 很快再见！！</strong> 😆</p>\n<p>喜欢的话还可以关注下公众号 <strong>Java4ye</strong> 支持下 <strong>4ye</strong> 呀😝</p>\n",
            "tags": [
                "Spring家族"
            ]
        },
        {
            "id": "Python/情窦初开，连喜欢都这么的青涩/",
            "url": "Python/情窦初开，连喜欢都这么的青涩/",
            "title": "情窦初开，原来喜欢这么可爱的",
            "date_published": "2022-01-16T10:32:28.553Z",
            "content_html": "<p>这两天被一位可爱的小粉丝秀到了，原来 这就是 <strong>年少的喜欢呀</strong>～～😊</p>\n<p>让 4ye 这上了年纪的老人家好生羡慕呀😝</p>\n<p>直接上图让大家一起感受下  &lt;(￣︶￣)↗[GO!]</p>\n<p>（以下内容经过她滴同意 哈哈哈 `~）</p>\n<h3 id=\"我喜欢你溢于言表\"><a class=\"anchor\" href=\"#我喜欢你溢于言表\">#</a> 我喜欢你，溢于言表</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210223234231974.png\" alt=\"image-20210223234231974\" /></p>\n<h3 id=\"我喜欢你无时无刻\"><a class=\"anchor\" href=\"#我喜欢你无时无刻\">#</a> 我喜欢你，无时无刻</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210223233638229.png\" alt=\"image-20210223233638229\" /></p>\n<h3 id=\"我喜欢你小心翼翼\"><a class=\"anchor\" href=\"#我喜欢你小心翼翼\">#</a> 我喜欢你，小心翼翼</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210223233737066.png\" alt=\"image-20210223233737066\" /></p>\n<h3 id=\"啊啊啊啊\"><a class=\"anchor\" href=\"#啊啊啊啊\">#</a> 啊啊啊啊</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210224225727034.png\" alt=\"image-20210224225727034\" /></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210223233803205.png\" alt=\"image-20210223233803205\" /></p>\n<p>4ye 承受着这个年纪不该有得狗粮  ， 哈哈哈哈  这直接往我这边投喂</p>\n<p><img data-src=\"http://img.ryzeyang.top/79MgL\" alt=\"img\" /></p>\n<p><img data-src=\"http://img.ryzeyang.top/v1MrO\" alt=\"img\" /></p>\n<h3 id=\"词云\"><a class=\"anchor\" href=\"#词云\">#</a> 词云</h3>\n<p>咋们还是来看点技术吧，看看这位小粉丝 这喜欢的状态  绘画出来的词云长啥样～</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210830075519955.png\" alt=\"image-20210830075519955\" /></p>\n<h3 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h3>\n<p>代码的话直接参考该连接～</p>\n<p>果然三分钟的事情 ，除了下载包比较费时～</p>\n<blockquote>\n<p>3 分钟教你用 python 制作一个简单词云：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZGpkamRqMTIzL3AvMTIxNTM2MDMuaHRtbA==\">https://www.cnblogs.com/djdjdj123/p/12153603.html</span></p>\n</blockquote>\n<p>代码这里稍微调整了下，注意这里要指定使用的中文字体～</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*- coding: utf-8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @author  Java4ye</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @date  2021/2/24 22:38</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @微信公众号: Java4ye</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @GitHub https://github.com/RyzeYang</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @博客 https://blog.csdn.net/weixin_40251892</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">from</span> os <span class=\"token keyword\">import</span> path</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> jieba</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">from</span> wordcloud <span class=\"token keyword\">import</span> WordCloud<span class=\"token punctuation\">,</span> STOPWORDS</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">### 当前文件路径</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>d <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Read the whole text.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token string\">'like.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">## 进行分词</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#刚开始是分完词放进 txt 再打开却总是显示不出中文很奇怪</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>default_mode <span class=\"token operator\">=</span>jieba<span class=\"token punctuation\">.</span>cut<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>text <span class=\"token operator\">=</span> <span class=\"token string\">\"\\r\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>default_mode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>alice_mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token string\">\"panda.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>stopwords <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>STOPWORDS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>wc <span class=\"token operator\">=</span> WordCloud<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">#设置字体，不指定就会出现乱码，这个字体文件需要下载</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    font_path<span class=\"token operator\">=</span><span class=\"token string\">r'msyh.ttf'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    background_color<span class=\"token operator\">=</span><span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    max_words<span class=\"token operator\">=</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    mask<span class=\"token operator\">=</span>alice_mask<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    stopwords<span class=\"token operator\">=</span>stopwords<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\"># generate word cloud</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>wc<span class=\"token punctuation\">.</span>generate<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># store to file</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>wc<span class=\"token punctuation\">.</span>to_file<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token string\">\"panda_result.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\"># show</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>wc<span class=\"token punctuation\">,</span> interpolation<span class=\"token operator\">=</span><span class=\"token string\">'bilinear'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>plt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">\"off\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>alice_mask<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span>plt<span class=\"token punctuation\">.</span>cm<span class=\"token punctuation\">.</span>gray<span class=\"token punctuation\">,</span> interpolation<span class=\"token operator\">=</span><span class=\"token string\">'bilinear'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>plt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">\"off\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"http://img.ryzeyang.top/python%E8%AF%8D%E4%BA%91.png\" alt=\"python词云\" /></p>\n<h3 id=\"完结-撒花-̄-̄\"><a class=\"anchor\" href=\"#完结-撒花-̄-̄\">#</a> 完结 撒花 <em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</h3>\n<h3 id=\"喜欢真好呀-oo\"><a class=\"anchor\" href=\"#喜欢真好呀-oo\">#</a> 喜欢，真好呀 o (<sup>▽</sup>)o</h3>\n<h3 id=\"不知道此刻阅读的你是否也有这一股喜欢的劲愿你们互相吸引~-牵起手来\"><a class=\"anchor\" href=\"#不知道此刻阅读的你是否也有这一股喜欢的劲愿你们互相吸引~-牵起手来\">#</a> 不知道此刻阅读的你，是否也有这一股喜欢的劲，愿你们互相吸引～牵起手来 😝</h3>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "Java/单例模式八个例子/",
            "url": "Java/单例模式八个例子/",
            "title": "单例模式八个例子",
            "date_published": "2022-01-16T09:54:55.312Z",
            "content_html": "<blockquote>\n<p>实现单例模式的八种模式：饿汉式，懒汉式，双重检查锁模式，静态内部类模式，序列化模式，注册式之枚举，注册式之容器，线程实现 ThreadLocal</p>\n</blockquote>\n<p>参考大神 Tom 的《Spring 5 核心原理与 30 个类手写实战 - 谭勇德》</p>\n<blockquote>\n<p>单例模式 Singleton Pattern</p>\n<p>确保一个类在任何场景下只有一个实例，并提供一个全局访问点</p>\n</blockquote>\n<h3 id=\"使用场景\"><a class=\"anchor\" href=\"#使用场景\">#</a> 使用场景</h3>\n<blockquote>\n<p><em>J2EE 标准中的 ServletContext Serv etContextConfig 等、 Spring 框架应用中的 ApplicationContext 、数据库的连接池 也都是单例形式</em></p>\n</blockquote>\n<h3 id=\"饿汉式\"><a class=\"anchor\" href=\"#饿汉式\">#</a> 饿汉式</h3>\n<p>在类加载的时候就 &lt;font style='color:#0099ff'&gt; 立即初始化 &lt;/font&gt;，并且创建单例对象，属于 &lt; font style='color:#0099ff'&gt; 线程安全 &lt;/font&gt;</p>\n<blockquote>\n<p>SpringIOC 容器 ApplicationContext 就是典型的饿汉式单例模式</p>\n</blockquote>\n<blockquote>\n<p>优点： 没有加任何锁、执行效率比较高，用户体验比懒汉式单例模式更好。</p>\n<p>缺点： 类加载的时候就初始化，不管用与不用都占着空间，浪费了内存，有可能 “占着茅坑不拉屎</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ** 饿汉式 *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> ** @date 2020/9/6 8:19*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HungrySingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">HungrySingleton</span> hungry<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HungrySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">HungrySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">HungrySingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> hungry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"懒汉式\"><a class=\"anchor\" href=\"#懒汉式\">#</a> 懒汉式</h3>\n<blockquote>\n<p>使用时才去创建该对象</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ** 懒汉式 *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> ** @date 2020/9/6 8:19*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LazySingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LazySingleton</span> instance<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">LazySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LazySingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      instance<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LazySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"双重检查锁模式\"><a class=\"anchor\" href=\"#双重检查锁模式\">#</a> 双重检查锁模式</h3>\n<p>懒汉式是线程不安全的，需要<em><strong>加锁</strong></em>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ** 双重检查锁 *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> ** @date 2020/9/6 8:19*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LazyDoubleCheckSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LazyDoubleCheckSingleton</span> lazyDoubleCheckMode<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">LazyDoubleCheckSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LazyDoubleCheckSingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lazyDoubleCheckMode<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LazyDoubleCheckSingleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lazyDoubleCheckMode<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          lazyDoubleCheckMode<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LazyDoubleCheckSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">return</span> lazyDoubleCheckMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"静态内部类模式\"><a class=\"anchor\" href=\"#静态内部类模式\">#</a> 静态内部类模式</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ** 静态内部类模式 *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> ** 这种形式兼顾饿汉式单例模式的内存浪费问题和 synchronized 的性能问题 *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> ** 加载静态变量，方法，不包括这个静态内部类 *</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> ** 被外部类调用的时候内部类才会加载 *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> ***</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> ** @date 2020/9/6 9:12*</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LazyInnerClassSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LazyInnerClassSingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">InnerLazyHolder</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerLazyHolder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">LazyInnerClassSingleton</span> LAZY <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LazyInnerClassSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   ** 防止反射创建 *</pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">LazyInnerClassSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InnerLazyHolder</span><span class=\"token punctuation\">.</span>LAZY <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不允许创建多个实例\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"序列化模式\"><a class=\"anchor\" href=\"#序列化模式\">#</a> 序列化模式</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> ** 序列化模式 *</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> ***</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> ** @date 2020/9/6 21:59*</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SerializableSingleton</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">7018585554862336578L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">SerializableSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SerializableSingleton</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SerializableSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SerializableSingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   *objectInputStream 中通过这个 hasReadResolveMethod 去判断有没有该方法，有的话反序列化会去调用该方法 *</pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   * 返回类型必须是 Object*</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">readResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"注册式单例模式\"><a class=\"anchor\" href=\"#注册式单例模式\">#</a> 注册式单例模式</h3>\n<blockquote>\n<p>注册式单例模式又称为登记式单例模式 就是将每一个实例都登记到某一个地方，使用唯一的标识 。注册式单例模式有两种：一种为<em><strong>枚举式单例</strong></em>，另一为<strong>容器式单例模式</strong></p>\n</blockquote>\n<h4 id=\"枚举式\"><a class=\"anchor\" href=\"#枚举式\">#</a> 枚举式</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ** 注册式单例模式又称为登记式单例模式 就是将每一个实例都登记到某一个地方，使用唯一的标识 。注册式单例模式有两种：一种为枚举式单例，另一为容器式单例模式 *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> ** 注册式单例模式之枚举式 *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> ** @date 2020/9/6 23:18*</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">EnumSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   ** 单例 *</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   ** \\*/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">EnumSingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"容器式\"><a class=\"anchor\" href=\"#容器式\">#</a> 容器式</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> ** 注册式单例模式又称为登记式单例模式 就是将每一个实例都登记到某一个地方，使用唯一 *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> ** 的标识 。注册式单例模式有两种：一种为枚举式单例，另一为容器式单例模式 *</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> ** 注册式单例模式之容器式 *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> ** @date 2020/9/9 7:16*</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ContainerSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">ContainerSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> ioc<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>ioc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ioc<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>          obj <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          ioc<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">return</span> ioc<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"线程单例实现-thread-local\"><a class=\"anchor\" href=\"#线程单例实现-thread-local\">#</a> 线程单例实现 Thread Local</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ** 线程单例实现 Thread Local*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> ** 确保每一个线程只有一个实例对象 *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> ** @date 2020/9/9 7:31*</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocalSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">ThreadLocalSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThreadLocalSingleton</span><span class=\"token punctuation\">></span></span> threadLocal <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">.</span><span class=\"token function\">withInitial</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocalSingleton</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ThreadLocalSingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h3>\n<p>先简单测试下这个 【懒汉式线程不安全版本】 和 【反射破坏单例】 这两种模式。。。其他几个写在下篇博客啦🐖</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LazyInnerClassSingleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LazySingleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedBlockingDeque</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ThreadFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   ** 线程调度工厂创建线程 *</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExcutorThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ThreadFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AtomicInteger</span> atomicInteger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ExcutorThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Thread</span> <span class=\"token function\">newThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> atomicInteger<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token class-name\">String</span> threadName <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\":%s\"</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      thread<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>threadName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>threadName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      <span class=\"token keyword\">return</span> thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>   ** 创建线程池 *</pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>   **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ThreadPoolExecutor</span> <span class=\"token function\">getThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> threadFactoryName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MINUTES<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExcutorThread</span><span class=\"token punctuation\">(</span>threadFactoryName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>   ** 懒汉式 线程不安全 测试 *</pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>   **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">testLazySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token class-name\">ThreadPoolExecutor</span> lazyPool <span class=\"token operator\">=</span> <span class=\"token function\">getThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LazySingleton\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>      <span class=\"token keyword\">int</span> finalI <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>      lazyPool<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LazySingleton</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"[%s]\"</span><span class=\"token punctuation\">,</span> finalI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">//    lazyMode.shutdown();*</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>   ** 反射破坏单例模式 *</pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>   **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">testLazyInnerClassSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LazyInnerClassSingleton</span><span class=\"token punctuation\">></span></span> lazyInnerClassModeClass <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyInnerClassSingleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>      <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LazyInnerClassSingleton</span><span class=\"token punctuation\">></span></span> constructor <span class=\"token operator\">=</span> lazyInnerClassModeClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>      constructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>      <span class=\"token class-name\">LazyInnerClassSingleton</span> lazyInnerClassInstance <span class=\"token operator\">=</span> constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>lazyInnerClassInstance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">NoSuchMethodException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">InvocationTargetException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>懒汉式</li>\n</ol>\n<p><img data-src=\"http://img.ryzeyang.top/20200910072049.png\" alt=\"懒汉式 线程不安全 测试\" /></p>\n<ol start=\"2\">\n<li>反射破坏单例模式</li>\n</ol>\n<p><img data-src=\"http://img.ryzeyang.top/20200911072319.png\" alt=\"反射破坏单例模式\" /></p>\n<p>有什么不对的请多多指教，阿里嘎多😄</p>\n",
            "tags": [
                "Java"
            ]
        }
    ]
}