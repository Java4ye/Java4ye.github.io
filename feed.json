{
    "version": "https://jsonfeed.org/version/1",
    "title": "程序员小站",
    "subtitle": "4ye的后端技术小站",
    "icon": "https://www.java4ye.cn/images/favicon.ico",
    "description": "整理公众号Java4ye 的文章,方便复习查阅😋",
    "home_page_url": "https://www.java4ye.cn",
    "items": [
        {
            "id": "https://www.java4ye.cn/posts/59fbae0.html",
            "url": "https://www.java4ye.cn/posts/59fbae0.html",
            "title": "python爬取奥运会弹幕",
            "date_published": "2022-01-22T07:47:07.845Z",
            "content_html": "<h3 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h3>\n<p>最近这 2020 的奥运会终于开启啦，不过嘛，还是咱们 08 年的奥运大气！！！😝</p>\n<p>而且早早就传来了好消息！</p>\n<blockquote>\n<p><strong>杨倩在女子十米气步枪决赛夺得首金，东京奥运会现场首先奏响中国国歌！</strong></p>\n<p><strong>让《义勇军进行曲》响彻东京！！！</strong></p>\n</blockquote>\n<p>视频地址 👇：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW5CNHkxSzdQNw==\">https://www.bilibili.com/video/BV1nB4y1K7P7</span></p>\n<p>太有牌面了！！</p>\n<p><img data-src=\"http://img.ryzeyang.top/vvp0n\" alt=\"img\" /></p>\n<p>那今天 4ye 就用  <code>python</code>  来爬一下咱们《<strong>2008 北京奥运会开幕式</strong>》这个视频😝</p>\n<p>看到这画卷！又勾起初见时的回忆，实在是太震撼了！！祖国牛逼！！</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210724181305195.png\" alt=\"image-20210724181305195\" /></p>\n<h3 id=\"页面分析\"><a class=\"anchor\" href=\"#页面分析\">#</a> 页面分析</h3>\n<p>这就开始我们此次的爬虫之旅😄</p>\n<p>可以发现页面的右下脚有个 <strong>查看历史弹幕</strong> 的按钮，通过点击它可能触发一些查询操作。</p>\n<p>所以我们要通过  <code>F12</code>  打开浏览器的控制台，来验证我们的猜测（打开后再去点击按钮）</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210724101940907.png\" alt=\"image-20210724101940907\" /></p>\n<p>点击后，可以发现<strong>控制台</strong>多了一系列可疑的  <code>API</code>  操作，而且  <code>response</code>  的数据是乱码🙃</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210724101155553.png\" alt=\"image-20210724101155553\" /></p>\n<p>这就有点头大了🐷</p>\n<p><img data-src=\"http://img.ryzeyang.top/vvDg9\" alt=\"img\" /></p>\n<p>不过转念一想，这前端肯定有钥匙呀～</p>\n<h3 id=\"解密之路\"><a class=\"anchor\" href=\"#解密之路\">#</a> 解密之路</h3>\n<p>这一步就需要有很大的耐心了～得去好好分析下这个<strong> js 的调用栈</strong></p>\n<p><img data-src=\"http://img.ryzeyang.top/ZZE1p\" alt=\"img\" /></p>\n<p>就不多赘述了，过程太折磨了～咱们直接看结果叭😄</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210724100218587.png\" alt=\"image-20210724100218587\" /></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210724100054479.png\" alt=\"image-20210724100054479\" /></p>\n<p>可以看到这里将<strong>流数据</strong>读取到无符号数组  <code>Unit8Array</code>  中，其中经过一些算法，对其进行移位操作等，获取出 <strong>Unicode 编码</strong> ，再配合  <code>String.fromCharCode.apply(String, a)</code>  将其转换成字符串，最终展现出来。</p>\n<h4 id=\"验证\"><a class=\"anchor\" href=\"#验证\">#</a> 验证</h4>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210724110454024.png\" alt=\"image-20210724110454024\" /></p>\n<p>到了这一步，我们已经可以获取到这个<strong>弹幕</strong>了，那么接下来就是将要将这个读取数据并解密的操作封装起来🐷</p>\n<p><img data-src=\"http://img.ryzeyang.top/bpEWg\" alt=\"img\" /></p>\n<p>这对于菜鸡的我还是太难了🙃 于是…… 就只能上网搜搜有啥好的解决办法了</p>\n<h3 id=\"神仙文档\"><a class=\"anchor\" href=\"#神仙文档\">#</a> 神仙文档</h3>\n<p>这是什么神仙文档！！😍</p>\n<p>地址 👉： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW95dS5tb2UvYmlsaWJpbGktYXBpLyMv\">https://www.moyu.moe/bilibili-api/#/</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210724114110513.png\" alt=\"image-20210724114110513\" /></p>\n<p>这下直接爬到巨人肩膀上了 哈哈哈，起飞😝</p>\n<p><img data-src=\"http://img.ryzeyang.top/wyWxq\" alt=\"img\" /></p>\n<h3 id=\"获取弹幕\"><a class=\"anchor\" href=\"#获取弹幕\">#</a> 获取弹幕</h3>\n<p>阅读文档后，我立刻发现我想要的，还有很多其他的功能，小伙伴们可以自行探索！😄</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210724114618092.png\" alt=\"image-20210724114618092\" /></p>\n<h4 id=\"安装-bilibili-api\"><a class=\"anchor\" href=\"#安装-bilibili-api\">#</a> 安装 bilibili-api</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip install bilibili<span class=\"token operator\">-</span>api</pre></td></tr></table></figure><h4 id=\"运行结果\"><a class=\"anchor\" href=\"#运行结果\">#</a> 运行结果</h4>\n<p>运行上面简单的几行代码，就可以获取到弹幕了😄</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210724114924766.png\" alt=\"image-20210724114924766\" /></p>\n<h3 id=\"词云\"><a class=\"anchor\" href=\"#词云\">#</a> 词云</h3>\n<p>那么，现在弹幕也有了，那我们只需要对它进行可视化操作就好啦！</p>\n<p>这里选择一个<strong>自然语言处理</strong>基本工具  <code>jieba</code>  , 然后配合着<strong>词云</strong>  <code>wordcloud </code>  使用即可😝</p>\n<p>用法和之前写过的这篇类似</p>\n<p><strong>文章地址（可点击）</strong> 👉： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZ29nZXhfRUlzcXd4ZkpoOGt4NV9ldw==\">情窦初开，原来喜欢这么可爱的</span></p>\n<p><strong>文档介绍（可点击）</strong> 👉： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Z4c2p5L2ppZWJh\">https://github.com/fxsjy/jieba</span></p>\n<h4 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h4>\n<p>我们将上面的弹幕保存到文本文件中，就不用每次都去爬取了，然后可以挑选图片，用词云来生成～</p>\n<p>注意要将中文字体包放在相应的目录下，不然会显示不出来🐷</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*- coding: utf-8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @author  Java4ye</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @微信公众号: Java4ye</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @GitHub https://github.com/RyzeYang</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @博客 https://blog.csdn.net/weixin_40251892</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">from</span> os <span class=\"token keyword\">import</span> path</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> jieba</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">from</span> wordcloud <span class=\"token keyword\">import</span> WordCloud<span class=\"token punctuation\">,</span> STOPWORDS</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">### 当前文件路径</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>d <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># Read the whole text.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token string\">'OlympicGames_dm.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">## 进行分词</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#刚开始是分完词放进 txt 再打开却总是显示不出中文很奇怪</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>default_mode <span class=\"token operator\">=</span>jieba<span class=\"token punctuation\">.</span>cut<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>text <span class=\"token operator\">=</span> <span class=\"token string\">\"\\r\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>default_mode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>alice_mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token string\">\"panda.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>stopwords <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>STOPWORDS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>wc <span class=\"token operator\">=</span> WordCloud<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">#设置字体，不指定就会出现乱码，这个字体文件需要下载</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    font_path<span class=\"token operator\">=</span><span class=\"token string\">r'msyh.ttf'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    background_color<span class=\"token operator\">=</span><span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    max_words<span class=\"token operator\">=</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    mask<span class=\"token operator\">=</span>alice_mask<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    stopwords<span class=\"token operator\">=</span>stopwords<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\"># generate word cloud</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>wc<span class=\"token punctuation\">.</span>generate<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\"># store to file</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>wc<span class=\"token punctuation\">.</span>to_file<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token string\">\"panda_result.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\"># show</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>wc<span class=\"token punctuation\">,</span> interpolation<span class=\"token operator\">=</span><span class=\"token string\">'bilinear'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>plt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">\"off\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>alice_mask<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span>plt<span class=\"token punctuation\">.</span>cm<span class=\"token punctuation\">.</span>gray<span class=\"token punctuation\">,</span> interpolation<span class=\"token operator\">=</span><span class=\"token string\">'bilinear'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>plt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">\"off\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"最终结果\"><a class=\"anchor\" href=\"#最终结果\">#</a> 最终结果</h3>\n<p>正如大字所示！ <strong>愿祖国繁荣昌盛</strong>！！ <strong>中国加油</strong>！！</p>\n<p><img data-src=\"http://img.ryzeyang.top/panda_result_dm.jpg\" alt=\"panda_result_dm\" /></p>\n<p>使用的图片</p>\n<p><img data-src=\"http://img.ryzeyang.top/panda_dm.png\" alt=\"panda_dm\" /></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>来到熟悉的环节，画个图总结下此次的爬虫之旅叭～😄</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210724190838355.png\" alt=\"image-20210724190838355\" /></p>\n<h4 id=\"温馨提示\"><a class=\"anchor\" href=\"#温馨提示\">#</a> 温馨提示</h4>\n<p>别忘了，我们现在有大佬写好的库文件，可以从中了解到要怎么<strong>读取数据并将解密的操作一起封装起来</strong>了，所以有了<strong>轮子</strong>也别忘了要怎么<strong>造轮子</strong>呀😄</p>\n<p><img data-src=\"http://img.ryzeyang.top/n46od\" alt=\"img\" /></p>\n<h3 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>欢迎小伙伴们来一起探讨问题～</p>\n<blockquote>\n<p>如果你觉得本篇文章还不错的话，那<strong>拜托再点点赞</strong>支持一下呀😝</p>\n<p><strong>让我们开始这一场意外的相遇吧！~</strong></p>\n<p>欢迎留言！谢谢支持！ヾ (≧▽≦*) o 冲冲冲！！</p>\n<p><strong>我是 4ye 咱们下期应该…… 很快再见！！</strong> 😆</p>\n</blockquote>\n<h3 id=\"让义勇军进行曲响彻东京\"><a class=\"anchor\" href=\"#让义勇军进行曲响彻东京\">#</a> 让《义勇军进行曲》响彻东京！！！</h3>\n<h4 id=\"中国加油-o_o\"><a class=\"anchor\" href=\"#中国加油-o_o\">#</a> 中国加油！💪 O (∩_∩) O</h4>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/d2198198.html",
            "url": "https://www.java4ye.cn/posts/d2198198.html",
            "title": "我用python爬取了掘金的后端作者，并制作了这么个3d图表",
            "date_published": "2022-01-22T07:43:53.570Z",
            "content_html": "<p>今天来和小伙伴们介绍点不一样的～哈哈  😝</p>\n<p>如下图～</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210711123925505.png\" alt=\"image-20210711123925505\" /></p>\n<p>看到这图你想到什么了呢～</p>\n<p><img data-src=\"http://img.ryzeyang.top/LE9A\" alt=\"img\" /></p>\n<p>其实只是我无聊，找个地方练练爬虫 哈哈，然后对数据进行可视化操作，就有了这么一个<strong> 3d 图表</strong></p>\n<p>而且还是有点小收获的，让我来简单介绍下先吧！</p>\n<h3 id=\"爬取的目标\"><a class=\"anchor\" href=\"#爬取的目标\">#</a> 爬取的目标</h3>\n<p>如图所示，此次爬取的目标是 <strong>后端排行榜</strong> ，没错 就是这么些数据，然后对作者对应的赞，等级，进行可视化操作</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210711130057215.png\" alt=\"image-20210711130057215\" /></p>\n<h3 id=\"api获取\"><a class=\"anchor\" href=\"#api获取\">#</a> API 获取</h3>\n<p>然后呢，按下浏览器的  <code>F12</code>  就可以从控制台中找到对应的  <code>API</code>  了</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210711131153507.png\" alt=\"image-20210711131153507\" /></p>\n<p>从上图红框中我们可以发现，这里使用的是  <code>Http2.0</code>  ，和之前爬公众号的一样，要导入这个包  <code>from hyper.contrib import HTTP20Adapter</code></p>\n<h4 id=\"http20\"><a class=\"anchor\" href=\"#http20\">#</a> Http2.0</h4>\n<p><code>Http2.0</code>  有几个新特点：</p>\n<ul>\n<li><strong>新的二进制格式</strong></li>\n<li><strong>多路复用</strong>（MultiPlexing）</li>\n<li><strong>header 压缩</strong></li>\n<li><strong>服务端推送</strong>（server push）</li>\n</ul>\n<p><code>Http2.0</code>  中头部压缩的原理：(谷歌技术专家大佬分享的图片)</p>\n<p><img data-src=\"http://img.ryzeyang.top/hpack-header-compression.png.webp\" alt=\"hpack-header-compression\" /></p>\n<p>简单来说呢，就是客户端和服务端都会维护一个<strong>静态表格</strong>，然后在传输信息时，就可以直接传递这个  <code>header</code>  对应的<strong>索引</strong>给到对方，不用像之前那样传输  <code>header:get</code>  ，可以减少传输大小</p>\n<p><img data-src=\"http://img.ryzeyang.top/n4gWx\" alt=\"img\" /></p>\n<p>有了<strong> APi</strong> 后，我们就是对获取到的数据进行清洗就好了～</p>\n<h3 id=\"pyecharts\"><a class=\"anchor\" href=\"#pyecharts\">#</a> pyecharts</h3>\n<p>清洗完数据后呢，我们要对数据进行可视化操作</p>\n<p>这里就不得不提下这个  <code>pyecharts</code>  了，其实它是 封装了这个  <code>echarts</code>  图表库，类似  <code>vue</code>  封装的  <code>v-charts</code>  ，所以很多参数不明白的话，得去  <code>echarts</code>  官方文档查看，还可以在线调试😄</p>\n<p>👉  <code>pyecharts </code>  官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9weWVjaGFydHMub3JnLyMvemgtY24vaW50cm8=\">https://pyecharts.org/#/zh-cn/intro</span></p>\n<p>👉  <code>echarts</code>  官方文档： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lY2hhcnRzLmFwYWNoZS5vcmcvZXhhbXBsZXMvemgvaW5kZXguaHRtbA==\">https://echarts.apache.org/examples/zh/index.html</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210711191806973.png\" alt=\"image-20210711191806973\" /></p>\n<p>真的很好看😄</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210711193005353.png\" alt=\"image-20210711193005353\" /></p>\n<h3 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h3>\n<p>代码在官网就有，直接将上面的 demo 抄过来，进行简单的改造就可以啦</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210711193501721.png\" alt=\"image-20210711193501721\" /></p>\n<p>代码也比较简单，这里就简单说下核心步骤啦😄，最后将数据填到上面  <code>demo</code>  的相应位置就可以了</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 填充数据，获取最大的赞</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">parse_user_and_got_max_count</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> userNames<span class=\"token punctuation\">,</span> b3d_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    max_digg_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> user <span class=\"token keyword\">in</span> users<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        user_name <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'user_name'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        userNames<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>user_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        user_index <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>userNames<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        got_digg_count <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'got_digg_count'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\"># got_view_count = dict(user).get('got_view_count')</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        level <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'level'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        b3d_data<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>level <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> user_index<span class=\"token punctuation\">,</span> got_digg_count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> got_digg_count <span class=\"token operator\">></span> max_digg_count<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            max_digg_count <span class=\"token operator\">=</span> got_digg_count</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> max_digg_count</pre></td></tr></table></figure><p>运行结果如下，打开生成的  <code>html</code>  页面即可。</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210711194928555.png\" alt=\"image-20210711194928555\" /></p>\n<h3 id=\"效果\"><a class=\"anchor\" href=\"#效果\">#</a> 效果</h3>\n<p>最后再来看一下这个效果叭～😝  感觉挺炫的</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210711124839324.png\" alt=\"image-20210711124839324\" /></p>\n<h3 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>好了，我要减肥去了 绝望啊（没想到有一天我也得为发福焦虑 /(ㄒ o ㄒ)/~~）</p>\n<p><img data-src=\"http://img.ryzeyang.top/7XJJ0\" alt=\"img\" /></p>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/170b008c.html",
            "url": "https://www.java4ye.cn/posts/170b008c.html",
            "title": "4ye含泪用python爬取了自己的公众号粉丝数据",
            "date_published": "2022-01-22T07:43:53.523Z",
            "content_html": "<p>小伙伴们好呀，最近本来是在捣鼓 Gateway 的知识点的，结果被一件事情搞得心不在焉 哈哈哈哈，结果不得不先鸽下～搞完这件事情再继续哦！！ ε=ε=ε=(<sub>￣▽￣)</sub></p>\n<p>本来这篇文章得昨天发的，可是出了大大的意外～（表情👉：） (　o=^・ェ・) o　┏━┓</p>\n<p>我以后尽量多准备些备用文章 哈哈哈哈，免得经常断档～(～o￣3￣)～</p>\n<p><img data-src=\"http://img.ryzeyang.top/8N7v\" alt=\"img\" /></p>\n<h2 id=\"起因\"><a class=\"anchor\" href=\"#起因\">#</a> 起因</h2>\n<p>我先简单称述下事情滴经过～</p>\n<p>由于最近过年过节发滴红包频繁些～导致有好多好友来加我，本想搞个粉丝群活跃下气氛，结果发现来滴怕不是机器人咯，这抢红包滴速度飞快呀，而且 4ye 做事太草率了   没有先验证对方是不是真的粉丝 想进群的都给拉进去了  事后才觉得哪里不对劲！过分！   (﹁ ﹁) ~→</p>\n<p><img data-src=\"http://img.ryzeyang.top/WEr3p\" alt=\"img\" /></p>\n<h2 id=\"坑\"><a class=\"anchor\" href=\"#坑\">#</a> 坑🕳</h2>\n<p>想着既然已经进群了，那我就自己一个个排查下好了（虽然也就那么 12345678 个人 ... ） (ˉ▽ˉ；)...</p>\n<p>那一刻我还傻傻地以为微信可以轻松地导出群成员～</p>\n<p>尝试到最后发现 web 端早不能用了 😵</p>\n<p>但是 4ye 我头铁，不肯放弃，愣是想从技术角度上去摸索下，结果搞了老半天都没有搞定 我晕</p>\n<p>ps：不过现在我有新的想法想尝试下了 嘿嘿 卖个关子先～</p>\n<h2 id=\"正题\"><a class=\"anchor\" href=\"#正题\">#</a> 正题</h2>\n<p>简单介绍下公众号的特征～</p>\n<p>公众号有个人的，有政府组织的，还有企业的～</p>\n<p>4ye 的公众号是个人的～😝</p>\n<p>这也是为啥有小伙伴在公众号后台留言我看到直接回复他 哈哈哈哈</p>\n<p>当然小伙伴还是加我微信才能好好沟通～</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210220082609054.png\" alt=\"image-20210220082609054\" /></p>\n<h3 id=\"没有接口权限\"><a class=\"anchor\" href=\"#没有接口权限\">#</a> 没有接口权限</h3>\n<p>个人的公众号是没有办法通过微信认证的，所以下面很多接口都没有权限的（不然我也不用自己去爬了 😵）</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210220083636474.png\" alt=\"image-20210220083636474\" /></p>\n<h3 id=\"结果数据\"><a class=\"anchor\" href=\"#结果数据\">#</a> 结果数据</h3>\n<p>最后的效果如图～</p>\n<p>将拿到的 用户名称和头像 存取到文本中，</p>\n<p>为啥存起来呢～当然是当个小数据，为了后面找出群里的假粉做准备～😝</p>\n<p>后面有空也可以做下词云看看 😁（给你们一些小惊喜～😋）</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210220081446738.png\" alt=\"image-20210220081446738\" /></p>\n<h3 id=\"爬取思路\"><a class=\"anchor\" href=\"#爬取思路\">#</a> 爬取思路</h3>\n<p>当然得先在后台分析研究下用户列表，将想要的页面数据和获取下一页发出的 API 进行分析 ，有兴致的小伙伴们可以先自己研究下哦～</p>\n<p>这里就简单说下用到的包 （注意这里使用到  <code>HTTP2.0</code>  了哦～）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> hyper<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> HTTP20Adapter</pre></td></tr></table></figure><p>还有回来的数据中文乱码的话  记得设置   <code>res.encoding = 'UTF-8'</code></p>\n<p>window 下写文件时可能也要设置 utf8 哦   <code>fo = open(&quot;fans.txt&quot;, &quot;a+&quot;, encoding='utf-8')</code></p>\n<h2 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>我也收拾收拾准备回广州啦～seeyou😝</p>\n<p><img data-src=\"http://img.ryzeyang.top/k1X8r\" alt=\"img\" /></p>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/1fd5d3fc.html",
            "url": "https://www.java4ye.cn/posts/1fd5d3fc.html",
            "title": "三分钟快速上手Spring事件机制",
            "date_published": "2022-01-20T14:57:28.906Z",
            "content_html": "<p>小伙伴们好呀～今天来和大家分享下这个 <strong>Spring 事件机制</strong></p>\n<h3 id=\"内容概览\"><a class=\"anchor\" href=\"#内容概览\">#</a> 内容概览</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210829132019387.png\" alt=\"image-20210829132019387\" /></p>\n<h3 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210828184103069.png\" alt=\"image-20210828184103069\" /></p>\n<p>这个熟悉 <strong>观察者模式</strong> 的小伙伴应该一眼就看出来啦～</p>\n<p>其实就是个简单版的 <strong>发布 - 订阅模式</strong></p>\n<p><strong>有三个核心类👇</strong></p>\n<ol>\n<li><strong>事件</strong>  <code>ApplicationEvent</code></li>\n<li><strong>事件发布器</strong>  <code>ApplicationEventPublisher</code></li>\n<li><strong>事件监听器</strong>  <code>ApplicationListener</code></li>\n</ol>\n<p><strong>用途👇</strong></p>\n<blockquote>\n<p>事件发布器发布事件，监听器监听到对应的事件后做出相应的反应～</p>\n</blockquote>\n<h3 id=\"为什么使用\"><a class=\"anchor\" href=\"#为什么使用\">#</a> 为什么使用</h3>\n<p>因为需求也不确定 🙄</p>\n<p><strong>场景</strong></p>\n<p>领导：想在用户操作完后发个邮件通知下 A</p>\n<p>我：好的</p>\n<p>几天后……</p>\n<p>领导：算了，先站内提醒就好了，后面再考虑发短信通知啥的，看看哪个效果好点</p>\n<p>我：…… 好的</p>\n<p>一开始我也没用这个事件机制的，没多想就写一起了</p>\n<p>后面觉得有点不对劲，才想起来用这招的😄</p>\n<p><strong>优点👇</strong></p>\n<ol>\n<li><strong>解耦</strong> 可以将业务代码和发邮件，站内提醒，短信等进行分离</li>\n<li><strong>异步通知</strong> 不用等待这些事件的完成</li>\n<li><strong>提高扩展性</strong> 后面再扩展其他操作也方便多啦</li>\n</ol>\n<p><strong>提醒</strong></p>\n<p>体量小的系统还可以用，大点的还是直接用消息中间件去解决靠谱</p>\n<h3 id=\"项目实战\"><a class=\"anchor\" href=\"#项目实战\">#</a> 项目实战</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210829102043376.png\" alt=\"image-20210829102043376\" /></p>\n<h4 id=\"功能\"><a class=\"anchor\" href=\"#功能\">#</a> 功能</h4>\n<blockquote>\n<p>根据小伙伴反馈事件去发送短信和邮件</p>\n</blockquote>\n<h4 id=\"主要源码\"><a class=\"anchor\" href=\"#主要源码\">#</a> 主要源码</h4>\n<p>一。小伙伴反馈事件  <code>ReaderFeedbackEvent</code></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210829094311899.png\" alt=\"image-20210829094311899\" /></p>\n<p><strong>特点和作用👇</strong></p>\n<blockquote>\n<p>继承  <code>ApplicationEvent</code>  ，保存反馈信息的 DTO</p>\n</blockquote>\n<p>二。事件发布器  <code>ReaderFeedbackEventPublisher</code></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210829102353506.png\" alt=\"image-20210829102353506\" /></p>\n<p><strong>特点和作用👇</strong></p>\n<blockquote>\n<p>实现  <code>ApplicationEventPublisherAware</code>  这个接口，获取  <code>ApplicationEventPublisher</code>  事件发布器去发布事件</p>\n</blockquote>\n<p>三。监听  <code>ReaderFeedbackEvent</code>  事件并发送邮件</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210829102540185.png\" alt=\"image-20210829102540185\" /></p>\n<p><strong>特点和作用👇</strong></p>\n<blockquote>\n<p>实现  <code>ApplicationListener</code>  这个接口，获取事件中的反馈信息，并发送邮件</p>\n</blockquote>\n<p>四。当反馈信息有点赞时才发送短信通知😄</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210829102736577.png\" alt=\"image-20210829102736577\" /></p>\n<p><strong>特点和作用👇</strong></p>\n<blockquote>\n<p>监听器的第二种写法 —— <strong>注解</strong> ，比较方便，这里监听并判断是不是点赞，再去发送短信😝</p>\n</blockquote>\n<h4 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h4>\n<p>这里直接在  <code>IDEA</code>  中进行测试，</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210829111125716.png\" alt=\"image-20210829111125716\" /></p>\n<p><strong>效果如下👇</strong></p>\n<p><code>like = false</code></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210829111409325.png\" alt=\"image-20210829111409325\" /></p>\n<p><code>like = true</code></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210829124910499.png\" alt=\"image-20210829124910499\" /></p>\n<p><strong>收到的短信</strong></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2ltZy5yeXpleWFuZy50b3AvaW1hZ2UtMjAyMTA4MjkxMjQ4MTcyODAucG5n\">http://img.ryzeyang.top/image-20210829124817280.png</span>&quot; alt=&quot;image-20210829124817280&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<h4 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h4>\n<p>可以看到功能模块很简单，监听反馈事件，然后去发送短信和邮件～</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210829130532523.png\" alt=\"image-20210829130532523\" /></p>\n<blockquote>\n<p>这部分代码上传到我的  <code>GitHub</code>  仓库啦 （<strong>地址在文末</strong>），有兴趣的小伙伴可以去看看， 喜欢的话顺手给个  <code>star</code>  呀，感谢！😝</p>\n</blockquote>\n<h3 id=\"spring源码解读\"><a class=\"anchor\" href=\"#spring源码解读\">#</a> Spring 源码解读</h3>\n<h4 id=\"异步同步\"><a class=\"anchor\" href=\"#异步同步\">#</a> 异步 / 同步</h4>\n<p>这里我们打个断点，就可以轻易的来到这里啦 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210829104327436.png\" alt=\"image-20210829104327436\" /></p>\n<p>这个方法在<strong>事件多播器</strong>  <code>SimpleApplicationEventMulticaster</code>  中，可以看到当有配置这个<strong>线程池</strong>时，是走<strong>异步</strong>通知路线的</p>\n<h4 id=\"那怎么调用监听器的呢\"><a class=\"anchor\" href=\"#那怎么调用监听器的呢\">#</a> 那怎么调用监听器的呢？</h4>\n<p>可以看到就这简单<strong> 3 步</strong> ，最后就是回到我们的  <code>onApplicationEvent</code>  方法中去处理的</p>\n<p><code>invokeListener</code>  ——&gt;  <code>doInvokeListener</code>  ——&gt;  <code>onApplicationEvent</code></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210829104759111.png\" alt=\"image-20210829104759111\" /></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>活学活用，快去试试叭！😆</p>\n<p><strong>项目地址👉</strong>： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0phdmE0eWUvc3ByaW5nYm9vdC1kZW1vLTR5ZQ==\">https://github.com/Java4ye/springboot-demo-4ye</span></p>\n<p>喜欢的话，麻烦点个小星星呀⭐⭐😝</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210829144304728.png\" alt=\"image-20210829144304728\" /></p>\n<p><strong>本期思维导图如下👇</strong></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210829132531501.png\" alt=\"image-20210829132531501\" /></p>\n<p>ps：最近忙起来啦，更文速度会慢一些哦～🐷</p>\n<p><strong>我是 4ye 咱们下期应该…… 很快再见！！</strong> 😆</p>\n<p>喜欢的话可以关注下公众号 <strong>Java4ye</strong> 支持下 <strong>4ye</strong> 呀😝</p>\n",
            "tags": [
                "Spring家族"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/8c42029a.html",
            "url": "https://www.java4ye.cn/posts/8c42029a.html",
            "title": "Spring AOP内功修炼",
            "date_published": "2022-01-20T14:57:28.902Z",
            "content_html": "<p>哈哈 终于更到这里了 🐷</p>\n<p>今天来和小伙伴们分享这个 <strong>Spring AOP</strong>  的知识点 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210913072321674.png\" alt=\"image-20210913072321674\" /></p>\n<p>这里先推荐大家去阅读 <strong>Spring</strong> 的官方文档，<strong>core</strong> 文档的 5，6 章节， 和 <strong>AOP</strong> 相关的概念都可以这这里找到～，还有我们要了解的 <strong>Spring AOP APIs</strong> 😄</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210910074335232.png\" alt=\"image-20210910074335232\" /></p>\n<p>先来介绍下这个 <strong>AOP</strong> 😄</p>\n<h3 id=\"aop-概念\"><a class=\"anchor\" href=\"#aop-概念\">#</a> AOP 概念</h3>\n<p>这是个老生常谈的问题呀 哈哈 熟悉的小伙伴们可以略过😄</p>\n<blockquote>\n<p>面向切面编程 <strong>Aspect-Oriented Programming</strong> ，是对 <strong>OOP</strong> 的一种补充</p>\n<p>使用场景有 ： <strong>日志</strong> ，<strong>事务</strong> ， <strong>权限认证</strong> ， <strong>缓存</strong> 等</p>\n</blockquote>\n<p>而 <strong>Spring AOP</strong> 呢，会通过这个 <strong>代理类</strong> 来实现对方法的<strong>增强</strong> 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210910073611972.png\" alt=\"image-20210910073611972\" /></p>\n<p>这里有很重要的几个概念 👇(看图就好啦)</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210910074649844.png\" alt=\"image-20210910074649844\" /></p>\n<h3 id=\"概念关系图\"><a class=\"anchor\" href=\"#概念关系图\">#</a> 概念关系图</h3>\n<p>通过 <strong>PointCut</strong> 去匹配符合的 <strong>JoinPoint</strong> ，再对其做 <strong>Weaving</strong>・操作，将  <strong>Advice</strong> 织入其中。</p>\n<p>而 <strong>PointCut</strong> 和 <strong>Advice</strong> 存放在 <strong>Aspect</strong>  中。</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210910081828619.png\" alt=\"image-20210910081828619\" /></p>\n<h3 id=\"切点表达式图\"><a class=\"anchor\" href=\"#切点表达式图\">#</a> 切点表达式图</h3>\n<p>如：<strong>execution</strong> ，<strong>within</strong> ， <strong>this</strong> ，<strong>target</strong> ，<strong>args</strong> ，<strong>bean</strong></p>\n<p>以及<strong>匹配注解</strong>用的 <strong>@target</strong> ，<strong>@args</strong> ，<strong>@within</strong> ， <strong>@annotation</strong></p>\n<h4 id=\"execution\"><a class=\"anchor\" href=\"#execution\">#</a> execution</h4>\n<blockquote>\n<p>作用： 匹配 某些连接点</p>\n</blockquote>\n<p>如：</p>\n<ul>\n<li>execution (public * *(..))   作用： 匹配所有公共方法</li>\n<li>execution (* set*(..)) 作用：匹配所有 set 开头的方法</li>\n<li>execution (* com.xyz.service.AccountService.*(..)) 作用：匹配 AccountService 中的所有方法</li>\n<li>execution(* com.xyz.service.<em>.</em>(..)) 作用：匹配 service 包中的所有方法</li>\n<li>execution(* com.xyz.service..<em>.</em>(..)) 作用：匹配 service 包和它的子包中 所有的方法</li>\n</ul>\n<h4 id=\"within\"><a class=\"anchor\" href=\"#within\">#</a> within</h4>\n<blockquote>\n<p>作用：匹配 类 中的所有 连接点</p>\n</blockquote>\n<p>如：</p>\n<ul>\n<li>within (com.xyz.service.*) 作用：匹配 service 包中的所有方法</li>\n<li>within (com.xyz.service..*) 作用：匹配 service 包和它的子包中 所有的方法</li>\n</ul>\n<h4 id=\"this\"><a class=\"anchor\" href=\"#this\">#</a> this</h4>\n<blockquote>\n<p>作用：匹配 代理类</p>\n</blockquote>\n<ul>\n<li>this (com.xyz.service.AccountService) 作用：匹配 实现了 AccountService 接口的 代理类，即 父类是 AccountService</li>\n</ul>\n<h4 id=\"target\"><a class=\"anchor\" href=\"#target\">#</a> target</h4>\n<blockquote>\n<p>作用：匹配 被代理类</p>\n</blockquote>\n<ul>\n<li>target (com.xyz.service.AccountService) 作用：匹配 实现了 AccountService 接口的 被代理类，即 父类是 AccountService</li>\n</ul>\n<h4 id=\"args\"><a class=\"anchor\" href=\"#args\">#</a> args</h4>\n<blockquote>\n<p>作用：匹配 方法参数</p>\n</blockquote>\n<ul>\n<li>args (java.io.Serializable)  作用：匹配 单个方法参数，且是 Serializable 类型的</li>\n</ul>\n<h4 id=\"bean\"><a class=\"anchor\" href=\"#bean\">#</a> bean</h4>\n<blockquote>\n<p>作用：匹配 bean 名称，Spring 扩展 AspectJ 的 PDC 规范， 只能在 Spring AOP 中生效</p>\n</blockquote>\n<h4 id=\"target-2\"><a class=\"anchor\" href=\"#target-2\">#</a> @target</h4>\n<blockquote>\n<p>作用：匹配 有注解的 被代理类</p>\n</blockquote>\n<ul>\n<li>@target (org.springframework.transaction.annotation.Transactional)  作用：匹配 @Transactional 注解的 被代理类</li>\n</ul>\n<h4 id=\"args-2\"><a class=\"anchor\" href=\"#args-2\">#</a> @args</h4>\n<blockquote>\n<p>作用：匹配 传入的参数 有某个注解</p>\n</blockquote>\n<ul>\n<li>@args (com.xyz.security.Classified) 作用： 匹配有 @Classified 注解的参数</li>\n</ul>\n<h4 id=\"within-2\"><a class=\"anchor\" href=\"#within-2\">#</a> @within</h4>\n<blockquote>\n<p>作用：匹配 有某个注解 的 类</p>\n</blockquote>\n<ul>\n<li>@within (org.springframework.transaction.annotation.Transactional) 作用： 匹配 有 @Transactional 注解 的 类中的所有 连接点</li>\n</ul>\n<h4 id=\"annotation\"><a class=\"anchor\" href=\"#annotation\">#</a> @annotation</h4>\n<blockquote>\n<p>作用：匹配 该注解</p>\n</blockquote>\n<ul>\n<li>@annotation (org.springframework.transaction.annotation.Transactional) 作用： 匹配 @Transactional 注解</li>\n</ul>\n<p>小结图如下 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210910082639157.png\" alt=\"image-20210910082639157\" /></p>\n<h3 id=\"advice-注解图\"><a class=\"anchor\" href=\"#advice-注解图\">#</a> Advice 注解图</h3>\n<p>这里是常用的五个注解</p>\n<p>注意：<strong>@After</strong> 等于 <strong>finally</strong> 语句块，必定会执行，还有 <strong>@Around</strong> 注解时，方法的第一个参数必须是 <strong>ProceedingJoinPoint</strong> ，它是 <strong>JoinPoint</strong> 的子接口</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210913074020835.png\" alt=\"image-20210913074020835\" /></p>\n<hr />\n<blockquote>\n<p>下面的内容是本文的重点～😝</p>\n</blockquote>\n<h3 id=\"编程式-aop\"><a class=\"anchor\" href=\"#编程式-aop\">#</a> 编程式 AOP</h3>\n<p>这个呢，是我们写 <strong>AOP 插件</strong> 的基础</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210912074920354.png\" alt=\"image-20210912074920354\" /></p>\n<p>这里要理解这几个概念 👇</p>\n<ul>\n<li><strong>Pointcut</strong> :  <strong>对应 @Pointcut</strong></li>\n<li><strong>Advice</strong> ：<strong>对应 @Before，@After，@Around 等等</strong></li>\n<li><strong>Advisor</strong> ：<strong>@Aspect 注解解析后的类，等于 Pointcut + Advice</strong> 🐷</li>\n<li><strong>Advised</strong> :   <strong>Spring AOP 代理类都可以转换成该接口！</strong> 🐷</li>\n</ul>\n<p>例子我放到 <strong>Github</strong> 上啦 ，地址放文末啦👇</p>\n<h3 id=\"pointcut\"><a class=\"anchor\" href=\"#pointcut\">#</a> Pointcut</h3>\n<p>里面有两个返回类型式  <strong>ClassFilter</strong> 和  <strong>MethodMatcher</strong>  的方法，他们的作用如下 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210912100228554.png\" alt=\"image-20210912100228554\" /></p>\n<p>4ye 也是大概了解下 哈哈 主要还是用 Spring 提供的实现类，如下面例子中用到的 <strong>NameMatchMethodPointcut</strong> ，看名字就能猜个大概，就是匹配这个方法名的 😄</p>\n<h4 id=\"小例子\"><a class=\"anchor\" href=\"#小例子\">#</a> 小例子</h4>\n<p>代码例子比较多，这里就举这个 <strong>Pointcut</strong>  看看就好啦～（其他案例代码小伙伴们可以自行在我的 Github 仓库上获取😄）</p>\n<blockquote>\n<p>通过对 ProxyFactroy 添加 <strong>切面</strong> 来对目标 sayService 做增强，这里的 Pointcut 只针对 setName 方法</p>\n</blockquote>\n<p><img data-src=\"http://img.ryzeyang.top/AOP_Pointcut.png\" alt=\"AOP_Pointcut\" /></p>\n<h4 id=\"效果\"><a class=\"anchor\" href=\"#效果\">#</a> 效果</h4>\n<p>可以看到只增强了 setName 方法</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210912094544020.png\" alt=\"image-20210912094544020\" /></p>\n<h3 id=\"advice\"><a class=\"anchor\" href=\"#advice\">#</a> Advice</h3>\n<p>可以看到这里 Spring 提供了这 五种类型。除了最后一种 Introduction 类型上面没提到外，是不是还发现少了一种类型😝</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210912161447604.png\" alt=\"image-20210912161447604\" /></p>\n<p>没错，就是这个 <strong>@After</strong> 注解对应的<strong>最终通知</strong> 😱</p>\n<p>这去哪了呀 (￣﹏￣；)</p>\n<p>在源码中寻找一番后，发现了这个 <strong>AspectJAfterAdvice</strong> 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210912104757851.png\" alt=\"image-20210912104757851\" /></p>\n<blockquote>\n<p>可以看到这里不仅实现了 <strong>AfterAdvice</strong>  接口，还要实现这个 <strong>MethodInterceptor</strong> 接口 ，最后真的是在 <strong>finally</strong> 语句块中实现了这个<strong>增强操作</strong>，来达到 <strong>最终通知</strong> 的效果！</p>\n</blockquote>\n<p>所以我们需要 <strong>最终通知</strong> 效果的话，可以直接模仿它去实现就好了～</p>\n<p>而 Introduction Advice 这个还挺特别的🐖</p>\n<blockquote>\n<p>作用：为代理类实现新的接口</p>\n<p>等于 <strong>@DeclareParents</strong> 注解</p>\n</blockquote>\n<h3 id=\"advisor\"><a class=\"anchor\" href=\"#advisor\">#</a> Advisor</h3>\n<p>作用 👇</p>\n<blockquote>\n<p>@Aspect 注解解析后的类，等于 Pointcut + Advice</p>\n</blockquote>\n<h3 id=\"advised\"><a class=\"anchor\" href=\"#advised\">#</a> Advised</h3>\n<p>作用 👇</p>\n<blockquote>\n<p>AOP 代理类都可以转换成该接口</p>\n</blockquote>\n<h4 id=\"为啥这些代理对象都能转换成这个-advised-接口\"><a class=\"anchor\" href=\"#为啥这些代理对象都能转换成这个-advised-接口\">#</a> 为啥这些代理对象都能转换成这个 <strong>Advised</strong> 接口？</h4>\n<p>答案当然不言而喻 哈哈，咱们来源码中看看 Spring 是怎么写的😝</p>\n<h4 id=\"jdk\"><a class=\"anchor\" href=\"#jdk\">#</a> JDK</h4>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210911231149301.png\" alt=\"image-20210911231149301\" /></p>\n<h4 id=\"cglib\"><a class=\"anchor\" href=\"#cglib\">#</a> Cglib</h4>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210911233943416.png\" alt=\"image-20210911233943416\" /></p>\n<h4 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h4>\n<blockquote>\n<p>可以发现，不管是 JDK 还是 Cglib , 都会去调用同一个方法，为代理类多实现几个接口，其中一个就是 <strong>Advised</strong> 😋</p>\n</blockquote>\n<h3 id=\"关系图\"><a class=\"anchor\" href=\"#关系图\">#</a> 关系图</h3>\n<p><img data-src=\"http://img.ryzeyang.top/SpringAOP.png\" alt=\"SpringAOP\" /></p>\n<h3 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>本文就分享到这里啦🐖</p>\n<p>重点内容在 <strong>编程式 AOP</strong>  这一块～内功 + 1 😋</p>\n<p>代码可以在这里获取 👇  可以自己多跑跑代码，会有更多问题等着你发现的！</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0phdmE0eWUvc3ByaW5nYm9vdC1kZW1vLTR5ZS90cmVlL21haW4vc3ByaW5nYm9vdC1hb3A=\">https://github.com/Java4ye/springboot-demo-4ye/tree/main/springboot-aop</span></p>\n<p>思维导图 👇</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3Byb2Nlc3Nvbi5jb20vY2hhcnRfaW1hZ2UvNjEzNGQ2Y2I3ZDljMDgxYzc1M2I1ZDU0LnBuZw==\">http://processon.com/chart_image/6134d6cb7d9c081c753b5d54.png</span></p>\n<p>ps：这次分享的时候居然出现了 <strong>Gateway Timeout</strong> 异常 ，如果等不及官方修复的话，可以在网盘获取</p>\n<p><strong>链接</strong>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMUtWV3cwRGFZQ0tySVNJS0pncXF5dUE=\">https://pan.baidu.com/s/1KVWw0DaYCKrISIKJgqqyuA</span></p>\n<p><strong>提取码</strong> 需在公众号后台回复  <code>bdwp</code></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210913074314344.png\" alt=\"image-20210913074314344\" /></p>\n<p>插件的部分代码我也上传啦，就差这画画图写写文啦 哈哈 (这两天应该就安排上了)😆</p>\n<blockquote>\n<p>喜欢的话可以 <strong>关注</strong> 并 <strong>星标</strong> 下公众号 <strong>Java4ye</strong> 支持下 <strong>4ye</strong> 呀😝，这样就可以第一时间收到更文消息啦🐷</p>\n</blockquote>\n<p><strong>我是 4ye 咱们下期应该…… 很快再见！！</strong> 😆</p>\n",
            "tags": [
                "Spring家族"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/1dfabbf7.html",
            "url": "https://www.java4ye.cn/posts/1dfabbf7.html",
            "title": "AOP+MybatisPlus优化特殊的日志模块",
            "date_published": "2022-01-20T14:57:28.898Z",
            "content_html": "<p>小伙伴们好久不见呀 哈哈 都快成月更号主了，，ԾㅂԾ,,  最近状态在调整啦，冲冲冲！😝</p>\n<p>今天 4ye  来和小伙伴们分享下我在项目中利用  AOP + MybatisPlus   对项目进行重构，优化系统中特殊的日志模块的故事啦 😄 （PS：ES 写了一半～只能先来这个了）</p>\n<p>其实这篇文章我是从吐槽部分开始写的 哈哈哈（不知不觉就吐槽了近千字 🤣）不过咋们还是从技术部分开始吧～</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211112221346062.png\" alt=\"image-20211112221346062\" /></p>\n<h3 id=\"功能描述\"><a class=\"anchor\" href=\"#功能描述\">#</a> 功能描述</h3>\n<p>很久之前（大概有一年了叭，痛苦面具 🙃），老大让我把老项目中的日志模块移植到新项目中，这个日志模块的主要功能就是针对大部分表，做下面的操作</p>\n<blockquote>\n<p>删除成功时，将被删除的数据记录到相应的 log 表</p>\n<p>当修改或者插入数据成功时，将这些数据记录到相应的 log 表</p>\n</blockquote>\n<p><strong>Log 表</strong> 就是在 <strong>普通表</strong> 的基础上，新增几个字段，如操作 ID 和操作方法。</p>\n<p>操作 ID：类似请求 ID 。</p>\n<p>操作方法： 表示这个行为是 CRUD 中 CUD 的哪一个。</p>\n<p>比如在请求 001 中删除表 A 中的某条数据，则在 LOG_A 中会记录下这个 A 数据</p>\n<table>\n<thead>\n<tr>\n<th>A 表对应的各个字段和它们的值</th>\n<th>操作 ID</th>\n<th>操作方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>……</td>\n<td>001</td>\n<td>D</td>\n</tr>\n</tbody>\n</table>\n<p>看到这里，你是否也觉得这 log 表很奇怪？</p>\n<p>别急，最后再吐槽下 哈哈，先来说说这个技术 🐷</p>\n<h3 id=\"简单思考\"><a class=\"anchor\" href=\"#简单思考\">#</a> 简单思考</h3>\n<p>我们可以发现这些这些东西和业务无关，可以直接用 AOP 来实现，老项目中也是用了 AOP。（听君一席话，听君一席话 哈哈哈 🤣）</p>\n<p>先简单思考下会遇到什么问题 👇</p>\n<p>比如：</p>\n<ol>\n<li>新增数据到相应的 log 表，意味着有很多简单的插入语句要写？还要考虑批量操作 🐖</li>\n<li>操作 id 是怎么生成的？是直接用 uuid ，还是数据库自增 id？</li>\n<li>怎么获取删除前的数据信息 、更新后的数据、插入后的数据 等</li>\n</ol>\n<p>这里就不卖关子啦 直接来看这个<strong>日志模块的设计</strong>。</p>\n<h3 id=\"操作id\"><a class=\"anchor\" href=\"#操作id\">#</a> 操作 ID</h3>\n<p>先来看这个 <strong>操作 ID</strong> 的生成，这里就没啥特别的  直接定义一个 <strong>注解</strong>  如 @GenerateRequestID ，加在需要被拦截的方法上，然后我们在 AOP 中拦截它即可。功能如下 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211111143511498.png\" alt=\"image-20211111143511498\" /></p>\n<blockquote>\n<p>可以看到这个 操作 ID 是直接使用 Oracle 的 Sequence 去生成的，是有序的 ，能直接看出这批数据操作的先后顺序。</p>\n</blockquote>\n<p>在增强这部分功能时，我发现之前 <strong>旧版本</strong>居然没用 AOP 去设置这个 操作 ID，而是手动在需要的地方加，而且还定义了很多的 Key 来存储生成的这个 操作 ID，可以发现对这个 ThreadLocal 也很不熟悉呀！ 🙃</p>\n<p>伪代码如下 😱 （坏代码 …… ）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">BigDecimal</span> transactionId <span class=\"token operator\">=</span> sysLogMapper<span class=\"token punctuation\">.</span><span class=\"token function\">generateTransactionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ThreadLocalUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SysLogConstants</span><span class=\"token punctuation\">.</span>xxx_LOG_TRANSACTION_ID<span class=\"token punctuation\">,</span> transactionId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">ThreadLocalUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SysLogConstants</span><span class=\"token punctuation\">.</span>aaa_LOG_TRANSACTION_ID<span class=\"token punctuation\">,</span> transactionId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 业务方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">ThreadLocalUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SysLogConstants</span><span class=\"token punctuation\">.</span>xxx_LOG_TRANSACTION_ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">ThreadLocalUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SysLogConstants</span><span class=\"token punctuation\">.</span>aaa_LOG_TRANSACTION_ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>心细的小伙伴会不会有个小疑问，为什么我是在 <strong>请求结束</strong> 时才去清除这个 操作 ID，而不是在 AOP 的 After 操作中去做的😄</p>\n<p>其实这里是有个小插曲的，一开始我是在 AOP 的 @After 操作中去删除这个 操作 ID 的，但是呢 🙄 ，有同事将我改好的日志模块中的部分功能添加到之前的老项目中，而且他直接将这个注解加在 service 上，结果系统出现了 bug 🙄，还把我拉过去讨论 😒 ，这就很无语了……</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211112221629564.png\" alt=\"image-20211112221629564\" /></p>\n<p>不过这个 bug 是不难发现的，毕竟这个注解如果加在 service 层面，会存在 service 调用 service 的情况，这样不仅会出现第一个 service 中生成的 <strong>操作 ID</strong> 被第二个 service 覆盖，而且在第二个 service 结束后，<strong>操作 ID</strong> 会被清除掉，但是这个字段是不允许为 null 的，所以就报错了。</p>\n<p>按理说，直接加在这个 controller 层面就没问题了，但是讨论过后，在同事的建议下，我也同意对它进行小小的升级下，将这个 <strong>清除操作 ID</strong> 的行为移动到这个 <strong>拦截器</strong> 中  👇</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocalInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerInterceptor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ThreadLocalUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>感觉这种方式也挺简洁的，在请求结束后直接清掉这个 <strong>ThreadLocal</strong> 中的内容。🐖</p>\n<h3 id=\"整体设计\"><a class=\"anchor\" href=\"#整体设计\">#</a> 整体设计</h3>\n<p>接着，我们来看看这个 datalog 的生成。 新版的整体思路如下。😋 （画出来清晰多了）</p>\n<p><img data-src=\"http://img.ryzeyang.top/2021-11-12_140557.png\" alt=\"2021-11-12_140557\" /></p>\n<h3 id=\"删除操作\"><a class=\"anchor\" href=\"#删除操作\">#</a> 删除操作</h3>\n<p>思路如上图～</p>\n<p>在删除成功时，要将被删除的数据写到 Log 表 …… 😑</p>\n<p>这里有两种情况：<br />\n（一）根据主键删除 ，这种最简单，我们直接根据主键查出之前的数据即可。<br />\n（二）根据其他条件删除，这里我们自定义获取主键的方法以便复用上面的方法。</p>\n<p>这里就不得不提下这个 MybatisPlus 的好处了～，借用 BaseMapper 的 selectBatchIds 方法，我们可以很轻松的</p>\n<p>查询出这些数据出来。</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211112142253855.png\" alt=\"image-20211112142253855\" /></p>\n<p>因为在使用 MybatisPlus 时，我们会生成相应的 Mapper 方法，而这里就很好地体现了  <strong>Java 多态</strong> 的特点，我们只需要调用  (BaseMapper) SpringUtil.getBean (XXXMapper.class).selectBatchIds (result) ；即可实现。😄</p>\n<p>所以将这个参数挂在 @MethodLog 注解上即可。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">XXXMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>XXX<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>而在旧版本中，由于没有用到 MybatisPlus ，自然写了很多的 删除语句 😱</p>\n<p>而且由于对这个 Spring 的理解不够，出现了把 实现了同一个接口的不同子类注入到一个 Map 中，使用时再从其中获取的行为，最要命的是，这个 map 的 key 不是那些子类的名称，还写了很多 switch case …… 😶 来获取</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211112221843944.png\" alt=\"image-20211112221843944\" /></p>\n<p>其实我们直接用 ApplicationContext 的 getBean 就可以获取到了 🐖</p>\n<h3 id=\"更新插入操作\"><a class=\"anchor\" href=\"#更新插入操作\">#</a> 更新，插入操作</h3>\n<p>在更新或者插入成功后，还要将这些数据写到 Log 表 …… 😑</p>\n<p>真是太魔幻了……   再坚持下就快到吐槽环节了😂</p>\n<p>这里我们要考虑一个问题了 —— 插入数据时，ID 是插入数据前就有的，还是插入数据后才有的？🐷</p>\n<p>在项目中我们使用的是这个 Oracle，借助它的 Sequence，我们可以先获取这个 ID  (select XX_SEQ.nextval from dual)，再设置到这个对象中去，然后再插入 DB 中 。</p>\n<p>而在使用 MySQL 时，我们一般都是通过数据库的自增 ID，当数据插入后，再从这个对象中获取到这个 ID 的。</p>\n<p>这也决定了我是在 AOP 的 Before 中记录下这些 ID ，还是在 AfterReturning 中去获取的。</p>\n<p>其实一开始我是直接在 Before 中去记录的，后来考虑到这种情况后，才把它移到 AfterReturning 中去的，毕竟不管你先生成还是后生成，我都可以后获取，而且第二种模式兼容第一种模式 🐷</p>\n<p>更新的话也有两种情况：<br />\n（一）根据主键更新 ，这种最简单，我们直接根据主键查出之前的数据即可。<br />\n（二）根据其他条件更新，这里我们自定义获取主键的方法以便复用上面的方法。</p>\n<p>一般情况下，我们可以自动去获取这个 id，有些情况比较复杂的，就提供这个手动模式，自己调用 ThreadLocal 并耦合到代码中。</p>\n<p>最后使用 Spring 的工具 BeanUtils ，将数据拷贝到日志对象中 BeanUtils.copyProperties (model, logModel); ，再通过 BaseMapper 的 insert 方法，将数据一条条插入到 Log 表。</p>\n<p>到此，就完成了这个特殊的日志模块的优化了。</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211112222053399.png\" alt=\"image-20211112222053399\" /></p>\n<p>这个模块也为团队节省了 N 倍的开发时间，减少了很多冗余，无效的代码，也提高了这个代码的可维护性，受到同事的肯定当时 哈哈 😝 而且好像从这时候开始，老大找我做了一些通用模块的开发，比如 模板，邮件，Excel 等，有机会再来和小伙伴们分享下～😄。</p>\n<hr />\n<h3 id=\"吐槽\"><a class=\"anchor\" href=\"#吐槽\">#</a> 吐槽</h3>\n<p>终于来到这里了，说实话，我到现在都觉得这个日志模块很 “<strong>特别</strong>” 🐷，因为这个日志模块不像我平时了解过的那些，比如：</p>\n<ul>\n<li>请求的入参，出参</li>\n<li>业务</li>\n<li>异常</li>\n<li>JVM，Nginx，Tomcat  等等</li>\n</ul>\n<p>而且奇怪的点还不是写入 DB 这个操作，而是针对大量的表做这备份的这个行为，比如 有这个表 A，然后我还要创建相应的日志表 LOG_A，而且只要你修改或者新增数据到表 A，那么 LOG_A 会将你更改后的 A 数据记录下来，删除的话，会将你删除前的 A 数据记录下来，删除成功后才记录到这个 LOG_A 。</p>\n<p>而且这个 LOG_A 就比表 A 多了几个字段，比如这个<strong>操作行为</strong>（ CRUD 中 的 CUD）和 <strong>操作 ID</strong> （即请求 ID）。</p>\n<p>这…… 简直就是<strong>究极备份</strong>了🐖 （我实在想不出哪个词来形容了 哈哈 我只能说太慎重了！和 <strong>慎重勇者</strong> 的主角有得一比）</p>\n<p>这是我新的感悟 哈哈。</p>\n<p>还记得那时的我十分抗拒把这个东西搬到新项目中，因为我觉得它很多余，这不就是把数据又写了一遍到另一个表中，而且我觉得用网上的例子就可以了啦，就记录下数据从什么修改成什么就好了，要那么多干嘛🤨。</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211112222404482.png\" alt=\"image-20211112222404482\" /></p>\n<p>我当时也憋不住，就向老大表达了我的疑惑，老大和我解释说这个日志模块是为了方便找 bug，找出哪些数据是有问题的，写这篇文章的时候我还特意再去请教了一下，他说他们的老项目用到了，但是具体怎么用也没说 🐖</p>\n<p>为了搞清除这个东西的作用，额 我已经问了三个项目组的同事了，终于有个同事使用到了，就是说有一次数据出了问题，看代码看了好久都没有觉得哪里有问题，后来就是靠着这个请求 id，去 db 找那批数据出来分析，才找到问题的。</p>\n<p>不过我听完还是觉得一言难尽，什么 bug 连 debug 都不能找出来，得靠分析这批数据了🙃 虽然在新项目中还是有它的身影，但是我想了好久都没有见到它发挥作用，可能这东西还是没用才好吧，甚至觉得带来负作用…… 😮</p>\n<h3 id=\"坑\"><a class=\"anchor\" href=\"#坑\">#</a> 坑</h3>\n<p>印象中在重写这个模块时，遇到一个很有意思的问题  如下 👇</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">XXXMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>XXX<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@MethodLog</span><span class=\"token punctuation\">(</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">TableAction<span class=\"token punctuation\">.</span>D</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            model <span class=\"token operator\">=</span> XXX<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            logModel <span class=\"token operator\">=</span> <span class=\"token class-name\">LogXXX</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            logModelIdName <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxId\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            mapper <span class=\"token operator\">=</span> <span class=\"token class-name\">XXXMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            logMapper <span class=\"token operator\">=</span> <span class=\"token class-name\">LogXXXMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Serializable</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@MethodLog</span><span class=\"token punctuation\">(</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">TableAction<span class=\"token punctuation\">.</span>U</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            model <span class=\"token operator\">=</span> XXX<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            logModel <span class=\"token operator\">=</span> <span class=\"token class-name\">LogXXX</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            logModelIdName <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxId\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            mapper <span class=\"token operator\">=</span> <span class=\"token class-name\">XXXMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            logMapper <span class=\"token operator\">=</span> <span class=\"token class-name\">LogXXXMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>ENTITY<span class=\"token punctuation\">)</span> <span class=\"token class-name\">XXX</span> entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>毕竟我要将 MethodLog 注解挂到方法上，只能这样了。</p>\n<p>同时，我才发现 <strong>接口在继承别的接口时，也是可以添加 @Override 注解</strong>  ，不一定是常见的那种。</p>\n<p>还有就是一开始我用 IDEA 帮我重写这个 updateById 方法时，但是它帮我省掉了 @Param (Constants.ENTITY) 注解，导致这个 update 操作无法生效，因为 MybatisPlus 中用了这个 “et” 来统一这个对象的别名～，不加的话无法匹配到。</p>\n<h3 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>本文就分享到这里啦🐖 最近有好多人生小感悟 嘿嘿 下次再分享啦。之前定的那些文章还在计划里～在抓紧更啦！！😝</p>\n<p>回忆起做这个日志模块的过程，特别是画一遍这个流程图的感觉真的是太酸爽了 ，也给小伙伴们提供一个思路，简单的 CRUD 就不要自己写啦，能用 AOP+MybatisPlus 去操作的话会简洁很多！</p>\n<p>👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0phdmE0eWUvc3ByaW5nYm9vdC1kZW1vLTR5ZQ==\">https://github.com/Java4ye/springboot-demo-4ye</span></p>\n<blockquote>\n<p>喜欢的话可以 <strong>点赞 &amp;</strong> <strong>关注</strong> 并 <strong>星标</strong> 下公众号 <strong>Java4ye</strong> 支持下 <strong>4ye</strong> 呀😝，这样就可以第一时间收到更文消息啦🐷</p>\n</blockquote>\n<p><strong>我是 4ye 咱们下期应该…… 很快再见！！</strong> 😆</p>\n",
            "tags": [
                "Spring家族"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/79028b1f.html",
            "url": "https://www.java4ye.cn/posts/79028b1f.html",
            "title": "花了 2 个钟才搞懂这 AOP 为啥没生效，水友却睡着了……",
            "date_published": "2022-01-20T14:57:28.894Z",
            "content_html": "<h3 id=\"springboot-中-aop-失效的原因\"><a class=\"anchor\" href=\"#springboot-中-aop-失效的原因\">#</a>  <code>Springboot</code>  中  <code>AOP</code>  失效的原因</h3>\n<p>今天 4ye 来和小伙伴们分享一个小实战啦 ，冲冲冲～<strong>(。・∀・) ノ</strong></p>\n<p><img data-src=\"http://img.ryzeyang.top/MkMJ\" alt=\"img\" /></p>\n<h3 id=\"实战回顾\"><a class=\"anchor\" href=\"#实战回顾\">#</a> 实战回顾</h3>\n<p>（我居然拖到现在才写了这文章…… 😵）</p>\n<p>主要是在一个周日（2021.6.6）在技术群里看到一个老哥在问</p>\n<p><strong>“怎么用切面来捕获自定义异常？”</strong> (￣▽￣)&quot;</p>\n<p>我当时想的是，<strong>捕获异常</strong>不是很常见的吗，平时经常用到这个<strong>全局异常捕获</strong> ，于是就把自己  <code>GitHub</code>  上的小例子发给他（主要是这个  <code>ControllerAdvice</code>  注解），如图 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210612084149929.png\" alt=\"image-20210612084149929\" /></p>\n<p>结果老哥过了一段时候就加了我，还问我有没有空帮忙看下，还想打电话问我，我当时的内心是</p>\n<p>这么急的吗（瑟瑟发抖……）</p>\n<p><img data-src=\"http://img.ryzeyang.top/796Jj\" alt=\"img\" /></p>\n<p>不过刚好在外面没时间，就婉拒了，后来晚上回来，愣是花了两个钟，才看懂 <strong>为啥这个 <code>AOP</code>  没有生效？为啥没能捕获到异常？</strong></p>\n<p><img data-src=\"http://img.ryzeyang.top/b2dKx\" alt=\"img\" /></p>\n<p>下面进入主题👉（<strong>项目整体介绍</strong>）</p>\n<h3 id=\"maven项目结构图\"><a class=\"anchor\" href=\"#maven项目结构图\">#</a> maven 项目结构图</h3>\n<p>在该项目中，maven 项目采用<strong>多模块构建</strong>，<strong>父子结构</strong>，由 <strong>父 maven</strong> 来统一管理这些公共包，以及项目的整体版本属性配置等</p>\n<p>里面有两个模块， <code>starter</code>  模块和  <code>core</code>  模块，其中  <code>starter</code>  模块<strong>依赖</strong>  <code>core</code>  模块，整体如下图👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210612180832771.png\" alt=\"image-20210612180832771\" /></p>\n<h3 id=\"子模块介绍\"><a class=\"anchor\" href=\"#子模块介绍\">#</a> 子模块介绍</h3>\n<p>不知道小伙伴们看到上面的  <code>starter</code>  有没有嗅到什么 ？</p>\n<p>一开始我以为是常见的 <strong>自定义 starter</strong> ，但是里面的内容却和我想的有点出入，居然只有一个  <code>spring.factories</code>  文件，很明显这里使用到了 <strong>Springboot 的 SPI 机制</strong>。</p>\n<p>这个在我们之前的  👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvUUZHczU3cUpoc1JjcWwyWmRlZzJ0Zw==\">Springboot 自动装配原理探索</span>  一文中有介绍到，小伙伴们可以前去了解看看～😄</p>\n<p>对两个模块中的核心部分进行展开，结构如下👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210612182553858.png\" alt=\"image-20210612182553858\" /></p>\n<p><strong>core 项目描述</strong>：<strong>非 web 项目</strong>里面只有  <code>service</code>  ，没有启动类等</p>\n<p>👉 由于 core 模块 <strong>不是 web 项目</strong>！！，所以这个  <code>ControllerAdvice</code>  是肯定不能用的，毕竟它是在  <code>web</code>  包中的，一般我们在 <strong>web 项目</strong>中配合这个 <code>@ExceptionHandler(Exception.class)</code>  实现全局异常捕获，然后进行统一处理的。</p>\n<p>👉 从 <strong>Springboot 的 SPI 机制</strong> 中我们可以得知， <code>Springboot</code>  项目启动时，会去扫描各个项目中的   <code>META-INF/spring.factories</code>  文件（包括各个 jar 包），然后将其中的配置信息读取到内存中，而自动配置时会根据一定的条件对这些类进行筛选，最后创建符合的类，完成这个自动装配。</p>\n<p>很明显，这里就是通过<strong>自动配置</strong>，来实现相关  <code>bean</code>  的注入。</p>\n<h3 id=\"配置类说明\"><a class=\"anchor\" href=\"#配置类说明\">#</a> 配置类说明</h3>\n<p>那么，在了解了这些基本信息后，我们可以把目光移到这个  <code>xxxConfig</code>  上，这里模仿了一个👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210706062207407.png\" alt=\"image-20210706062207407\" /></p>\n<p>紧接着就是项目中的切面配置了，例如以前写的小例子：👇</p>\n<p>代码在我的  <code>GitHub</code>  ：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1J5emVZYW5nL3NwcmluZ2Jvb3QtZGVtby00eWUuZ2l0\">https://github.com/RyzeYang/springboot-demo-4ye.git</span></p>\n<p>通过<strong>异常通知</strong>来捕获</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210707075730630.png\" alt=\"image-20210707075730630\" /></p>\n<p>除了上面这两个之外，项目中没有用到其他配置了！</p>\n<h3 id=\"问题来了\"><a class=\"anchor\" href=\"#问题来了\">#</a> 问题来了</h3>\n<p>这个时候问题就来了，在定义了<strong>切面</strong>之后，发现根本没有在项目中起作用！而其他都可以正常运行！</p>\n<p><img data-src=\"http://img.ryzeyang.top/oq29\" alt=\"img\" /></p>\n<p>于是我一直在想，这是为啥呀，明明切面已经定义好了呀……</p>\n<p><img data-src=\"http://img.ryzeyang.top/21be62ef513e07e85137a976c2feb565a0da1e2e.jpg@768w_576h_progressive.webp\" alt=\"img\" /></p>\n<p>终于，我开始了尝试，在  <code>yaml</code>  配置文件中添加这个参数</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">aop</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">auto</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr></table></figure><p>因为在印象中，这个默认是  <code>true</code>  ，会默认使用这个  <code>@EnableAspectJAutoProxy</code>  ， 不用我们手动去添加这个  <code>@EnableAspectJAutoProxy</code>  注解（之前一直没有手动添加这个注解）🐖</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210706070907862.png\" alt=\"image-20210706070907862\" /></p>\n<p>结果也没什么效果……</p>\n<p>于是乎，我决定手动添加到刚刚那个  <code>xxxConfig</code>  配置类上，结果也没有什么作用……</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210706070415418.png\" alt=\"image-20210706070415418\" /></p>\n<p>终于，我才想起那个 <strong>切面配置</strong> 没有被加载到这个  <code>Spring</code>  中 ，于是我又在那个配置类  <code>xxxConfig</code>  上添加了这个包扫描注解  <code>@ComponentScan(basePackages = &quot;com.xxx.xxx&quot;)</code></p>\n<p>结果终于成功了！</p>\n<p>于是我赶在 <strong>23:59</strong> 将修改后的文件发给那位老哥后，却发现他居然睡着了 哈哈哈</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210706072851025.png\" alt=\"image-20210706072851025\" /></p>\n<p><img data-src=\"http://img.ryzeyang.top/QQOJW\" alt=\"img\" /></p>\n<h3 id=\"问题剖析\"><a class=\"anchor\" href=\"#问题剖析\">#</a> 问题剖析</h3>\n<p>解决问题后，我们可以发现这个问题就下面两点👇</p>\n<ol>\n<li>没有将切面注册到  <code>SpringIOC</code>  容器中</li>\n<li>没有使用这个  <code>@EnableAspectJAutoProxy</code></li>\n</ol>\n<p><strong>第一步</strong>的解决也很简单，就是没有配置这个包扫描  <code>@ComponentScan(basePackages = &quot;com.xxx.xxx&quot;)</code></p>\n<p><strong>第二步</strong>的解决嘛，就有点一头雾水了当时，毕竟之前也不需要我手动去添加的，而且从配置的描述信息中可以发现，即使我们没有配置，他也是默认开启的，会自动使用这个注解的～</p>\n<p>那么小伙伴们知道<strong>第二步问题</strong>的所在吗😄</p>\n<p><img data-src=\"http://img.ryzeyang.top/697d7321b5d860982d189c95c992334fa6075dbe.jpg@942w_707h_progressive.webp\" alt=\"image-20210706072851025\" /></p>\n<p>嘿嘿，答案就出在这个<strong>自动配置</strong> 身上，可以发现我们上面都没有使用到这个  <code>@EnableAutoConfiguration</code>  注解，而在我们的  <code>SpringBootApplication</code>  组合注解中，最重要的就是它了！ 通过它去开启了我们的这个<strong>自动装配</strong>。</p>\n<p>这个时候又得把这文章搬出来了 👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvUUZHczU3cUpoc1JjcWwyWmRlZzJ0Zw==\">Springboot 自动装配原理探索</span> 哈哈</p>\n<p>那么我们再来看看这个 <strong>AOP 自动装配的配置类</strong></p>\n<h3 id=\"aop自动装配的配置类\"><a class=\"anchor\" href=\"#aop自动装配的配置类\">#</a> AOP 自动装配的配置类</h3>\n<p><code>AopAutoConfiguration</code>  源码如下👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/AopAutoConfiguration.png\" alt=\"AopAutoConfiguration\" /></p>\n<p>开头有这么一个条件注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ConditionalOnProperty</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.aop\"</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span> havingValue <span class=\"token operator\">=</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span> matchIfMissing <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>havingValue = &quot;true&quot;</code>  的意思是：值为  <code>true</code>  时才有效</p>\n<p><code>matchIfMissing = true</code>  的意思是：没有配置这个属性时也能加载</p>\n<p>接着让我们把目光移到第一个静态内部类：  <code>AspectJAutoProxyingConfiguration</code></p>\n<p>如图👉：</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210706083310587.png\" alt=\"image-20210706083310587\" /></p>\n<p>这个我们也比较熟悉啦，  <code>proxyTargetClass</code>  为  <code>true</code>  时表示使用  <code>cglib</code>  ， <code>false</code>  使用  <code>JDK</code>  动态代理</p>\n<p>接着看最后的静态内部类：  <code>ClassProxyingConfiguration</code></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210706083542395.png\" alt=\"image-20210706083542395\" /></p>\n<p>可以发现它这里的条件是和   <code>AspectJAutoProxyingConfiguration</code>   相反的，当没有这个  <code>Advice</code>  类时，帮我们去注册这个代理到  <code>IOC</code>  中</p>\n<p>看完该 AOP 自动装配类后， 我们可以发现当我们使用  <code>@EnableAutoConfiguration</code>  自动装配注解时并引入  <code>AOP</code>  的包时，它会自动帮我们装配这个 <code>AopAutoConfiguration</code>  ，而它里面就使用到了  <code>@EnableAspectJAutoProxy</code>  ，所以我们一般不用手动添加该注解。</p>\n<p><img data-src=\"http://img.ryzeyang.top/JBM08\" alt=\"img\" /></p>\n<h3 id=\"怎么测试\"><a class=\"anchor\" href=\"#怎么测试\">#</a> 怎么测试</h3>\n<p>嘿嘿，再出一个小问题考考小伙伴😝</p>\n<p>有没有细心的小伙伴发现上面的  <code>core</code>  模块是没有用到这个  <code>SpringBootApplication</code>  的，而且我们也没有用到这个  <code>@EnableAutoConfiguration</code>  ，那么没有自动装配，这个  <code>SPI</code>  显然也没啥作用 ，那么，我们在项目中要怎么测试呢～</p>\n<p><img data-src=\"http://img.ryzeyang.top/Qzew4\" alt=\"img\" /></p>\n<p>答案就在 单元测试的注解身上  <code>@SpringBootTest(classes = xxxConfiguration.class)</code></p>\n<p>通过这个  <code>classes</code>  ，我们直接指定并实例化这个配置类就可以了</p>\n<p>我也是报错了才知道 哈哈😝</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210707072044403.png\" alt=\"image-20210707072044403\" /></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>嘿嘿，老规矩，画个图总结下啦👇</p>\n<h4 id=\"排查思路\"><a class=\"anchor\" href=\"#排查思路\">#</a> 排查思路</h4>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210707081614802.png\" alt=\"image-20210707081614802\" /></p>\n<h4 id=\"知识脑图\"><a class=\"anchor\" href=\"#知识脑图\">#</a> 知识脑图</h4>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210707084227045.png\" alt=\"image-20210707084227045\" /></p>\n<p>那么，本期就分享到这啦，喜欢的小伙伴记得<strong>点点赞呀</strong>～下期看看情况分享下下面某一个叭😝</p>\n<ul>\n<li><strong>Springboot 自定义 starter</strong></li>\n<li><strong>利用 AOP 实现插件</strong></li>\n<li><strong>Spring 源码</strong></li>\n</ul>\n<p><img data-src=\"http://img.ryzeyang.top/YqojQ\" alt=\"img\" /></p>\n<h3 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>欢迎小伙伴们来一起探讨问题～</p>\n<blockquote>\n<p>如果你觉得本篇文章还不错的话，那<strong>拜托再点点赞</strong>支持一下呀😝</p>\n<p><strong>让我们开始这一场意外的相遇吧！~</strong></p>\n<p>欢迎留言！谢谢支持！ヾ (≧▽≦*) o 冲冲冲！！</p>\n<p><strong>我是 4ye 咱们下期应该…… 很快再见！！</strong> 😆</p>\n</blockquote>\n",
            "tags": [
                "Spring家族"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/f70ad657.html",
            "url": "https://www.java4ye.cn/posts/f70ad657.html",
            "title": "简单两步搞定Springboot自定义starter.md",
            "date_published": "2022-01-20T14:57:28.889Z",
            "content_html": "<p>小伙伴们早呀，最近是三伏天，真的是超级热 😱</p>\n<p>先来一句～（哈哈哈）</p>\n<p><img data-src=\"http://img.ryzeyang.top/ed29\" alt=\"img\" /></p>\n<h3 id=\"springboot-自定义-starter\"><a class=\"anchor\" href=\"#springboot-自定义-starter\">#</a> Springboot 自定义 starter</h3>\n<p>好了 进入主题，今天来和小伙伴们分享这个 <strong>Springboot 自定义 starter</strong> 😄</p>\n<p>直接来到  <code>Springboot</code>  的官方文档中查看～</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWwvZmVhdHVyZXMuaHRtbCNmZWF0dXJlcy5kZXZlbG9waW5nLWF1dG8tY29uZmlndXJhdGlvbg==\">https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-auto-configuration</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210716063958607.png\" alt=\"image-20210716063958607\" /></p>\n<p>可以发现，它在这个<strong>自动配置</strong>的目录中，而经过之前两篇文章的分析 👇</p>\n<p><strong>实战分析</strong> 👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvSGtNS3VWczB4TkQ5b0JMV1hmLXJ4QQ==\">花了 2 个钟才搞懂这 AOP 为啥没生效，水友却睡着了……</span></p>\n<p><strong>原理分析</strong> 👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvUUZHczU3cUpoc1JjcWwyWmRlZzJ0Zw==\">Springboot 自动装配原理探索</span></p>\n<p>相信小伙伴们对这个自动配置和自定义 stater 有了初步的了解，那么我们来看看官网是真么说的叭</p>\n<blockquote>\n<p>Auto-configuration can be associated to a “starter” that provides the auto-configuration code as well as the typical libraries that you would use with it.</p>\n</blockquote>\n<p>就是说可以将自动配置类和依赖包进行打包，成为一个  <code>starter</code>  ，来给其他人使用</p>\n<p>看完官网后我发现貌似也没啥好写的🙃</p>\n<p><img data-src=\"http://img.ryzeyang.top/Zy5n2\" alt=\"img\" /></p>\n<p>貌似就这一点点知识了……🐷</p>\n<ul>\n<li><strong>自动配置的各种条件注解</strong></li>\n<li><strong>自定义 starter 的命名规范</strong> 如：  <code>xxx-spring-boot-starter</code></li>\n</ul>\n<p>那咱们就来看看这个小例子叭😄</p>\n<h3 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h3>\n<ol>\n<li>\n<p>准备自动配置类</p>\n</li>\n<li>\n<p>配置  <code>spring.factories</code></p>\n</li>\n<li>\n<p>部署到本地仓库</p>\n</li>\n<li>\n<p>在其他项目中引用</p>\n</li>\n</ol>\n<h3 id=\"一自动配置类\"><a class=\"anchor\" href=\"#一自动配置类\">#</a> 一。自动配置类</h3>\n<p>这里参考下  <code>redis</code>  的自动配置类</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210717113904485.png\" alt=\"image-20210717113904485\" /></p>\n<p>这里使用到了很多<strong>条件注解</strong>，比如：</p>\n<ul>\n<li><code>@ConditionalOnClass(RedisOperations.class)</code>   当存在这个  <code>RedisOperations.class</code>  时，这个配置才有效，而这个配置又是在我们引入的 jar 中有的</li>\n<li><code>@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</code>  当没有这个  <code>redisTemplate</code>  的 bean 时有效</li>\n<li><code>@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</code>  确保  <code>RedisConnectionFactory</code>  创建之后才创建这个  <code>redisTemplate</code></li>\n</ul>\n<p>然后，我们自己的就没那么复杂啦，就这么点～</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@EnableConfigurationProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloProperties</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloAutoConfiguration</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ConditionalOnMissingBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HelloTest</span> <span class=\"token function\">getHelloTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>读取  <code>HelloProperties</code>  配置类，然后创建  <code>HelloTest</code>  这个  <code>bean</code>  😄</p>\n<h3 id=\"二配置-springfactories\"><a class=\"anchor\" href=\"#二配置-springfactories\">#</a> 二。配置  <code>spring.factories</code></h3>\n<p>在  <code>META-INF/spring.factories</code>  中进行配置 如：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">\\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  com.java4ye.demo.config.HelloAutoConfiguration</span></pre></td></tr></table></figure><h3 id=\"三部署到本地仓库\"><a class=\"anchor\" href=\"#三部署到本地仓库\">#</a> 三。部署到本地仓库</h3>\n<p>参考官网的命名方式，配置我们的  <code>pom </code> 文件👇</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.4ye<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>hello-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>打包方式选择  <code>&lt;packaging&gt;jar&lt;/packaging&gt;</code>  就可以了</p>\n<p>这里执行  <code>maven install</code>  命令就可以了</p>\n<h4 id=\"细节注意\"><a class=\"anchor\" href=\"#细节注意\">#</a> 细节注意</h4>\n<ol>\n<li>\n<p><strong>package</strong> 只打包，<strong>install</strong> 会部署到本地仓库， <strong>deploy</strong> 才会部署本地和远程仓库</p>\n</li>\n<li>\n<p><code>spring-boot-configuration-processor</code>  这个包的作用： <strong>给自定义的配置类生成元数据信息的</strong></p>\n</li>\n<li>\n<p><code>pom</code>  文件中引入  <code>processor</code>  时加入  <code>&lt;optional&gt;true&lt;/optional&gt;</code>   ，给其他项目选择，不会增加不必要的依赖</p>\n</li>\n</ol>\n<h3 id=\"四-其他项目中使用\"><a class=\"anchor\" href=\"#四-其他项目中使用\">#</a> 四。其他项目中使用</h3>\n<p>在其他项目中引入该 jar 包即可～</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.4ye<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>hello-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>代码的话呢，我放在 GitHub 上啦</p>\n<p>地址👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1J5emVZYW5nL3NwcmluZ2Jvb3QtZGVtby00eWU=\">https://github.com/RyzeYang/springboot-demo-4ye</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210718111521964.png\" alt=\"image-20210718111521964\" /></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>最后，老规矩，再画个图总结下～</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210718145335585.png\" alt=\"image-20210718145335585\" /></p>\n<h3 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>欢迎小伙伴们来一起探讨问题～</p>\n<blockquote>\n<p>如果你觉得本篇文章还不错的话，那<strong>拜托再点点赞</strong>支持一下呀😝</p>\n<p><strong>让我们开始这一场意外的相遇吧！~</strong></p>\n<p>欢迎留言！谢谢支持！ヾ (≧▽≦*) o 冲冲冲！！</p>\n<p><strong>我是 4ye 咱们下期应该…… 很快再见！！</strong> 😆</p>\n</blockquote>\n",
            "tags": [
                "Spring家族"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/163bf62b.html",
            "url": "https://www.java4ye.cn/posts/163bf62b.html",
            "title": "三分钟快速了解Spring中的工厂模式",
            "date_published": "2022-01-20T14:57:28.885Z",
            "content_html": "<h3 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h3>\n<p>今天 4ye 来和小伙伴们分享下设计模式中的<strong>工厂模式</strong>啦😄</p>\n<p>顺便带来了下面三个问题，一起来看看叭😋</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210803224730150.png\" alt=\"image-20210803224730150\" /></p>\n<h3 id=\"一工厂模式\"><a class=\"anchor\" href=\"#一工厂模式\">#</a> 一。工厂模式</h3>\n<p>我们都知道，设计模式有<strong> 23</strong> 种，按照功能和使用场景可以分为三大类：</p>\n<ul>\n<li>创建型模式</li>\n<li>结构型模式</li>\n<li>行为型模式</li>\n</ul>\n<p>工厂设计模式（Factory Pattern）呢，就是一种很常见的设计模式，属于<strong>创建型模式</strong>的，主要作用就是来<strong>创建对象</strong>的～</p>\n<h4 id=\"原理图\"><a class=\"anchor\" href=\"#原理图\">#</a> 原理图</h4>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210802074017402.png\" alt=\"image-20210802074017402\" /></p>\n<p>先来看一个小例子叭😄</p>\n<h3 id=\"简单工厂模式非23种\"><a class=\"anchor\" href=\"#简单工厂模式非23种\">#</a> 简单工厂模式（非 23 种）</h3>\n<h4 id=\"原理图-2\"><a class=\"anchor\" href=\"#原理图-2\">#</a> 原理图</h4>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210802074241817.png\" alt=\"image-20210802074241817\" /></p>\n<p>例子的话，感觉也挺多的 比如各种品牌的电脑呀，手机呀，家具呀……</p>\n<p>比如笔记本电脑的例子</p>\n<h4 id=\"抽取公共接口\"><a class=\"anchor\" href=\"#抽取公共接口\">#</a> 抽取公共接口</h4>\n<p>这里就只提供一个返回品牌的接口</p>\n<pre><code class=\"language-Java\">public interface ILaptop &#123;\n    String brand();\n&#125;\n</code></pre>\n<h4 id=\"接口实现类\"><a class=\"anchor\" href=\"#接口实现类\">#</a> 接口实现类</h4>\n<p>这里就举两个例子～</p>\n<pre><code class=\"language-Java\">public class HuaWeiLaptop implements ILaptop&#123;\n    @Override\n    public String brand() &#123;\n        return &quot;HuaWei&quot;;\n    &#125;\n&#125;\n\npublic class MacLaptop implements ILaptop &#123;\n    @Override\n    public String brand() &#123;\n        return &quot;Mac&quot;;\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"工厂类\"><a class=\"anchor\" href=\"#工厂类\">#</a> 工厂类</h4>\n<p>最主要的就是这个工厂类了，我们把创建对象的能力将给它～</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LaptopFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ILaptop</span> <span class=\"token function\">createLaptop</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> brand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>brand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">\"HuaWei\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HuaWeiLaptop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">\"Mac\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MacLaptop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h4>\n<p>就这样，我们就简单的完成了一个工厂模式的应用了～，以后创建对象就直接调用工厂的方法就可以了🐖</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LaptopMain</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ILaptop</span> hw <span class=\"token operator\">=</span> <span class=\"token class-name\">LaptopFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">createLaptop</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HuaWei\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">String</span> brand <span class=\"token operator\">=</span> hw<span class=\"token punctuation\">.</span><span class=\"token function\">brand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>brand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当然，这个是最简单的工厂模式例子了，也叫做 <strong>简单工厂模式</strong></p>\n<p>当然这个也有很明显的弊端，所以我们再来看看这个 <strong>工厂方法模式</strong></p>\n<h3 id=\"工厂方法模式\"><a class=\"anchor\" href=\"#工厂方法模式\">#</a> 工厂方法模式</h3>\n<h4 id=\"原理图-3\"><a class=\"anchor\" href=\"#原理图-3\">#</a> 原理图</h4>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210802075125221.png\" alt=\"image-20210802075125221\" /></p>\n<p>想想简单工厂的写法，将创建对象的所有操作都封装在一个工厂里，是不合理的，所以我们要进一步解耦</p>\n<h4 id=\"抽取工厂公共接口\"><a class=\"anchor\" href=\"#抽取工厂公共接口\">#</a> 抽取工厂公共接口</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ILaptopFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">ILaptop</span> <span class=\"token function\">createLaptop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"工厂实现类\"><a class=\"anchor\" href=\"#工厂实现类\">#</a> 工厂实现类</h4>\n<pre><code class=\"language-Java\">public class HuaweiLaptopFactory implements ILaptopFactory&#123;\n    @Override\n    public ILaptop createLaptop() &#123;\n        return new HuaWeiLaptop();\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"测试-2\"><a class=\"anchor\" href=\"#测试-2\">#</a> 测试</h4>\n<p>简单改动上面测试案例的前两句代码即可</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">HuaweiLaptopFactory</span> huaweiLaptopFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HuaweiLaptopFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token class-name\">ILaptop</span> mac <span class=\"token operator\">=</span>  huaweiLaptopFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createLaptop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>是不是很简单的就完成了这个工厂模式了😄</p>\n<h3 id=\"抽象工厂模式\"><a class=\"anchor\" href=\"#抽象工厂模式\">#</a> 抽象工厂模式</h3>\n<h4 id=\"原理图-4\"><a class=\"anchor\" href=\"#原理图-4\">#</a> 原理图</h4>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210802075552904.png\" alt=\"image-20210802075552904\" /></p>\n<p>那么工厂嘛，肯定不止一条生产线，它肯定有其他的业务，比如手机呀，其他电器啥的。</p>\n<p>所以我们再重复上面笔记本产品的例子，再建一些其他类，然后也通过工厂类去创建它即可。</p>\n<h4 id=\"抽象工厂\"><a class=\"anchor\" href=\"#抽象工厂\">#</a> 抽象工厂</h4>\n<p>先定义一个抽象工厂</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">IPhone</span> <span class=\"token function\">createPhone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">ILaptop</span> <span class=\"token function\">createLaptop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"工厂实现类-2\"><a class=\"anchor\" href=\"#工厂实现类-2\">#</a> 工厂实现类</h4>\n<p>也就多了一个而已呀～</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HuaweiFactory</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractFactory</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">IPhone</span> <span class=\"token function\">createPhone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HuaWeiPhone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ILaptop</span> <span class=\"token function\">createLaptop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HuaWeiLaptop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h3>\n<p>在使用工厂模式时，我们可以发现从 <strong>简单工厂（非 23 种）</strong> ——》 <strong>工厂方法</strong> ——》<strong>抽象工厂</strong></p>\n<p>这是一个不断<strong>扩展，解耦</strong>的过程，我们可以在项目种根据需要进行选择～</p>\n<p>比如 产品多的话就选抽象工厂，单一的话就直接用工厂或者简单工厂就可以了😝</p>\n<p><img data-src=\"http://img.ryzeyang.top/pj1yq\" alt=\"img\" /></p>\n<p>至此，我们了解到工厂模式是属于 23 中设计模式中的<strong>创建型模式</strong>，主要用途就是<strong>创建对象</strong>，同时方便程序解耦。</p>\n<p>接着，我们再来想想  <code>Spring</code>  中和<strong>工厂模式</strong>有关的🐷</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210804213519712.png\" alt=\"image-20210804213519712\" /></p>\n<p>说到这里，你想到什么了呢？😄</p>\n<p>不知道的话，就默念 Factory，Factory，Factory ……  哈哈哈</p>\n<p>是不是脑海中一下子浮现出来了这两货👉   <code>BeanFactory</code>  ，  <code>FactoryBean</code></p>\n<p>从名字就可以看出这两货和工厂有关 哈哈（分别通过  <code>getBean</code>  和  <code>getObject</code>  获取对象）</p>\n<p>那么我们先来介绍下他们叭😄</p>\n<h3 id=\"beanfactory\"><a class=\"anchor\" href=\"#beanfactory\">#</a> BeanFactory</h3>\n<h4 id=\"源码的第一句话\"><a class=\"anchor\" href=\"#源码的第一句话\">#</a> 源码的第一句话👇</h4>\n<blockquote>\n<p>The root interface for accessing a Spring bean container. （IOC 的根接口）</p>\n</blockquote>\n<p>可以发现它是<strong>非常核心的组件</strong>。</p>\n<h4 id=\"遵循严格的生命周期\"><a class=\"anchor\" href=\"#遵循严格的生命周期\">#</a> 遵循严格的<strong>生命周期</strong>👇</h4>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210804212904552.png\" alt=\"image-20210804212904552\" /></p>\n<p>可以发现，通过  <code>BeanFactory</code>  创建一个  <code>Bean</code>  要经过非常严格的流程处理，很繁琐。</p>\n<h4 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法</h4>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210804221630497.png\" alt=\"image-20210804221630497\" /></p>\n<p>方法有很多，比如 获取别名呀，类型呀，是否是单例，原型等</p>\n<p>通过  <code>getBean</code>  去获取对象</p>\n<h4 id=\"主要作用\"><a class=\"anchor\" href=\"#主要作用\">#</a> 主要作用</h4>\n<p>根据  <code>BeanDefinition</code>  生成相应的  <code>Bean</code>  对象。</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210804222905598.png\" alt=\"image-20210804222905598\" /></p>\n<h3 id=\"factorybean\"><a class=\"anchor\" href=\"#factorybean\">#</a> FactoryBean</h3>\n<h4 id=\"源码\"><a class=\"anchor\" href=\"#源码\">#</a> 源码</h4>\n<p>可以发现就这么三个方法，一个小工厂～</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210804220029360.png\" alt=\"image-20210804220029360\" /></p>\n<p>通过  <code>getObject</code>  方法来返回一个对象</p>\n<p>获取对象时：</p>\n<ul>\n<li>如果  <code>beanName</code>  没有加  <code>&amp;</code>  号，则获取的是<strong>泛型 T</strong> 的对象。</li>\n<li>如果添加了  <code>&amp;</code>  号，获取的是实现了  <code>FactoryBean</code>  接口本身的对象，如  <code>EhCacheFactoryBean</code></li>\n</ul>\n<p>而正因为它的小巧，它也被广泛的应用在<strong> Spring 内部</strong>，以及<strong> Spring 与第三方框架或组件</strong>的整合过程中。</p>\n<h3 id=\"三beanfactory-和-factorybean-的区别是什么\"><a class=\"anchor\" href=\"#三beanfactory-和-factorybean-的区别是什么\">#</a> 三.BeanFactory 和 FactoryBean 的区别是什么？</h3>\n<ul>\n<li><code>BeanFactory</code>  是一个大工厂，是 IOC 容器的根基，有繁琐的  <code>bean</code>  生命周期处理过程，可以生成出各种各样的  <code>Bean</code></li>\n<li><code>FactoryBean</code>  是一个小工厂，它自己也是一个  <code>Bean</code>  ，但是可以生成其他  <code>Bean</code></li>\n</ul>\n<hr />\n<p><img data-src=\"http://img.ryzeyang.top/image-20210804223826555.png\" alt=\"image-20210804223826555\" /></p>\n<p>最后一个问题～😄</p>\n<h3 id=\"二spring中工厂模式的使用\"><a class=\"anchor\" href=\"#二spring中工厂模式的使用\">#</a> 二.Spring 中工厂模式的使用</h3>\n<p>既然都和工厂有关，那么我们就挑个软柿子捏一下叭😄</p>\n<p><img data-src=\"http://img.ryzeyang.top/1628080678-80423.gif\" alt=\"img\" /></p>\n<h4 id=\"factorybean工厂模式图\"><a class=\"anchor\" href=\"#factorybean工厂模式图\">#</a> FactoryBean 工厂模式图</h4>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210804210507426.png\" alt=\"image-20210804210507426\" /></p>\n<p>可以发现和我们上面介绍的工厂方法模式一样，公共接口和不同的实现类，通过具体的工厂获取对象。</p>\n<p><code>BeanFactory</code>  也是类似的，就不画啦</p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>画个图总结下啦👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210804225023263.png\" alt=\"image-20210804225023263\" /></p>\n<h3 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>欢迎小伙伴们来一起探讨问题～</p>\n<blockquote>\n<p>如果你觉得本篇文章还不错的话，那<strong>拜托再点点赞</strong>支持一下呀😝</p>\n<p><strong>让我们开始这一场意外的相遇吧！~</strong></p>\n<p>欢迎留言！谢谢支持！ヾ (≧▽≦*) o 冲冲冲！！</p>\n<p><strong>我是 4ye 咱们下期应该…… 很快再见！！</strong> 😆</p>\n</blockquote>\n",
            "tags": [
                "Spring家族"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/28946896.html",
            "url": "https://www.java4ye.cn/posts/28946896.html",
            "title": "四种引用类型在Springboot中的使用",
            "date_published": "2022-01-20T14:57:28.881Z",
            "content_html": "<p>今天 <strong>4ye</strong> 来和小伙伴们聊聊这个 <strong>强引用</strong>，<strong>软引用</strong>，<strong>弱引用</strong>，<strong>幻象引用</strong>（<strong>虚引用</strong>）啦😝</p>\n<p>嘿嘿，主要是最近读源码的时候经常看到，然后又想到自己第一次知道这个神奇的东西是在 <strong>2020-8-21</strong>😄</p>\n<p>为啥记得这么清楚呢？ 主要是翻到了 杨晓峰大佬的 pdf 哈哈😄</p>\n<p><img data-src=\"http://img.ryzeyang.top/rdppo\" alt=\"img\" /></p>\n<p>这次我一定得记牢不搞混了  哈哈，一起来看看叭😝</p>\n<p>&lt;h3  style=&quot;margin-top: 20px;margin-bottom: 20px;font-weight: bold;font-size: 17px;max-width: 100%;font-family: Optima-Regular, Optima, PingFangTC-Light, PingFangSC-light, PingFangTC-light;letter-spacing: 2px;white-space: normal;background-color: rgb(255, 255, 255);color: black;text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;padding-bottom: 2px;max-width: 100%;border-bottom: 2px solid rgba(71, 193, 119, 0.84);color: rgb(43, 43, 43);font-size: 22px;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;margin: auto auto -8px;max-width: 100%;width: 30px;height: 30px;display: block;background-image: url(&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2ltZy5yeXpleWFuZy50b3AvamF2YTR5ZV9oZWFkZXIucG5n\">http://img.ryzeyang.top/java4ye_header.png</span>&quot;<br />\n);background-position: center center;background-size: 30px;opacity: 1;background-repeat: no-repeat;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;br style=&quot;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;/span &gt; 文章概览 &lt;/span&gt;&lt;/h3&gt;</p>\n<p>&lt;p style=&quot;line-height: 2em;margin-top: 20px;margin-left: 0px;margin-right: 0px;&quot;&gt;&lt;span style=&quot;color: rgba (71, 193, 119, 0.84);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-family: Optima-Regular, PingFangTC-light;font-size: 20px;&quot;&gt;&lt;strong &gt; 一. &lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;em&gt;&lt;span style=&quot;font-family: Optima-Regular, PingFangTC-light;font-size: 20px;&quot;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;strong style=&quot;<br />\nfont-size: 18px;<br />\n&quot;&gt; 四种引用的概念 &lt;/strong&gt;&lt;strong style=&quot;&quot;&gt;&lt;/strong&gt;&lt;/p&gt;</p>\n<p>&lt;p style=&quot;line-height: 2em;margin-top: 20px;margin-left: 0px;margin-right: 0px;&quot;&gt;&lt;span style=&quot;color: rgba (71, 193, 119, 0.84);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-family: Optima-Regular, PingFangTC-light;font-size: 20px;&quot;&gt;&lt;strong &gt; 二. &lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;em&gt;&lt;span style=&quot;font-family: Optima-Regular, PingFangTC-light;font-size: 20px;&quot;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;strong style=&quot;<br />\nfont-size: 18px;<br />\n&quot;&gt; 对象可达性介绍 &lt;/strong&gt;&lt;strong style=&quot;&quot;&gt;&lt;/strong&gt;&lt;/p&gt;</p>\n<p>&lt;p style=&quot;line-height: 2em;margin-top: 20px;margin-left: 0px;margin-right: 0px;&quot;&gt;&lt;span style=&quot;color: rgba (71, 193, 119, 0.84);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-family: Optima-Regular, PingFangTC-light;font-size: 20px;&quot;&gt;&lt;strong &gt; 三. &lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;em&gt;&lt;span style=&quot;font-family: Optima-Regular, PingFangTC-light;font-size: 20px;&quot;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;strong style=&quot;<br />\nfont-size: 18px;<br />\n&quot;&gt;Springboot 源码中的引用 &lt;/strong&gt;&lt;strong style=&quot;&quot;&gt;&lt;/strong&gt;&lt;/p&gt;</p>\n<p>&lt;h3  style=&quot;margin-top: 20px;margin-bottom: 20px;font-weight: bold;font-size: 17px;max-width: 100%;font-family: Optima-Regular, Optima, PingFangTC-Light, PingFangSC-light, PingFangTC-light;letter-spacing: 2px;white-space: normal;background-color: rgb(255, 255, 255);color: black;text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;padding-bottom: 2px;max-width: 100%;border-bottom: 2px solid rgba(71, 193, 119, 0.84);color: rgb(43, 43, 43);font-size: 22px;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;margin: auto auto -8px;max-width: 100%;width: 30px;height: 30px;display: block;background-image: url(&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2ltZy5yeXpleWFuZy50b3AvamF2YTR5ZV9oZWFkZXIucG5n\">http://img.ryzeyang.top/java4ye_header.png</span>&quot;<br />\n);background-position: center center;background-size: 30px;opacity: 1;background-repeat: no-repeat;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;br style=&quot;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;/span &gt; 概念介绍 &lt;/span&gt;&lt;/h3&gt;</p>\n<blockquote>\n<p>不同的引用类型，主要体现的是<strong>对象不同的可达性（reachable）状态和对垃圾收集的影响</strong>。</p>\n</blockquote>\n<p>&lt;p style=&quot;line-height: 2em;margin-top: 20px;margin-left: 0px;margin-right: 0px;&quot;&gt;&lt;span style=&quot;color: rgba(71, 193, 119, 0.84);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-family: Optima-Regular, PingFangTC-light;font-size: 20px;&quot;&gt;&lt;strong&gt;01. &lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;em&gt;&lt;span style=&quot;font-family: Optima-Regular, PingFangTC-light;font-size: 20px;&quot;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;strong style=&quot;<br />\nfont-size: 18px;<br />\n&quot;&gt; 强引用 &lt;/strong&gt;&lt;strong style=&quot;&quot;&gt;&lt;/strong&gt;&lt;/p&gt;</p>\n<p>这个就是我们创建的普通对象了～当该对象被显示地赋值为  <code>null</code>  时，或者没有被其他存活的对象继续引用时，它就会成为垃圾收集器的目标，等待被收回</p>\n<p>&lt;p style=&quot;line-height: 2em;margin-top: 20px;margin-left: 0px;margin-right: 0px;&quot;&gt;&lt;span style=&quot;color: rgba(71, 193, 119, 0.84);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-family: Optima-Regular, PingFangTC-light;font-size: 20px;&quot;&gt;&lt;strong&gt;02. &lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;em&gt;&lt;span style=&quot;font-family: Optima-Regular, PingFangTC-light;font-size: 20px;&quot;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;strong style=&quot;<br />\nfont-size: 18px;<br />\n&quot;&gt; 软引用 &lt;/strong&gt;&lt;strong style=&quot;&quot;&gt;&lt;/strong&gt;&lt;/p&gt;</p>\n<p>软引用 (  <code>SoftReference</code>  ) , 当<strong>内存不足</strong> 时会被回收</p>\n<p>比如</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210620220531336.png\" alt=\"image-20210620220531336\" /></p>\n<p>被回收后，这里会打印  <code>null</code>  而不是  <code>Java4ye</code></p>\n<p>&lt;p style=&quot;line-height: 2em;margin-top: 20px;margin-left: 0px;margin-right: 0px;&quot;&gt;&lt;span style=&quot;color: rgba(71, 193, 119, 0.84);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-family: Optima-Regular, PingFangTC-light;font-size: 20px;&quot;&gt;&lt;strong&gt;03. &lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;em&gt;&lt;span style=&quot;font-family: Optima-Regular, PingFangTC-light;font-size: 20px;&quot;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;strong style=&quot;<br />\nfont-size: 18px;<br />\n&quot;&gt; 弱引用 &lt;/strong&gt;&lt;strong style=&quot;&quot;&gt;&lt;/strong&gt;&lt;/p&gt;</p>\n<p>弱引用 (  <code>WeakReference</code>  ) , 当 <strong>垃圾回收器</strong> 进行垃圾回收时，无论内存足与否，它都会被垃圾回收器回收</p>\n<p>比如</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210620221353830.png\" alt=\"image-20210620221353830\" /></p>\n<p>被回收后，这里也是会打印  <code>null</code>  而不是  <code>Java4ye</code></p>\n<p>&lt;p style=&quot;line-height: 2em;margin-top: 20px;margin-left: 0px;margin-right: 0px;&quot;&gt;&lt;span style=&quot;color: rgba(71, 193, 119, 0.84);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-family: Optima-Regular, PingFangTC-light;font-size: 20px;&quot;&gt;&lt;strong&gt;04. &lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;em&gt;&lt;span style=&quot;font-family: Optima-Regular, PingFangTC-light;font-size: 20px;&quot;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;strong style=&quot;<br />\nfont-size: 18px;<br />\n&quot;&gt; 虚引用 &lt;/strong&gt;&lt;strong style=&quot;&quot;&gt;&lt;/strong&gt;&lt;/p&gt;</p>\n<p>虚引用 (  <code>ReferenceQueue</code>  ) , 这个也是随时会被回收，不过它的作用更像一个标记，当对象被回收时，它不为  <code>null</code>  ，但是要注意，无论什么时候去调用 虚引用的  <code>get</code>  方法，都只能获取到一个  <code>null</code>  值。</p>\n<blockquote>\n<p>为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知 —— <strong>&lt;&lt;深入理解 Java 虚拟机&gt;&gt;</strong></p>\n</blockquote>\n<p>这里引用 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qYXZhc2h1by5jb20vYXJ0aWNsZS9wLXp5dmRjYmhsLW5iLmh0bWw=\">http://www.javashuo.com/article/p-zyvdcbhl-nb.html</span> 该文章的例子</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Java4ye\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ReferenceQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userReferenceQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReferenceQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建 User 对象的虚引用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">PhantomReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> phantomReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PhantomReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> userReferenceQueue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 去掉强引用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>user <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>phantomReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 手动触发 GC</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GC: \"</span> <span class=\"token operator\">+</span> phantomReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">Reference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> reference <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    reference <span class=\"token operator\">=</span> userReferenceQueue<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reference <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对象User被回收了:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>&lt;h3  style=&quot;margin-top: 20px;margin-bottom: 20px;font-weight: bold;font-size: 17px;max-width: 100%;font-family: Optima-Regular, Optima, PingFangTC-Light, PingFangSC-light, PingFangTC-light;letter-spacing: 2px;white-space: normal;background-color: rgb(255, 255, 255);color: black;text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;padding-bottom: 2px;max-width: 100%;border-bottom: 2px solid rgba(71, 193, 119, 0.84);color: rgb(43, 43, 43);font-size: 22px;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;margin: auto auto -8px;max-width: 100%;width: 30px;height: 30px;display: block;background-image: url(&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2ltZy5yeXpleWFuZy50b3AvamF2YTR5ZV9oZWFkZXIucG5n\">http://img.ryzeyang.top/java4ye_header.png</span>&quot;<br />\n);background-position: center center;background-size: 30px;opacity: 1;background-repeat: no-repeat;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;br style=&quot;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;/span &gt; 对象可达性 &lt;/span&gt;&lt;/h3&gt;</p>\n<p>那么 简单介绍完上面的 <strong>4</strong> 种引用后，我们再来看看它的<strong>可达性</strong>～</p>\n<p>如图～</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210621083333189.png\" alt=\"image-20210621083333189\" /></p>\n<ol>\n<li><strong>强可达</strong>： 比如 创建一个对象时，创建它的线程对该对象就是强可达</li>\n<li><strong>软可达</strong>： 只能通过软引用访问</li>\n<li><strong>弱可达</strong>： 只能通过弱引用访问</li>\n<li><strong>虚可达</strong>： 当对象没有 <strong>强，软，弱</strong> 引用关联时，并且  <code>finalize</code>  过，就会进入该状态</li>\n<li><strong>不可达</strong>： 意味着该对象可以被清除了。</li>\n</ol>\n<p>通过最开始的代码例子和上面的图（<strong>双向箭头</strong>）我们还可以发现，<strong>软引用和弱引用和强引用</strong>这三者间可以进行转换 ( 通过  <code>Reference</code>  的  <code>get()</code>  可获取到<strong>原对象</strong>)，这意味着:</p>\n<blockquote>\n<p>对于软引用、弱引用之类，垃圾收集器可能会存在二次确认的问题，以保证处于弱引用状态的对象，没有改变为强引用。</p>\n</blockquote>\n<p>在  <code>JDK8</code>  中，还可以通过 指定参数打印引用的相关信息</p>\n<blockquote>\n<p>-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintReferenceGC</p>\n</blockquote>\n<p>在  <code>JDK8</code>  中使用  <code>ParrallelGC</code>  收集的垃圾回收日志 （大佬 pdf 中的例子）</p>\n<blockquote>\n<p>0.403: [GC (Allocation Failure) 0.871: [SoftReference, 0 refs, 0.0000393 secs]0.871: [WeakReference, 8 refs, 0.0000138 secs]0.871: [FinalReference, 4 refs, 0.0000094 secs]0.871:</p>\n<p>[PhantomReference, 0 refs, 0 refs, 0.0000085 secs]0.871: [JNI Weak Reference, 0.0000071 secs][PSYoungGen: 76272K-&gt;10720K(141824K)] 128286K-&gt;128422K(316928K), 0.4683919 secs] [Times:</p>\n<p>user=1.17 sys=0.03, real=0.47 secs]</p>\n</blockquote>\n<p>再记录下这个点👇（哈哈 不知道啥时候才会用上～）</p>\n<p><strong>通过底层 API 来达到强引用</strong>👍</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210621085544098.png\" alt=\"image-20210621085544098\" /></p>\n<p>&lt;h3  style=&quot;margin-top: 20px;margin-bottom: 20px;font-weight: bold;font-size: 17px;max-width: 100%;font-family: Optima-Regular, Optima, PingFangTC-Light, PingFangSC-light, PingFangTC-light;letter-spacing: 2px;white-space: normal;background-color: rgb(255, 255, 255);color: black;text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;padding-bottom: 2px;max-width: 100%;border-bottom: 2px solid rgba(71, 193, 119, 0.84);color: rgb(43, 43, 43);font-size: 22px;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;margin: auto auto -8px;max-width: 100%;width: 30px;height: 30px;display: block;background-image: url(&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2ltZy5yeXpleWFuZy50b3AvamF2YTR5ZV9oZWFkZXIucG5n\">http://img.ryzeyang.top/java4ye_header.png</span>&quot;<br />\n);background-position: center center;background-size: 30px;opacity: 1;background-repeat: no-repeat;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;br style=&quot;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;/span&gt;Springboot 源码中的使用 &lt;/span&gt;&lt;/h3&gt;</p>\n<p>嘿嘿  终于来到重点了 ，正如开头提到的～<strong>4ye</strong> 也是在  <code>Springboot</code>  源码中看到这个</p>\n<p><code>ConcurrentReferenceHashMap</code>  才想起要写一下这篇文章滴✍</p>\n<p>那么这个  <code>ConcurrentReferenceHashMap</code>   到底有什么作用呢？</p>\n<blockquote>\n<p><code>ConcurrentReferenceHashMap</code>  <strong>能指定所存放对象的引用级别</strong></p>\n</blockquote>\n<p>默认情况下是 <strong>软引用级别</strong></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210621122940290.png\" alt=\"image-20210621122940290\" /></p>\n<p>比如 在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvUUZHczU3cUpoc1JjcWwyWmRlZzJ0Zw==\">Springboot 自动装配原理探索</span> 一文中提到的  <code>Springboot SPI 机制</code>  其中的主角：  <code>SpringFactoriesLoader</code></p>\n<p><strong>源码如下：</strong></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210621092032074.png\" alt=\"image-20210621092032074\" /></p>\n<p>还有<strong>自动配置过程中的注解扫描</strong>  <code>AnnotationsScanner</code></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210621093124042.png\" alt=\"image-20210621093124042\" /></p>\n<p>以及在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRDBudXZkMUlXdTRuNU9xaGVzdVBqQQ==\">万字长文，带你快速上手这些池化技术！</span> 一文中出现的 <strong>异步任务线程池</strong>：  <code>ThreadPoolTaskExecutor</code></p>\n<p><strong>源码如下：</strong> （可以看到这里指明了是 <strong>弱引用级别</strong>）</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210621092723147.png\" alt=\"image-20210621092723147\" /></p>\n<p>&lt;h3  style=&quot;margin-top: 20px;margin-bottom: 20px;font-weight: bold;font-size: 17px;max-width: 100%;font-family: Optima-Regular, Optima, PingFangTC-Light, PingFangSC-light, PingFangTC-light;letter-spacing: 2px;white-space: normal;background-color: rgb(255, 255, 255);color: black;text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;padding-bottom: 2px;max-width: 100%;border-bottom: 2px solid rgba(71, 193, 119, 0.84);color: rgb(43, 43, 43);font-size: 22px;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;margin: auto auto -8px;max-width: 100%;width: 30px;height: 30px;display: block;background-image: url(&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2ltZy5yeXpleWFuZy50b3AvamF2YTR5ZV9oZWFkZXIucG5n\">http://img.ryzeyang.top/java4ye_header.png</span>&quot;<br />\n);background-position: center center;background-size: 30px;opacity: 1;background-repeat: no-repeat;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;br style=&quot;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&quot;&gt;&lt;/span &gt; 总结 &lt;/span&gt;&lt;/h3&gt;</p>\n<ol>\n<li>看完上面的例子，觉得可以模仿下  <code>Springboot</code>  的  <code>ConcurrentReferenceHashMap</code>   ，对对象进行一个合理的存储，间接地优化 <code>jvm</code>  ，提高垃圾回收的效率。</li>\n<li>这两个别搞混了： <strong>软引用，内存不足时回收</strong>；<strong>弱引用，在进行垃圾回收时，不管内存足与否，都会被回收，</strong></li>\n</ol>\n<h2 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>欢迎小伙伴们来一起探讨问题～</p>\n<blockquote>\n<p>如果你觉得本篇文章还不错的话，那<strong>拜托再点点赞</strong>支持一下呀😝</p>\n<p><strong>让我们开始这一场意外的相遇吧！~</strong></p>\n<p>欢迎留言！谢谢支持！ヾ (≧▽≦*) o 冲冲冲！！</p>\n<p><strong>我是 4ye 咱们下期应该…… 很快再见！！</strong> 😆</p>\n</blockquote>\n",
            "tags": [
                "Spring家族"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/248dd2a2.html",
            "url": "https://www.java4ye.cn/posts/248dd2a2.html",
            "title": "AOP插件就这？上手不用两分钟！！",
            "date_published": "2022-01-20T14:57:28.876Z",
            "content_html": "<p>小伙伴们好呀，今天 4ye 来分享这个 <strong>Spring AOP 插件篇</strong> 啦😝</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210917225204079.png\" alt=\"image-20210917225204079\" /></p>\n<h3 id=\"项目一览\"><a class=\"anchor\" href=\"#项目一览\">#</a> 项目一览</h3>\n<p>这个 demo 分为两个模块 ：</p>\n<p>👉 <strong>插件模块</strong> <strong>springboot-aop-plugin</strong></p>\n<p>👉 <strong>业务模块</strong> <strong>springboot-aop-plugin-used</strong></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210917073319160.png\" alt=\"image-20210917073319160\" /></p>\n<h3 id=\"模块功能介绍\"><a class=\"anchor\" href=\"#模块功能介绍\">#</a> 模块功能介绍</h3>\n<p>👉 <strong>插件模块</strong> <strong>springboot-aop-plugin</strong> 里面提供两个插件</p>\n<ol>\n<li>插件 A MethodCountingTimesPlugin  ： <strong>统计方法调用次数</strong></li>\n<li>插件 B MethodSpendTimePlugin  ： <strong>计算调用方法所花费的时间</strong></li>\n</ol>\n<p>👉 <strong>业务模块</strong> <strong>springboot-aop-plugin-used</strong></p>\n<ol>\n<li>提供业务 API</li>\n<li>插件配置类，主要负责 <strong>解析</strong></li>\n<li>插件工厂，主要负责 <strong>加载，激活和停用插件</strong></li>\n</ol>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210917104638902.png\" alt=\"image-20210917104638902\" /></p>\n<h3 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h3>\n<blockquote>\n<p>将 <strong>插件模块</strong> 打包成一个 jar 包，然后在 <strong>业务模块</strong> 中配置好 <strong>plugins.json</strong> 的 <strong>jar</strong> 包地址，随后 <strong>激活 / 停用插件</strong>，就可以在控制台看到不同的输出效果啦😄</p>\n</blockquote>\n<h3 id=\"原理图\"><a class=\"anchor\" href=\"#原理图\">#</a> 原理图 👇</h3>\n<p>主要知识点</p>\n<ol>\n<li>\n<p><strong>类加载器</strong></p>\n</li>\n<li>\n<p><strong>Spring AOP 编程式</strong></p>\n</li>\n</ol>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210917075225933.png\" alt=\"image-20210917075225933\" /></p>\n<h3 id=\"效果演示\"><a class=\"anchor\" href=\"#效果演示\">#</a> 效果演示</h3>\n<h4 id=\"api-如下\"><a class=\"anchor\" href=\"#api-如下\">#</a> API 如下🐖</h4>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210917075418463.png\" alt=\"image-20210917075418463\" /></p>\n<h4 id=\"激活插件1\"><a class=\"anchor\" href=\"#激活插件1\">#</a> 激活插件 1</h4>\n<blockquote>\n<p>调用方法时会统计该方法的调用次数</p>\n</blockquote>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210917081423938.png\" alt=\"image-20210917081423938\" /></p>\n<h4 id=\"关闭插件1\"><a class=\"anchor\" href=\"#关闭插件1\">#</a> 关闭插件 1</h4>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210917081656876.png\" alt=\"image-20210917081656876\" /></p>\n<h4 id=\"再次激活插件1\"><a class=\"anchor\" href=\"#再次激活插件1\">#</a> 再次激活插件 1</h4>\n<p>顺便激活插件 2 效果</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210917082018859.png\" alt=\"image-20210917082018859\" /></p>\n<p>还挺好玩的 哈哈 其他就等小伙伴们自己优化了 🐷</p>\n<h3 id=\"主要源码说明\"><a class=\"anchor\" href=\"#主要源码说明\">#</a> 主要源码说明</h3>\n<p><strong>MethodCountingTimesPlugin</strong> 插件通过实现这个  <strong>MethodBeforeAdvice</strong> 来达到 <strong>@Before</strong> 注解的效果</p>\n<p><strong>MethodSpendTimePlugin</strong> 插件通过实现这个  <strong>MethodInterceptor</strong> 来达到 <strong>@Around</strong> 注解的效果</p>\n<p>这部分的知识点可以看上篇文章 👉<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvTjF0LXQwRmhRaGR6SW9fbGpoeEJiUQ==\">《Spring AOP 内功修炼！！》</span></p>\n<p>代码也很简单，就不多介绍啦👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210917083716566.png\" alt=\"image-20210917083716566\" /></p>\n<h4 id=\"pluginconfig\"><a class=\"anchor\" href=\"#pluginconfig\">#</a> PluginConfig</h4>\n<p>这个配置类呢，就是在初始化时去加载，解析这个配置文件 <strong>plugins.json</strong>，然后放到这个 map 中</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210917084858226.png\" alt=\"image-20210917084858226\" /></p>\n<h4 id=\"defaultpluginfactory\"><a class=\"anchor\" href=\"#defaultpluginfactory\">#</a> DefaultPluginFactory</h4>\n<p>激活插件方法如下 👇</p>\n<p>也就是通过这个 <strong>编程式 AOP</strong> 来实现</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210917085051178.png\" alt=\"image-20210917085051178\" /></p>\n<p>完整项目在 Github 上，链接在文末自取就可以啦～</p>\n<p>接下来说说搭建这个小 demo 遇到的坑🕳</p>\n<h3 id=\"坑\"><a class=\"anchor\" href=\"#坑\">#</a> 坑🕳</h3>\n<ol>\n<li>\n<p>打包插件模块，这里我们用到的是 spring-boot-maven-plugin 插件，打包时会去查找有 <strong>main</strong> 方法的类，并修改 jar 包结构为 <strong>BOOT-INF/classes/</strong> ，这样打出来的包，会导致加载插件时无法解析出增强类，一直都是  <strong>ClassNotFoundException</strong></p>\n</li>\n<li>\n<p>ClassLoader 的不同，本次 demo 使用的是 JDK11，而在 JDK11 中，<strong>AppclassLoader</strong> 无法再转换为 <strong>URLClassLoader</strong>  ，区别如下👇</p>\n</li>\n</ol>\n<p><strong>JDK11</strong></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210917115044837.png\" alt=\"image-20210917115044837\" /></p>\n<p><strong>JDK8</strong></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210917115117083.png\" alt=\"image-20210917115117083\" /></p>\n<p>所以在 <strong>JDK11</strong> 中无法通过将 <strong>AppclassLoader</strong> 转换成 <strong>URLClassLoader</strong> 去判断有没有加载过某个 jar 包</p>\n<h3 id=\"问题思考\"><a class=\"anchor\" href=\"#问题思考\">#</a> 问题思考</h3>\n<p>完成这个 demo 后，4ye 对 AOP 又有了以下的这些思考～</p>\n<h4 id=\"一-aop-发生的条件\"><a class=\"anchor\" href=\"#一-aop-发生的条件\">#</a> 一. AOP 发生的条件</h4>\n<p>我们都知道 <strong>AOP</strong> 是 <strong>面向切面编程</strong> ，所以我们得告诉它<strong>往哪里切</strong>，才有机会创建这个 <strong>代理对象</strong> 出来～</p>\n<p>比如 Spring 提供的这几个注解</p>\n<ul>\n<li>事务 <strong>@Transactional</strong></li>\n<li>异步 <strong>@Async</strong></li>\n<li>缓存 <strong>@Cacheable</strong> , <strong>@CacheEvict</strong> ，<strong>@CachePut</strong> , <strong>@Caching</strong> 等</li>\n</ul>\n<p>这些在 <strong>spring-aspects</strong> 模块中</p>\n<blockquote>\n<p>关于 <strong>Spring</strong> 的模块可以参考这篇文章  👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvVlB5aFNiaVh2UHBBRVNQdGs1d203Zw==\">《Spring 的这七大模块你了解吗？》</span></p>\n</blockquote>\n<p>同时，创建代理对象时，<strong>CGLIB</strong> 只能代理 <strong>非 final</strong> 类中的 <strong>非 final</strong>，<strong>非 static</strong> 方法。</p>\n<h4 id=\"二-为啥采用编程式的aop\"><a class=\"anchor\" href=\"#二-为啥采用编程式的aop\">#</a> 二。为啥采用编程式的 AOP</h4>\n<p>这就突出它的优点啦！毕竟编程式才是最灵活的 哈哈。就像 <strong>编程式事务</strong> 一样，你可以控制事务的粒度，在编程式 AOP 中，你可以控制 <strong>Advice</strong> 的启动，停止。</p>\n<h4 id=\"三-优化地方\"><a class=\"anchor\" href=\"#三-优化地方\">#</a> 三。优化地方</h4>\n<ol>\n<li><strong>MethodCountingTimesPlugin</strong> 中是通过 map 来存放不同方法的调用次数的，这个 key 需要考虑怎么和方法挂钩起来，并且唯一 （待优化）</li>\n<li>实现配置文件的热更新，以及刷新缓存的 Advice （待优化）</li>\n</ol>\n<h3 id=\"新发现\"><a class=\"anchor\" href=\"#新发现\">#</a> 新发现</h3>\n<p>我们这篇的主题是插件，插件<strong>可插拔</strong>的特点十分方便，同时，我们利用 <strong>ClassLoader</strong>  实现了 <strong>热加载！</strong></p>\n<p>但是呢，我了解到它不仅仅有这个功能，它还可以实现对 <strong>class 文件的加解密</strong>，同时 4ye 也是间接了解到这个 阿里的 <strong>pandora</strong> 以及解锁了新的源码篇章 <strong>spring boot devtools</strong> ，很有意思的，争取早点分享出来 嘿嘿 😋</p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>通过该项目来实现这个 AOP 插件，学会了一项装 13 技能 哈哈哈</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210917230508134.png\" alt=\"image-20210917230508134\" /></p>\n<h3 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>本文就分享到这里啦🐖</p>\n<p>仓库地址 👇  （<strong>感谢每一颗 star ！</strong>）</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0phdmE0eWUvc3ByaW5nYm9vdC1kZW1vLTR5ZQ==\">https://github.com/Java4ye/springboot-demo-4ye</span></p>\n<blockquote>\n<p>喜欢的话可以 <strong>关注</strong> 并 <strong>星标</strong> 下公众号 <strong>Java4ye</strong> 支持下 <strong>4ye</strong> 呀😝，这样就可以第一时间收到更文消息啦🐷</p>\n</blockquote>\n<p><strong>我是 4ye 咱们下期应该…… 很快再见！！</strong> 😆</p>\n",
            "tags": [
                "Spring家族"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/c00c3fb.html",
            "url": "https://www.java4ye.cn/posts/c00c3fb.html",
            "title": "这5个GitHub项目+3个网站，助你一飞冲天！",
            "date_published": "2022-01-16T15:30:57.029Z",
            "content_html": "<p>小伙伴们周末好呀，这次来更新一波学习资源啦～👍</p>\n<p>之前推荐过一些书，这次我们就来看看 <strong>4ye</strong> 平时常关顾的一些学习网站叭！😋</p>\n<p>（同时会更新在菜单栏的 <strong>宝藏资源</strong> 中，方便查找）</p>\n<h3 id=\"资源一览\"><a class=\"anchor\" href=\"#资源一览\">#</a> 资源一览</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807235820378.png\" alt=\"image-20210807235820378\" /></p>\n<h3 id=\"cyc2018-cs-notes\"><a class=\"anchor\" href=\"#cyc2018-cs-notes\">#</a> CyC2018 / CS-Notes</h3>\n<p>高达 <strong>136K</strong> star 的项目！😄</p>\n<blockquote>\n<p>📚 技术面试必备基础知识、Leetcode、计算机操作系统、计算机网络、系统设计</p>\n</blockquote>\n<h4 id=\"概览图\"><a class=\"anchor\" href=\"#概览图\">#</a> 概览图</h4>\n<p>地址👉  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0N5QzIwMTgvQ1MtTm90ZXM=\">https://github.com/CyC2018/CS-Notes</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807210235663.png\" alt=\"image-20210807210235663\" /></p>\n<h4 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h4>\n<ul>\n<li>分类清晰 ，技术齐全</li>\n<li>算法文章较多</li>\n</ul>\n<hr />\n<h3 id=\"snailclimb-javaguide\"><a class=\"anchor\" href=\"#snailclimb-javaguide\">#</a> Snailclimb / JavaGuide</h3>\n<p>Guide 哥的，高达 <strong>109k</strong> star ！😄</p>\n<blockquote>\n<p>「Java 学习 + 面试指南」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide！</p>\n</blockquote>\n<h4 id=\"概览图-2\"><a class=\"anchor\" href=\"#概览图-2\">#</a> 概览图</h4>\n<p>地址 👉  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1NuYWlsY2xpbWIvSmF2YUd1aWRl\">https://github.com/Snailclimb/JavaGuide</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0N5QzIwMTgvQ1MtTm90ZXM=\"></span></p>\n<p>推荐国内地址👇（<strong>在线文档</strong>）</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zbmFpbGNsaW1iLmdpdGVlLmlvL2phdmFndWlkZS8jLw==\">https://snailclimb.gitee.io/javaguide/#/</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807213513537.png\" alt=\"image-20210807213513537\" /></p>\n<h4 id=\"特点-2\"><a class=\"anchor\" href=\"#特点-2\">#</a> 特点</h4>\n<ul>\n<li>针对性比较强，主要是  <code>Java</code>  以及常见的一些技术</li>\n<li>基础，进阶</li>\n<li>面试</li>\n</ul>\n<p>如果你不知道怎么复习，打开网站文档看看目录就能很快明白了 😄</p>\n<hr />\n<h3 id=\"macrozheng-mall\"><a class=\"anchor\" href=\"#macrozheng-mall\">#</a> macrozheng / mall</h3>\n<p>一个超级棒的电商项目！高达 <strong>51.6k</strong> star ！😄</p>\n<p>而且还有两个配套的项目！太顶了！👍</p>\n<ul>\n<li><strong>mall 学习教程</strong></li>\n<li><strong>微服务版</strong></li>\n</ul>\n<blockquote>\n<p>mall 项目是一套电商系统，包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现，采用 Docker 容器化部署。 前台商城系统包含首页门户、商品推荐、商品搜索、商品展示、购物车、订单流程、会员中心、客户服务、帮助中心等模块。 后台管理系统包含商品管理、订单管理、会员管理、促销管理、运营管理、内容管理、统计报表、财务管理、权限管理、设置等模块。</p>\n</blockquote>\n<h4 id=\"概览图-3\"><a class=\"anchor\" href=\"#概览图-3\">#</a> 概览图</h4>\n<p>地址都在这了👇</p>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5tYWNyb3poZW5nLmNvbS8jL1JFQURNRQ==\">http://www.macrozheng.com/#/README</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hY3JvemhlbmcvbWFsbC1sZWFybmluZw==\">https://github.com/macrozheng/mall-learning</span> （配套的学习教程）</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hY3JvemhlbmcvbWFsbC1zd2FybQ==\">https://github.com/macrozheng/mall-swarm</span> (微服务版)</p>\n</li>\n</ul>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807223251628.png\" alt=\"image-20210807223251628\" /></p>\n<h4 id=\"特点-3\"><a class=\"anchor\" href=\"#特点-3\">#</a> 特点</h4>\n<ul>\n<li><strong>超赞的学习项目！</strong></li>\n<li><strong>专业</strong>，<strong>齐全</strong></li>\n</ul>\n<p>如果你想找项目练练手的话，这是一个非常不错的选择～从单体到微服务，都给你安排得明明白白的了，而且可以在线体验，有专门的教程！👍👍</p>\n<hr />\n<h3 id=\"doocs-advanced-java\"><a class=\"anchor\" href=\"#doocs-advanced-java\">#</a> doocs / advanced-java</h3>\n<p>这是一个开源组织  <code>doocs</code>  ， 哈哈 我加了好久了，还没贡献过（尴尬😅）</p>\n<p>这里只是列举了其中一个项目，还有其他好几个非常顶的，包括  <code>JVM</code>  和 <strong>框架源码</strong> ，算法，书籍等👍👍</p>\n<blockquote>\n<p>Core Interview Questions &amp; Answers For Experienced Java (Backend) Developers | 互联网 Java 工程师进阶知识完全扫盲：涵盖高并发、分布式、高可用、微服务、海量数据处理等领域知识</p>\n</blockquote>\n<h4 id=\"概览图-4\"><a class=\"anchor\" href=\"#概览图-4\">#</a> 概览图</h4>\n<p>有这么多非常顶的项目！</p>\n<p>地址 👉   <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Rvb2Nz\">https://github.com/doocs</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807225219109.png\" alt=\"image-20210807225219109\" /></p>\n<p>其中一个在线文档</p>\n<p>地址 👉  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hZGphdmEubmV0bGlmeS5hcHAvIy8/aWQ9JUU0JUJBJTkyJUU4JTgxJTk0JUU3JUJEJTkxLWphdmEtJUU1JUI3JUE1JUU3JUE4JThCJUU1JUI4JTg4JUU4JUJGJTlCJUU5JTk4JUI2JUU3JTlGJUE1JUU4JUFGJTg2JUU1JUFFJThDJUU1JTg1JUE4JUU2JTg5JUFCJUU3JTlCJUIy\">https://adjava.netlify.app/#/?id=%e4%ba%92%e8%81%94%e7%bd%91-java-%e5%b7%a5%e7%a8%8b%e5%b8%88%e8%bf%9b%e9%98%b6%e7%9f%a5%e8%af%86%e5%ae%8c%e5%85%a8%e6%89%ab%e7%9b%b2</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807225300343.png\" alt=\"image-20210807225300343\" /></p>\n<h4 id=\"特点-4\"><a class=\"anchor\" href=\"#特点-4\">#</a> 特点</h4>\n<ul>\n<li>超级多优秀的文章 👍</li>\n<li>有源码分析专区！ 👍</li>\n<li>进阶大厂必看系列 👍</li>\n</ul>\n<p>反正我把它当作进阶修炼的地方 哈哈哈哈 😄</p>\n<hr />\n<h3 id=\"shishan100-java-interview-advanced\"><a class=\"anchor\" href=\"#shishan100-java-interview-advanced\">#</a> shishan100 / Java-Interview-Advanced</h3>\n<p>这个就不用过多介绍了 哈哈，从上面  <code>doocs</code>  仓库就知道这里的文章质量得多顶 ，而且确确实实帮我打开了眼界！😋</p>\n<blockquote>\n<p>中华石杉 -- 互联网 Java 进阶面试训练营</p>\n</blockquote>\n<h4 id=\"概览图-5\"><a class=\"anchor\" href=\"#概览图-5\">#</a> 概览图</h4>\n<p>地址 👉  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NoaXNoYW4xMDAvSmF2YS1JbnRlcnZpZXctQWR2YW5jZWQ=\">https://github.com/shishan100/Java-Interview-Advanced</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807230930031.png\" alt=\"image-20210807230930031\" /></p>\n<h4 id=\"特点-5\"><a class=\"anchor\" href=\"#特点-5\">#</a> 特点</h4>\n<ul>\n<li>进阶大厂必看系列 👍</li>\n<li>主要是 <strong>高并发</strong> 类的文章👍</li>\n<li>业内很有名气！</li>\n</ul>\n<hr />\n<h3 id=\"并发编程网\"><a class=\"anchor\" href=\"#并发编程网\">#</a> 并发编程网</h3>\n<p>说到并发，就不得不提下这个网站了，里面的内容几乎都是关于并发的，是提升并发能力的好地方 😝</p>\n<p>就是网站的主题有点老了，不知道为啥看着就像是用  <code>wordpress</code>  搭建的😂</p>\n<h4 id=\"概览图-6\"><a class=\"anchor\" href=\"#概览图-6\">#</a> 概览图</h4>\n<p>地址 👉  <span class=\"exturl\" data-url=\"aHR0cDovL2lmZXZlLmNvbS8=\">http://ifeve.com/</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807231718781.png\" alt=\"image-20210807231718781\" /></p>\n<h4 id=\"特点-6\"><a class=\"anchor\" href=\"#特点-6\">#</a> 特点</h4>\n<ul>\n<li>并发专区 😄</li>\n</ul>\n<p>高质量的并发文章，如果你对并发有啥不懂的话，这里肯定是个不错的选择！</p>\n<p>而且还有部分翻译了国外大佬的文章，能很好地解惑😄</p>\n<h3 id=\"阿里云知行动手实验室\"><a class=\"anchor\" href=\"#阿里云知行动手实验室\">#</a> 阿里云知行动手实验室</h3>\n<p>阿里的技术那没得说 哈哈</p>\n<p>而且这个真的是超级赞，以前我们还要自己装环境啥的，跟着文档或者视频，一步步来，现在好了，直接云端给你安排了，直接在这里练习！！</p>\n<p>那话咋说来的 ， 就吹爆！ 哈哈哈</p>\n<h4 id=\"概览图-7\"><a class=\"anchor\" href=\"#概览图-7\">#</a> 概览图</h4>\n<p>地址 👉  [<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFydC5hbGl5dW4uY29tLw==\">https://start.aliyun.com</span>](<span class=\"exturl\" data-url=\"aHR0cDovL2lmZXZlLmNvbS8=\">http://ifeve.com/</span>)</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807232644268.png\" alt=\"image-20210807232644268\" /></p>\n<p>比如我选这个 <strong>Arthas 基础教程</strong></p>\n<p>直接左边文档，右边  <code>shell</code>  窗口，这真的太方便了！！</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807233007404.png\" alt=\"image-20210807233007404\" /></p>\n<h4 id=\"特点-7\"><a class=\"anchor\" href=\"#特点-7\">#</a> 特点</h4>\n<ul>\n<li>方便！！快捷！！</li>\n</ul>\n<p>真的很赞，直接边看文档边敲代码，不用捣鼓环境先了！👍</p>\n<hr />\n<h3 id=\"力扣\"><a class=\"anchor\" href=\"#力扣\">#</a> 力扣</h3>\n<p>这肯定得推荐呀，因为 <strong>数据结构和算法</strong> 真的特别重要，特别是越低层的开发，越重要！😄</p>\n<p>crud 太无聊了，平时没事可以刷刷题锻炼下 哈哈 有种做数学题的感觉 还是很有意思的😝</p>\n<h4 id=\"概览图-8\"><a class=\"anchor\" href=\"#概览图-8\">#</a> 概览图</h4>\n<p>地址 👉  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXNldC9hbGw=\">https://leetcode-cn.com/problemset/all</span></p>\n<p>可以看到这里有非常多<strong>专业的讲解</strong>！，<strong>超级棒 (๑・̀ㅂ・́)و✧</strong></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807234151768.png\" alt=\"image-20210807234151768\" /></p>\n<h4 id=\"特点-8\"><a class=\"anchor\" href=\"#特点-8\">#</a> 特点</h4>\n<ul>\n<li>算法</li>\n</ul>\n<p>有很多优秀的解析！现在不用担心不会做了 哈哈😄</p>\n<hr />\n<h3 id=\"凑个数\"><a class=\"anchor\" href=\"#凑个数\">#</a> 凑个数🤣</h3>\n<p>自己的仓库 <strong>(lll￢ω￢)</strong> ，就  <code>GitHub</code>  主页好看些了 哈哈哈</p>\n<blockquote>\n<p>不定期推荐优秀的学习资源，帮助你快速成长！共同进步，多摸鱼 哈哈哈</p>\n</blockquote>\n<p>地址 👉  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0phdmE0eWU=\">https://github.com/Java4ye</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807234617130.png\" alt=\"image-20210807234617130\" /></p>\n<p>额，会不定期上传一些项目啦，哈哈 有时间再好好折腾下🐷</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210807235451336.png\" alt=\"image-20210807235451336\" /></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>老规矩，画个图叭😝</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210808002110587.png\" alt=\"image-20210808002110587\" /></p>\n<h4 id=\"别只收藏吃灰啦\"><a class=\"anchor\" href=\"#别只收藏吃灰啦\">#</a> 别只收藏吃灰啦！</h4>\n<p>这话也是对我自己说  哈哈哈哈</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210808091424597.png\" alt=\"image-20210808091424597\" /></p>\n<h3 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>欢迎小伙伴们来一起探讨问题～</p>\n<blockquote>\n<p>如果你觉得本篇文章还不错的话，那<strong>拜托再点点赞</strong>支持一下呀😝</p>\n<p><strong>让我们开始这一场意外的相遇吧！~</strong></p>\n<p>欢迎留言！谢谢支持！ヾ (≧▽≦*) o 冲冲冲！！</p>\n<p><strong>我是 4ye 咱们下期应该…… 很快再见！！</strong> 😆</p>\n</blockquote>\n",
            "tags": [
                "学习资源"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/bed74b7c.html",
            "url": "https://www.java4ye.cn/posts/bed74b7c.html",
            "title": "MySQL各大版本新特性一览",
            "date_published": "2022-01-16T15:26:05.223Z",
            "content_html": "<p>嘀嘀嘀～理想每天都更文，现实几天一篇文，横批： 文呢？</p>\n<p>哈哈哈 无奈呀</p>\n<p>这是第二次为小伙伴写文章啦！ 上一次是恋爱的味道，这次却是学习的芳香 哈哈😋</p>\n<p>这次应小伙伴的要求，来总结下这个  <code>MySQL</code>  主要版本的新特性</p>\n<p>那么，我们一起往下看看叭～</p>\n<p>我们直接来到官网查看👇</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy8=\">MySQL 官方文档</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210605095506697.png\" alt=\"image-20210605095506697\" /></p>\n<p>可以看到这里有三个版本 <strong>5.6 ， 5.7 ， 8.0</strong></p>\n<p>额 既然 <strong>5.5</strong> 找不到了，那我们就记住他的主要特点：</p>\n<ol>\n<li><code>innodb</code>  就是从 <strong>5.5</strong> 这个版本开始成为 <strong>默认的存储引擎</strong> 😄</li>\n<li>引入了真  <code>UTF8</code>  ——&gt;  <code>utf8mb4</code></li>\n</ol>\n<p>为什么只有两点呢？ 因为 4ye 的脑瓜子就只有这两点 哈哈哈</p>\n<p><img data-src=\"http://img.ryzeyang.top/v1zwq\" alt=\"img\" /></p>\n<p>下面开始 <strong>5.6</strong> 的探索～😄</p>\n<h2 id=\"56\"><a class=\"anchor\" href=\"#56\">#</a> 5.6</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWxub3Rlcy9teXNxbC81LjYvZW4v\">MySQL 5.6 Release Notes</span></p>\n<p>打开上面的链接👆 ， 如下图，这里在介绍这个新特性</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210608215611924.png\" alt=\"image-20210608215611924\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS42L2VuL215c3FsLW51dHNoZWxsLmh0bWw=\">What Is New in MySQL 5.6</span></p>\n<p>剩下的就不多赘述啦，简单摘录了一些，需要完整资料的小伙伴请移步到官网查看～😄 （建议去翻一翻 ，毕竟除了新特性，还有  <code>innodb</code>  整体的介绍！）</p>\n<p><img data-src=\"http://img.ryzeyang.top/WzNzk\" alt=\"img\" /></p>\n<h3 id=\"innodb\"><a class=\"anchor\" href=\"#innodb\">#</a> innodb</h3>\n<p>这里对存储引擎  <code>innodb</code>  做了下面的增强 🐷</p>\n<ol>\n<li>\n<p>可以创建 <strong>全文索引</strong></p>\n</li>\n<li>\n<p>可以修改未压缩表的  <code>InnoDB</code>  页大小设置为 <strong>8KB</strong> 或 <strong>4KB</strong> ，默认是 <strong>16KB</strong></p>\n<p>注意这里只有这三个参数<strong>有效</strong>（4 ，8 ，16） 。</p>\n<p><strong>参数</strong>：  <code>innodb_page_size</code></p>\n</li>\n<li>\n<p><code>InnoDB</code>  的  <code>redo log</code>  文件可存储的最大值从 <strong>4g</strong> 升到 <strong>512g</strong> ,</p>\n<p><strong>参数</strong>：  <code>innodb_log_file_size</code></p>\n</li>\n<li>\n<p>可以设置  <code>innodb</code>  压缩级别 ， 级别等级为 0-9</p>\n<p><strong>参数</strong>： <a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_compression_level\"> <code>innodb_compression_level</code> </a></p>\n</li>\n<li>\n<p><code>Innodb</code>  将  <code>flush</code>  刷盘操作从主线程移动到其他线程</p>\n</li>\n<li>\n<p>默认用独立的表空间  <code>ibd</code></p>\n</li>\n<li>\n<p><code>Undo Log</code>  可以保存在独立的表空间</p>\n</li>\n</ol>\n<h3 id=\"partitioning\"><a class=\"anchor\" href=\"#partitioning\">#</a> Partitioning</h3>\n<p>这里对分区做了下面的加强 🐖</p>\n<ol>\n<li>\n<p>最大分区数量增加到 <strong>8192</strong></p>\n</li>\n<li>\n<p>支持显示分区选择</p>\n<p>比如：  <code>SELECT * FROM t PARTITION (p0, p1) WHERE c &lt; 5</code></p>\n</li>\n</ol>\n<h3 id=\"mysql-ndb-cluster\"><a class=\"anchor\" href=\"#mysql-ndb-cluster\">#</a> MySQL NDB Cluster</h3>\n<p>Mysql 集群，在这个版本作为独立的产品发布</p>\n<p>注意存储引擎不是默认的  <code>innodb</code>  ，而是  <code>NDB</code></p>\n<p><img data-src=\"http://img.ryzeyang.top/cluster-components-1.png\" alt=\"In this cluster, three MySQL servers (mysqld program) are SQL nodes that provide access to four data nodes (ndbd program) that store data. The SQL nodes and data nodes are under the control of an NDB management server (ndb_mgmd program). Various clients and APIs can interact with the SQL nodes - the mysql client, the MySQL C API, PHP, Connector/J, and Connector/NET. Custom clients can also be created using the NDB API to interact with the data nodes or the NDB management server. The NDB management client (ndb_mgm program) interacts with the NDB management server.\" /></p>\n<h3 id=\"replication-and-logging\"><a class=\"anchor\" href=\"#replication-and-logging\">#</a> Replication and logging</h3>\n<p>复制和日志记录</p>\n<ol>\n<li>\n<p>可以从远程服务器读取  <code>binlog</code></p>\n<p><strong>参数</strong>：</p>\n<p><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqlbinlog.html#option_mysqlbinlog_read-from-remote-server\"> <code>--read-from-remote-server</code> </a>,  <code>-R</code>  ；</p>\n<p><a href=\"https://dev.mysql.com/doc/refman/5.6/en/mysqlbinlog.html#option_mysqlbinlog_raw\"> <code>--raw</code> </a></p>\n</li>\n<li>\n<p>延迟复制</p>\n<p><strong>参数</strong>： <a href=\"https://dev.mysql.com/doc/refman/5.6/en/change-master-to.html\"> <code>CHANGE MASTER TO</code> </a></p>\n</li>\n</ol>\n<h3 id=\"optimizer-enhancements\"><a class=\"anchor\" href=\"#optimizer-enhancements\">#</a> Optimizer enhancements</h3>\n<p>优化器增强</p>\n<ol>\n<li>\n<p>就是在这里开始的，我们可以用  <code>EXPLAIN</code>  来查看  <code>DELETE</code> ， <code>INSERT</code> ， <code>REPLACE</code> ， <code>UPDATE</code>  等  <code>DML</code>  操作的执行计划。 在这之前，它只支持  <code>SELECT</code>  操作。</p>\n</li>\n<li>\n<p>优化子查询</p>\n</li>\n<li>\n<p>主机缓存</p>\n</li>\n</ol>\n<h3 id=\"configuration-changes\"><a class=\"anchor\" href=\"#configuration-changes\">#</a> Configuration Changes</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_back_log\"> <code>back_log</code> </a></th>\n<th>50</th>\n<th>Autosized using <a href=\"https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_max_connections\"> <code>max_connections</code> </a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/replication-options-binary-log.html#sysvar_binlog_checksum\"> <code>binlog_checksum</code> </a></td>\n<td><code>NONE</code></td>\n<td><code>CRC32</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/replication-options-binary-log.html#option_mysqld_binlog-row-event-max-size\"> <code>--binlog-row-event-max-size</code> </a></td>\n<td>1024</td>\n<td>8192</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_flush_time\"> <code>flush_time</code> </a></td>\n<td>1800 (on Windows)</td>\n<td>0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_autoextend_increment\"> <code>innodb_autoextend_increment</code> </a></td>\n<td>8</td>\n<td>64</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_buffer_pool_instances\"> <code>innodb_buffer_pool_instances</code> </a></td>\n<td>1</td>\n<td>8 (platform dependent)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_checksum_algorithm\"> <code>innodb_checksum_algorithm</code> </a></td>\n<td><code>INNODB</code></td>\n<td><code>CRC32 (changed back to INNODB in MySQL 5.6.7)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_concurrency_tickets\"> <code>innodb_concurrency_tickets</code> </a></td>\n<td>500</td>\n<td>5000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_file_per_table\"> <code>innodb_file_per_table</code> </a></td>\n<td><code>0</code></td>\n<td><code>1</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_old_blocks_time\"> <code>innodb_old_blocks_time</code> </a></td>\n<td>0</td>\n<td>1000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_open_files\"> <code>innodb_open_files</code> </a></td>\n<td>300</td>\n<td>Autosized using <a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_file_per_table\"> <code>innodb_file_per_table</code> </a>,<a href=\"https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_table_open_cache\"> <code>table_open_cache</code> </a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_stats_on_metadata\"> <code>innodb_stats_on_metadata</code> </a></td>\n<td><code>ON</code></td>\n<td><code>OFF</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_join_buffer_size\"> <code>join_buffer_size</code> </a></td>\n<td>128KB</td>\n<td>256KB</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_max_allowed_packet\"> <code>max_allowed_packet</code> </a></td>\n<td>1MB</td>\n<td>4MB</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_max_connect_errors\"> <code>max_connect_errors</code> </a></td>\n<td>10</td>\n<td>100</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/replication-options-replica.html#sysvar_sync_master_info\"> <code>sync_master_info</code> </a></td>\n<td>0</td>\n<td>10000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/replication-options-replica.html#sysvar_sync_relay_log\"> <code>sync_relay_log</code> </a></td>\n<td>0</td>\n<td>10000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://dev.mysql.com/doc/refman/5.6/en/replication-options-replica.html#sysvar_sync_relay_log_info\"> <code>sync_relay_log_info</code> </a></td>\n<td>0</td>\n<td>10000</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"57\"><a class=\"anchor\" href=\"#57\">#</a> 5.7</h2>\n<h3 id=\"innodb-2\"><a class=\"anchor\" href=\"#innodb-2\">#</a> innodb</h3>\n<ol>\n<li>\n<p>增加  <code>DATA_GEOMETRY</code>  类型来支持空间数据类型，以前是用  <code>blob</code></p>\n</li>\n<li>\n<p><code>innodb</code>  的缓存池  <code>dump</code>  和  <code>load</code>  加强 ，允许按百分比去存储缓存池中的页面</p>\n<p><strong>参数</strong>:  <code>innodb_buffer_pool_dump_pct</code>  默认值是 25</p>\n</li>\n<li>\n<p><code>InnoDB</code>  增加了对全文解析器插件的支持。</p>\n</li>\n<li>\n<p>支持多线程来刷新缓冲池中的<strong>脏页面</strong></p>\n<blockquote>\n<p>内存数据页跟磁盘上数据页内容不一致，将内存页称为脏页</p>\n</blockquote>\n</li>\n<li>\n<p>由于文件系统  <code>The Fusion-io Non-Volatile Memory (NVM) </code>   在  <code>Linux</code>   上提供了原子操作，这导致  <code>innodb</code>  的  <code>doublewrite</code>  变得冗余，所以在该文件系统上，会自动关闭  <code>doublewrite</code></p>\n</li>\n<li>\n<p><code>innodb_buffer_pool_size</code>  参数是动态的，允许您在<strong>不重启服务器</strong>的情况下<strong>调整缓冲池的大小</strong>。</p>\n</li>\n<li>\n<p><code>InnoDB</code>  支持使用  <code>spatial</code>  索引来索引<strong>空间数据</strong>类型</p>\n</li>\n<li>\n<p>支持本地分区</p>\n</li>\n<li>\n<p>默认行格式由  <code>compact</code>  改为  <code>DYNAMIC</code></p>\n</li>\n</ol>\n<h3 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h3>\n<p><strong>一。支持 JSON</strong></p>\n<blockquote>\n<p>从 MySQL 5.7.8 开始，MySQL 支持原生 JSON 类型。</p>\n</blockquote>\n<p>震惊（居然还有这回事🐖）</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2ltZy5yeXpleWFuZy50b3AvaW1hZ2UtMjAyMTA2MDgwODMxMDQyNDQucG5n\">http://img.ryzeyang.top/image-20210608083104244.png</span>&quot; alt=&quot;image-20210608083104244&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>二. <a href=\"http://www.searchdoc.cn/rdbms/mysql/dev.mysql.com/doc/refman/5.7/en/explain.com.coder114.cn.html\"> <code>EXPLAIN</code> </a> 可以用来获取在命名连接中执行的可解释语句的<strong>执行计划</strong></p>\n<pre><code class=\"language-mysql\">EXPLAIN [options] FOR CONNECTION connection_id;\n</code></pre>\n<p>三。允许在某个时间点，有多个触发事件</p>\n<p><strong>之前</strong>：对于<strong>触发器</strong>事件 (INSERT、UPDATE、DELETE) 和操作时间 (BEFORE、AFTER) 的组合，一个表最多只能有一个触发器，即在某个触发时间点只能有一个触发事件</p>\n<p>四. <strong>多源复制</strong></p>\n<p>可将多个服务器的内容备份到一个服务器</p>\n<h2 id=\"80\"><a class=\"anchor\" href=\"#80\">#</a> 8.0</h2>\n<p>突然发现每次更新都在加强这个  <code>innnodb</code>  😄</p>\n<h3 id=\"innodb-3\"><a class=\"anchor\" href=\"#innodb-3\">#</a> innodb</h3>\n<ol>\n<li>\n<p>可以通过 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/information-schema-innodb-cached-indexes-table.html\"> <code>INNODB_CACHED_INDEXES</code> </a> 查看每个索引缓存在  <code>InnoDB</code>  缓冲池中的索引页数量</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210608213614660.png\" alt=\"image-20210608213614660\" /></p>\n</li>\n<li>\n<p>可以使用一个新的动态变量  <code>innodb_deadlock_detect</code>  来禁用死锁检测</p>\n</li>\n<li>\n<p><code>redo log</code>  优化，可以并发地写到日志缓冲区</p>\n</li>\n<li>\n<p>日志缓冲区的大小可以通过  <code>innodb_log_buffer_size</code>  动态调整</p>\n</li>\n<li>\n<p><code>undo log</code>  不再存放在系统表中</p>\n</li>\n<li>\n<p>支持原子性的  <code>DDL</code>  ， 确保操作完全成功或者失败</p>\n</li>\n<li>\n<p>从  <code>MySQL 8.0.20</code>  开始， <code>doublewrite</code>  缓冲区存储在  <code>doublewrite</code>  文件中</p>\n</li>\n</ol>\n<h3 id=\"其他-2\"><a class=\"anchor\" href=\"#其他-2\">#</a> 其他</h3>\n<p>一.  <code>Json</code>  增强</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210608213650740.png\" alt=\"image-20210608213650740\" /></p>\n<p>二。默认值</p>\n<p>可以为这些类型增加默认值  <code>BLOB</code> 、 <code>TEXT</code> 、 <code>GEOMETRY</code>  、  <code>JSON</code></p>\n<p>三。优化器增强</p>\n<ul>\n<li>\n<p>支持隐藏索引</p>\n<pre><code class=\"language-mysql\">ALTER TABLE t1 ALTER INDEX i_idx INVISIBLE;\nALTER TABLE t1 ALTER INDEX i_idx VISIBLE;\n</code></pre>\n</li>\n<li>\n<p>索引支持降序排序</p>\n</li>\n</ul>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210608213517588.png\" alt=\"image-20210608213517588\" /></p>\n<p>四。支持窗口函数</p>\n<p>五。支持正则表达式</p>\n<p>（还有这操作的 🐂）</p>\n<p>六。备份锁</p>\n<p>允许在线备份时使用  <code>DML</code>  语句</p>\n<hr />\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>看完这篇文章后，不知道小伙伴们会对哪个更新印象最深呢？😝</p>\n<p>比如 <strong>4ye</strong> 对这几点有点小印象～</p>\n<ol>\n<li><strong>5.6</strong> 的<strong>全文索引</strong>， <code>innodb</code>  页的大小调整（4，8，16 KB）三档，<strong>独立表空间</strong>还有<strong>执行计划</strong>的加强，不仅仅 <code>select</code> . 以及结尾那么大一个表格的参数</li>\n<li><strong>5.7</strong> 的  <code>JSON</code> ，<strong>空间数据类型</strong>  <code>DATA_GEOMETRY</code>  ，以及<strong>空间索引</strong>  <code>spatial</code>  的出现，还有 <code>doublewrite</code>  ，<strong>脏页面</strong>的优化 和 行格式  <code>DYNAMIC</code>  的出现（以前  <code>compact</code>  )</li>\n<li><strong>8.0</strong> 的<strong>正则</strong>，<strong>隐藏索引</strong>以及它的<strong>索引排序</strong></li>\n</ol>\n<p>对了 还有，开头的那两句～</p>\n<blockquote>\n<ol>\n<li><code>innodb</code>  就是从 <strong>5.5</strong> 这个版本开始成为 <strong>默认的存储引擎</strong> 😄</li>\n<li>引入了真  <code>UTF8</code>  ——&gt;  <code>utf8mb4</code></li>\n</ol>\n</blockquote>\n<p><img data-src=\"http://img.ryzeyang.top/bjgZj\" alt=\"img\" /></p>\n<h2 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>欢迎小伙伴们来一起探讨问题～</p>\n<blockquote>\n<p>如果你觉得本篇文章还不错的话，那拜托再点点赞支持一下呀😝</p>\n<p><strong>让我们开始这一场意外的相遇吧！~</strong></p>\n<p>欢迎留言！谢谢支持！ヾ (≧▽≦*) o 冲冲冲！！</p>\n<p><strong>我是 4ye 咱们下期很快再见！！</strong></p>\n</blockquote>\n",
            "tags": [
                "DB领域"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/3fdb5d75.html",
            "url": "https://www.java4ye.cn/posts/3fdb5d75.html",
            "title": "ElasticSearch中必须掌握的七个概念",
            "date_published": "2022-01-16T15:21:44.429Z",
            "content_html": "<p>小伙伴们好呀～我是 4ye (・̀ ω・́) y，今天来和大家分享下这个 ElasticSearch 中必须要掌握的几个概念。👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211124230156625.png\" alt=\"image-20211124230156625\" /></p>\n<h3 id=\"整体关系\"><a class=\"anchor\" href=\"#整体关系\">#</a> 整体关系</h3>\n<p>老规矩～先从整体上认识认识他们～😄</p>\n<blockquote>\n<p>每个 Index 由一个或者多个 shard 组成，分布在不同的 node ，document 由 Field 组成，存储在这些 shard 中。</p>\n</blockquote>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211123221816578.png\" alt=\"image-20211123221816578\" /></p>\n<p>先有个大致的印象，下面我们再细讲这些概念～😋</p>\n<h3 id=\"es-vs-关系型数据库\"><a class=\"anchor\" href=\"#es-vs-关系型数据库\">#</a> ES vs 关系型数据库</h3>\n<p>和传统的关系型数据库有这么一种关系 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211112080838065.png\" alt=\"image-20211112080838065\" /></p>\n<h3 id=\"索引-index\"><a class=\"anchor\" href=\"#索引-index\">#</a> 索引 Index</h3>\n<p>没想到，这么一个词，居然有这三层含义 🐷🐖 <sup>(*￣(oo)￣)</sup></p>\n<p>① <strong>名词</strong></p>\n<blockquote>\n<p>Index (Indices，Indexes) 是文档的集合，类似传统的关系型数据库。</p>\n<p><strong>是分片的集合，每个分片相当于 Lucene 中的索引</strong>。</p>\n</blockquote>\n<p>② <strong>动词</strong></p>\n<blockquote>\n<p>索引一个文档，就是存储一个文档到一个索引中以便被检索</p>\n</blockquote>\n<p>③ <strong>数据结构</strong></p>\n<blockquote>\n<p>这里指：<strong>倒排索引</strong> ，就是通过  value ——&gt; Key ，如下👇 通过记录这个词和它所在的文档 ID，<strong>对应 Lucene 中的 segments (分段)</strong></p>\n</blockquote>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211123214903621.png\" alt=\"image-20211123214903621\" /></p>\n<h3 id=\"类型-type\"><a class=\"anchor\" href=\"#类型-type\">#</a> 类型 Type</h3>\n<blockquote>\n<p>这里指的是 文档的类型，而不是字段的类型</p>\n</blockquote>\n<p>先看看以前版本的样子 👇</p>\n<p>以前的 API 是   <code>&#123;index&#125;/&#123;type&#125;/&#123;id&#125;</code>   ，现在是  <code>&#123;index&#125;/_doc/&#123;id&#125;</code>  🐖</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211121171644400.png\" alt=\"image-20211121171644400\" /></p>\n<p><strong>这个 type 从 7.x 开始就被移除了</strong>！ 默认是这个  <code>_doc</code>   （默认类型～，现在 8.x 版本就也不再支持修改这个类型了），  因为这个设计会降低 Lucene 压缩数据的能力，导致数据稀疏。从本质上来看，这个 Type 是对索引进行逻辑分区，使用文档类型  <code>_type</code>  和文档  <code>_id</code>   组成  <code>_uid</code>  ，形成文档的唯一 ID，对索引进行细分～。</p>\n<p>而在 Lucene 中，我们这个字段域在索引中是唯一的，所以原本的字段也会被细分，导致字段域增多的同时，数据的密度也就降低了，压缩效率也就降低了。</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211124081729642.png\" alt=\"image-20211124081729642\" /></p>\n<p><strong>Tip</strong>:  <strong>ElasticSearch</strong>  底层的全文检索是居于 <strong>Lucene</strong> 实现的。</p>\n<p>我们前面也分享过这个 Lucene，地址在这 👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRmo0TThRMU5kdUtRSjhaOUJoNTJjQQ==\">《快速上手搜索引擎的秘密武器 ——Lucene》</span></p>\n<p>移除 Type 的具体原因可以看官网的解释 👇</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9lbGFzdGljc2VhcmNoL3JlZmVyZW5jZS83LjE1L3JlbW92YWwtb2YtdHlwZXMuaHRtbCNyZW1vdmFsLW9mLXR5cGVz\">https://www.elastic.co/guide/en/elasticsearch/reference/7.15/removal-of-types.html#removal-of-types</span></p>\n<h3 id=\"文档-document\"><a class=\"anchor\" href=\"#文档-document\">#</a> 文档 Document</h3>\n<blockquote>\n<p>ElasticSearch 是面向文档的，文档是数据存储和索引的最小单位，是字段的集合 （相当于 Lucene 中的文档） ，在 ElasticSearch 中以序列化 JSON 结构存储，文档结构如下👇，下划线开头的是官方提供的字段，称为 元数据</p>\n</blockquote>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"_index\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"java4ye\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"_type\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"_doc\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"_id\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"_score\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"_source\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token property\">\"user\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">\"id\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"123456789\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token property\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"4ye\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token property\">\"age\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token property\">\"desc\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"nice to meet you 2!\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个文档主要看  <code>_source</code>  字段，里面就是我们上传的文档数据</p>\n<h3 id=\"字段-field\"><a class=\"anchor\" href=\"#字段-field\">#</a> 字段 Field</h3>\n<blockquote>\n<p>是文档中的基本单位，以键值对的形式存在，如 上面的 &quot;_id&quot; : &quot;1001&quot; ，（相当于 Lucene 中的字段）</p>\n</blockquote>\n<p>可以在官网中查看，有这么一些元字段🐖</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211124152050026.png\" alt=\"image-20211124152050026\" /></p>\n<h3 id=\"映射-mapping\"><a class=\"anchor\" href=\"#映射-mapping\">#</a> 映射 Mapping</h3>\n<blockquote>\n<p>用于表示这个字段的数据类型，如 字符串，整数，浮点数，日期等，不指定时会自动创建 （相当于 Lucene 中的字段类型）</p>\n</blockquote>\n<p>如下👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211124151945621.png\" alt=\"image-20211124151945621\" /></p>\n<h3 id=\"节点-node\"><a class=\"anchor\" href=\"#节点-node\">#</a> 节点 node</h3>\n<p>ElasticSearch 是以集群的方式运行的，每个 ElasticSearch 实例就是一个节点。</p>\n<p>而节点有很多种角色 👇，好复杂🙃</p>\n<p>当你没有配置这个 node.roles ，这个节点默认有下面这些角色</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211123074254875.png\" alt=\"image-20211123074254875\" /></p>\n<h4 id=\"主节点-masternode\"><a class=\"anchor\" href=\"#主节点-masternode\">#</a> 主节点 MasterNode</h4>\n<blockquote>\n<p>负责集群节点状态的维护，索引的创建，删除，数据的 rebalance，分片的分配等工作，不负责具体数据的索引和检索</p>\n</blockquote>\n<h4 id=\"数据节点-datanode\"><a class=\"anchor\" href=\"#数据节点-datanode\">#</a> 数据节点 DataNode</h4>\n<blockquote>\n<p>负责集群中数据的写入和检索，属于 IO，内存 和 CPU 密集型操作，需要的计算资源大</p>\n</blockquote>\n<h4 id=\"提取节点-ingestnode\"><a class=\"anchor\" href=\"#提取节点-ingestnode\">#</a> 提取节点 IngestNode</h4>\n<blockquote>\n<p>数据预处理通道，在数据被索引前预先处理文档。</p>\n</blockquote>\n<h4 id=\"协调节点-coordinatingnode\"><a class=\"anchor\" href=\"#协调节点-coordinatingnode\">#</a> 协调节点 CoordinatingNode</h4>\n<blockquote>\n<p>接受客户端请求，然后转发到数据节点，最后将各个节点返回来的数据进行整合。对应着<strong>两个阶段</strong></p>\n<ol>\n<li><strong>分散阶段，协调节点将请求转发到保存数据的数据节点</strong></li>\n<li><strong>收集阶段，协调节点将每个数据节点的结果缩减为单个全局结果集</strong></li>\n</ol>\n</blockquote>\n<h4 id=\"链接\"><a class=\"anchor\" href=\"#链接\">#</a> 链接</h4>\n<p>详情请从这里获取～</p>\n<p>官网地址 ： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9lbGFzdGljc2VhcmNoL3JlZmVyZW5jZS83LjE1L21vZHVsZXMtbm9kZS5odG1s\">https://www.elastic.co/guide/en/elasticsearch/reference/7.15/modules-node.html</span></p>\n<p>或者看看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldC8=\">Elastic 中国社区官方博客</span> 的这篇文章 👇</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldC9hcnRpY2xlL2RldGFpbHMvMTEwOTQ3Mzcy\">https://elasticstack.blog.csdn.net/article/details/110947372</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211124163025361.png\" alt=\"image-20211124163025361\" /></p>\n<h3 id=\"分片-shard-和-副本-replica\"><a class=\"anchor\" href=\"#分片-shard-和-副本-replica\">#</a> 分片 Shard 和 副本 Replica</h3>\n<blockquote>\n<p>Elasticsearch 的 索引是以分片的方式来组织的，每个分片就是 Lucene 中的索引。</p>\n<p>分片分为 <strong>主分片</strong> 和 <strong>副本分片</strong>，默认配置是 每个索引 5 个主分片，每个主分片都有一个副本分片，主分片和它的副本不在一个节点上，主要作用是 <strong>故障转移和负载均衡</strong></p>\n</blockquote>\n<h4 id=\"文档怎么路由到对应的分片上呢\"><a class=\"anchor\" href=\"#文档怎么路由到对应的分片上呢\">#</a> 文档怎么路由到对应的分片上呢？</h4>\n<p>公式如下 👇</p>\n<pre><code>shard = hash(routing) % number_of_primary_shards\n</code></pre>\n<blockquote>\n<p><code>routing</code>  是一个可变值，默认是文档的  <code>_id</code>  ，也可以设置成一个自定义的值。  <code>routing</code>  通过 hash 函数生成一个数字，然后这个数字再除以  <code>number_of_primary_shards</code>  （主分片的数量）后得到 <strong>余数</strong> 。这个分布在  <code>0</code>  到  <code>number_of_primary_shards-1</code>  之间的余数，就是我们所寻求的文档所在分片的位置。</p>\n<p>这就解释了为什么我们要在创建索引的时候就确定好主分片的数量 并且永远不会改变这个数量：因为如果数量变化了，那么所有之前路由的值都会无效，文档也再也找不到了。</p>\n<p>—— 引用 《Elasticsearch: 权威指南 》</p>\n</blockquote>\n<h4 id=\"近实时-nrt\"><a class=\"anchor\" href=\"#近实时-nrt\">#</a> 近实时 NRT</h4>\n<p>这个 近实时 NRT（Near Realtime）是 Elasticsearch 的一大特点，为啥它是近实时的呢～🐖</p>\n<p>原因还是和 Lucene 有关，简单来说，就是 ElasticSearch 在写入文档时，数据会先写入这个内存，然后再写到这个 Lucene 的 Segment 中，<strong>等到写到 Segment 中才可以被搜索到</strong>，此时文档处在文件系统缓存中，后面才会刷到磁盘中的。</p>\n<p>这些都在官网的 <strong>《Elasticsearch: 权威指南 》</strong> 中介绍到～图文并茂！地址👇</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9jbi9lbGFzdGljc2VhcmNoL2d1aWRlL2N1cnJlbnQvaW5kZXguaHRtbA==\">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html</span></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20211124225732491.png\" alt=\"image-20211124225732491\" /></p>\n<h3 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h3>\n<p>本文就分享到这里啦🐖</p>\n<p>强烈建议小伙伴们看看这个 <strong>《Elasticsearch: 权威指南 》</strong> ，了解这个原理！下次有点实质性的干货，再来分享这个 ElasticSearch 叭，现在没啥特别的实战经验，写不出来呀✍ 这个话题先告一段落啦～🐖</p>\n<p>对了，在仓库里有这个 Lucene 的小例子，可以帮助你更快的去了解这个 ElasticSearch 的底层原理～</p>\n<p>👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0phdmE0eWUvc3ByaW5nYm9vdC1kZW1vLTR5ZQ==\">https://github.com/Java4ye/springboot-demo-4ye</span></p>\n<blockquote>\n<p>喜欢的话可以 <strong>点赞 &amp;</strong> <strong>关注</strong> 并 <strong>星标</strong> 下公众号 <strong>Java4ye</strong> 支持下 <strong>4ye</strong> 呀😝，这样就可以第一时间收到更文消息啦🐷</p>\n</blockquote>\n<p><strong>我是 4ye 咱们下期应该…… 很快再见！！</strong> 😆</p>\n",
            "tags": [
                "搜索引擎"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/861d15fc.html",
            "url": "https://www.java4ye.cn/posts/861d15fc.html",
            "title": "16张图解锁Spring的整体脉络",
            "date_published": "2022-01-16T10:34:27.097Z",
            "content_html": "<p>今天来梳理下 <strong>Spring</strong> 的整体脉络啦，为后面的文章做个铺垫～</p>\n<p>后面几篇文章应该会讲讲这些内容啦 😆</p>\n<ol>\n<li>Spring  AOP 插件 🐖  （🕊了好久都忘了 😅）</li>\n<li>分享下  <strong>4ye</strong> 在项目中利用  <strong>AOP + MybatisPlus</strong>   对项目进行重构，优化系统中特殊的日志模块的故事</li>\n<li>Spring <strong>属性注入</strong>，<strong>循环依赖</strong>，<strong>事务</strong> 等这几个比较重要的</li>\n<li>Spring  源码中的要点  <strong>AbstractApplicationContext</strong>  中的 <strong>refresh</strong> 方法里的 12 个方法</li>\n<li>Spring 中的设计模式  等等</li>\n<li>目前就想到这么多啦🐷</li>\n</ol>\n<hr />\n<p>话说咱们一直都在用这个 Spring  ，你们对它的感受是啥呀？还是说说不出来 哈哈</p>\n<p>4ye 的感觉也是零零散散的，而且印象中一直都在用 Springboot ，不用再配置一堆东西呀，管理依赖啥的，方便太多了。</p>\n<p>所以借此机会简单梳理下其中的一些脉络，这样去看源码就有条理多啦，更能知道一些扩展点的使用等😝</p>\n<h3 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h3>\n<p>本文会先大概介绍下这些知识点 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904200622280.png\" alt=\"image-20210904200622280\" /></p>\n<h3 id=\"印象中的-spring\"><a class=\"anchor\" href=\"#印象中的-spring\">#</a> 印象中的 Spring</h3>\n<p>脑海中有这么一条公式：</p>\n<p>👉  IOC  = 工厂模式 + XML + 反射</p>\n<p>👉 而 DI ,  AOP ， <strong>事务</strong> 等也都在  XML  中很直观的表现出来</p>\n<p>虽然我们现在大部分用这个注解来代替，但是原理还是基本一样的🐖</p>\n<p>注解使用起来很方便，但是学习的话，还是建议先通过这个 XML ，毕竟结构性的文档，有层次感，可以留下更深的印象～😄</p>\n<h3 id=\"小小spring\"><a class=\"anchor\" href=\"#小小spring\">#</a> 小小 Spring</h3>\n<p>把 Spring 浓缩一下，就有了这么一点小东西🐖</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210831215104931.png\" alt=\"image-20210831215104931\" /></p>\n<p>想了下，我们用 Spring ，其中最主要的一点，就是用它来帮我们管理，创建这个 Bean 。</p>\n<p>那么先从源头看起  —— Bean 从哪来 (＠_＠😉</p>\n<h3 id=\"bean-解析流程\"><a class=\"anchor\" href=\"#bean-解析流程\">#</a> Bean 解析流程</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210901220458461.png\" alt=\"image-20210901220458461\" /></p>\n<p>如图所示，就是通过 <strong>解析器</strong>，对我们的 XML 文件或者注解进行解析，最后将这些信息封装在  BeanDefinition 类中，并通过 BeanDefinitionRegistry 接口将这些信息 <strong>注册</strong> 起来，放在 beanDefinitionMap 变量中，key : beanName , value ：BeanDefinition 。</p>\n<p>简单看看  BeanDefinition 中的属性叭</p>\n<h3 id=\"beandefinition\"><a class=\"anchor\" href=\"#beandefinition\">#</a> BeanDefinition</h3>\n<ul>\n<li>\n<p>beanClass  :  bean 的类型 ，实例化时用的 🐖</p>\n</li>\n<li>\n<p>scope  :  作用范围有 singleton，prototype</p>\n</li>\n<li>\n<p>isLazy   :  <strong>懒加载</strong> ，true  的话 会在 getBean 时生成，而且 scope 的 prototype 无效，false 在 Spring 启动过程中直接生成</p>\n</li>\n<li>\n<p>initMethodName  :  初始化方法，当然是初始化时调用🐖</p>\n</li>\n<li>\n<p>primary  :  主要的，有多个 Bean 时使用它</p>\n</li>\n<li>\n<p>dependsOn  :   依赖的 Bean，必须等依赖 Bean 创建好才可以创建</p>\n</li>\n</ul>\n<blockquote>\n<p>PS: @Component ，@Bean , &lt;bean/&gt; 都会被解析成 BeanDefinition</p>\n</blockquote>\n<h3 id=\"反射\"><a class=\"anchor\" href=\"#反射\">#</a> 反射</h3>\n<p>有了原料后呢，咋们再来看看这个 <strong>工厂</strong> BeanFactory</p>\n<p>先简单想一想这个工厂要怎么创建这个 Bean 呢？</p>\n<p>没错，肯定就是这个 <strong>反射</strong> 啦 😄</p>\n<p>那么，结合我们从原料中获取的重要属性之一的 beanClass ，我们可以画出这么一张图 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210901221544464.png\" alt=\"image-20210901221544464\" /></p>\n<p>那么我们再来看看这个 BeanFactory 叭 😄</p>\n<h3 id=\"beanfactory\"><a class=\"anchor\" href=\"#beanfactory\">#</a> BeanFactory</h3>\n<p>先来看看 作为 IOC 容器的<strong>根接口</strong> 的 BeanFactory  提供了什么方法吧👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904162844126.png\" alt=\"image-20210904162844126\" /></p>\n<p>主要是这个 getBean 方法，以及 <strong>别名获取</strong>，<strong>类型获取</strong> 方法和其他一些判断方法如 ：<strong>单例</strong>，<strong>多例</strong>，<strong>类型匹配</strong>，<strong>包含 bean</strong></p>\n<p>我们来简单看看它的子接口都有哪些叭～😄</p>\n<p>这里分享个小技巧叭🐖</p>\n<p>看源码的时候，一般就直接看这个<strong>默认</strong>接口 如这里的 DefaultListableBeanFactory</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904161436139.png\" alt=\"image-20210904161436139\" /></p>\n<p>基本上看个类名就知道大概作用了，那么先对号入座下👇</p>\n<p><strong>ListableBeanFactory</strong></p>\n<blockquote>\n<p>👉 遍历 bean</p>\n</blockquote>\n<p><strong>HierarchicalBeanFactory</strong></p>\n<blockquote>\n<p>👉  提供 父子关系，可以获取上一级的 BeanFactory</p>\n</blockquote>\n<p><strong>ConfigurableBeanFactory</strong></p>\n<blockquote>\n<p>👉  实现了 SingletonBeanRegistry ，主要是 单例 Bean 的注册，生成</p>\n</blockquote>\n<p><strong>AutowireCapableBeanFactory</strong></p>\n<blockquote>\n<p>👉  和自动装配有关的</p>\n</blockquote>\n<p><strong>AbstractBeanFactory</strong></p>\n<blockquote>\n<p>👉  单例缓存，以及 FactoryBean 相关的</p>\n</blockquote>\n<p><strong>ConfigurableListableBeanFactory</strong></p>\n<blockquote>\n<p>👉  预实例化单例 Bean，分析，修改 BeanDefinition</p>\n</blockquote>\n<p><strong>AbstractAutowireCapableBeanFactory</strong></p>\n<blockquote>\n<p>👉 创建 Bean ，属性注入，实例化，调用初始化方法 等等</p>\n</blockquote>\n<p><strong>DefaultListableBeanFactory</strong></p>\n<blockquote>\n<p>👉 支持单例 Bean ，Bean 别名 ，父子 BeanFactory，Bean 类型转化 ，Bean 后置处理，FactoryBean，自动装配等</p>\n</blockquote>\n<p>是不是非常丰富 😄</p>\n<h3 id=\"factorybean\"><a class=\"anchor\" href=\"#factorybean\">#</a> FactoryBean</h3>\n<p>FactoryBean  ，它本身就是个 Bean，算是小工厂 ，归 BeanFactory 这个大工厂管理的。</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904174616712.png\" alt=\"image-20210904174616712\" /></p>\n<p>可以看到它就只有三个方法</p>\n<ol>\n<li>getObject () 获取对象</li>\n<li>isSingleton () 单例对象</li>\n<li>getObjectType ()  返回的是 Bean 对象的类型</li>\n</ol>\n<p>相比大工厂 BeanFactory 少了特别多东西，没有严格的 Bean 生命周期流程</p>\n<p>在 👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbUxHOERXdW1vVmg0a18tMUdDWTBWUQ==\">《三分钟快速了解 Spring 中的工厂模式》</span> 一文中有介绍到 😄</p>\n<p>FacotryBean 对象本身也是一个 Bean，是一个小工厂，可以生产另外的 Bean</p>\n<p>BeanFactory 是 Spring 容器的根接口，是大工厂，生产各种各样的 Bean</p>\n<p>beanName  就是正常对象</p>\n<p>“&amp;”+beanName   ， 获取的是实现了该接口的 FacotryBean 工厂对象</p>\n<p>大致如下 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904180204105.png\" alt=\"image-20210904180204105\" /></p>\n<h3 id=\"applicationcontext\"><a class=\"anchor\" href=\"#applicationcontext\">#</a> ApplicationContext</h3>\n<p>我们再来看看这个 ApplicationContext</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904161808341.png\" alt=\"image-20210904161808341\" /></p>\n<p>可以看到它扩展了很多功能，除了 BeanFactory ，它还可以<strong>创建，获取 Bean</strong>，以及处理<strong>国际化</strong>，<strong>事件</strong>，<strong>获取资源</strong>等</p>\n<ul>\n<li>EnvironmentCapable  获取 环境变量 的功能，可以获取到 <strong>操作系统变量</strong> 和 <strong>JVM 环境变量</strong></li>\n<li>ListableBeanFactory 获取所有 BeanNames，判断某个 BeanName 是否存在 BeanDefinition 对象，统计 BeanDefinition 对象，获取某个类型对应的所有 beanNames 等功能</li>\n<li>HierarchicalBeanFactory  获取父 BeanFactory ，判断某个 name 是否存在 bean 对象的功能</li>\n<li>MessageSource  <strong>国际化功能</strong>，获取某个国际化资源</li>\n<li>ApplicationEventPublisher <strong>事件发布功能</strong>（重点）</li>\n<li>ResourcePatternResolver <strong>加载，获取资源的功能</strong>，这里的资源可能是文件，图片 等某个 URL 资源都可以</li>\n</ul>\n<p>还有这三个重要的类👇, 就不一一介绍先啦😄</p>\n<ol>\n<li>ClassPathXmlApplicationContext</li>\n<li>AnnotationConfigApplicationContext</li>\n<li>FileSystemXmlApplicationContext</li>\n</ol>\n<p>赶紧来看看这个核心叭！</p>\n<h3 id=\"ioc-容器\"><a class=\"anchor\" href=\"#ioc-容器\">#</a> IOC 容器</h3>\n<p>当然，这时候出场的肯定是 IOC 啦。</p>\n<p>我们都知道 IOC 是 <strong>控制反转</strong>  ，但是别忘了 <strong>容器</strong> 这个词，比如 ** 容器的根接口 **BeanFactory  ，<strong>容器的实现</strong> 👇</p>\n<ol>\n<li>ClassPathXmlApplicationContext</li>\n<li>AnnotationConfigApplicationContext</li>\n<li>FileSystemXmlApplicationContext</li>\n</ol>\n<p>同时我们要注意这里无处不在的 <strong>后置处理器</strong>  xxxPostProcessor 🐷</p>\n<p>这个是 Spring 中扩展性强的原因了！</p>\n<p>我们可以在各个过程中合理应用这些 PostProcessor 来扩展，或者修改 Bean 定义信息等等</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210901222805351.png\" alt=\"image-20210901222805351\" /></p>\n<p>可以看到在这个容器中，完成了 Bean 的初始化，而这个过程还有很多细节 ，请往下看看👇</p>\n<p>DI 到时写 <strong>属性填充</strong> 时再介绍🐷</p>\n<h3 id=\"beanfactory-后置处理器\"><a class=\"anchor\" href=\"#beanfactory-后置处理器\">#</a> BeanFactory 后置处理器</h3>\n<p>作为 IOC 容器根接口的 BeanFactory ，有着非常高的扩展性，比如最开始获取原料 BeanDefinition  时，就出现了两个针对 BeanFactory  工厂的后置处理器 👇</p>\n<p>BeanDefinitionRegistryPostProcessor</p>\n<blockquote>\n<p>通过该接口，我们可以自己掌控我们的 <strong>原料</strong>，通过 BeanDefinitionRegistry  接口去 <strong>新增</strong>，<strong>删除</strong>，<strong>获取</strong>我们这个 BeanDefinition</p>\n</blockquote>\n<p>BeanFactoryPostProcessor</p>\n<blockquote>\n<p>通过该接口，可以在 <strong>实例化对象前</strong>，对  BeanDefinition 进行修改 ，<strong>冻结</strong> ，<strong>预实例化单例 Bean</strong> 等</p>\n</blockquote>\n<p>经过上面层层阻碍后，我们最终会来到目标方法 getBean ，将原料投入生产，最终获取一个个 Bean 对象出来</p>\n<p>那么随之而来的就是这个 Bean 的生命周期啦 😄</p>\n<h3 id=\"bean-生命周期\"><a class=\"anchor\" href=\"#bean-生命周期\">#</a> Bean 生命周期</h3>\n<p>Bean 的创建和管理有<strong>标准化的流程</strong>！</p>\n<p>这里在我们的工厂 BeanFactory 中写得很清楚 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210902072224002.png\" alt=\"image-20210902072224002\" /></p>\n<p>总共 <strong>14</strong> 个步骤，是不是一下子就清晰多了😄</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210902073122559.png\" alt=\"image-20210902073122559\" /></p>\n<p>在看这部分的源码时，要多注意两个英文单词 😝</p>\n<ol>\n<li><strong>实例化</strong> 👉 <strong>Instantiation</strong></li>\n<li><strong>初始化</strong> 👉 <strong>Initialization</strong></li>\n</ol>\n<p>ps: 别看快搞错了 哈哈😝</p>\n<p>仔细阅读上面这 14 个步骤，会发现前面 <strong>8</strong> 个都是 Aware 接口，而他们的作用也很简单，就是获取 xxAware 这个单词的前缀 xx 😄</p>\n<p>比如我们在上文 👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvWGpHSUsxMUZlTnBKV1VUWmhKaHFsZw==\">《三分钟快速上手 Spring 事件机制》</span> 中提到的事件发布器 ApplicationEventPublisher ，只要你实现了 ApplicationEventPublisherAware 接口，就可以<strong>获取</strong> 事件发布器 ApplicationEventPublisher  ！</p>\n<h3 id=\"bean-后置处理器\"><a class=\"anchor\" href=\"#bean-后置处理器\">#</a> Bean 后置处理器</h3>\n<p>在实例化 和 初始化流程中，把这个 Bean 的后置处理器 BeanPostProcessor 安排上，就得到下图啦 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210902082034253.png\" alt=\"image-20210902082034253\" /></p>\n<p>这里留意下 <strong>实例化</strong> 有扩展点  InstantiationAwareBeanPostProcessor ， <strong>初始化</strong> 扩展点 BeanPostProcessor 就非常多啦，我们主要来关注下这个 AOP</p>\n<h3 id=\"aop\"><a class=\"anchor\" href=\"#aop\">#</a> AOP</h3>\n<p>那么 AOP 是在哪个步骤代理对象的呢？👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210903080503505.png\" alt=\"image-20210903080503505\" /></p>\n<p>可以在 AbstractAutoProxyCreator 类中看到 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210903080803199.png\" alt=\"image-20210903080803199\" /></p>\n<p>其他具体信息在下文的 <strong>AOP 插件</strong> 一文中再讲一下😄</p>\n<p>关于代理的知识点可以看看这里</p>\n<p>👉  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvSXpHV0c3Ti1HSVRKc2lIRkxsZHVwQQ==\">《Java 代理模式和字节码的探索》</span></p>\n<p>👉  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvUkJNVjJscWNZSDNINkY2dGJBQ0I1QQ==\">《Cglib 动态代理探索 (ASM，Spring)》</span></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>本文就先介绍到这里啦🐖</p>\n<p>主要介绍了 Spring 里面的这些脉络，方便小伙伴们对它有个整体的印象先～</p>\n<p>再介绍其中的一些扩展点，比如从源材料开始的 BeanFactoryPostprocessor ，到产物 Bean 的 BeanPostprocessor 。</p>\n<p>实例化，初始化的顺序，Bean 的生命周期，以及 BeanFactory 及子类扩展的功能，再到 ApplicationContext 的功能。</p>\n<p>还有这个核心机制： <strong>工厂 + XML + 反射</strong>，以及引出下文要说的 AOP <strong>发生的地方</strong>。</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904203613899.png\" alt=\"image-20210904203613899\" /></p>\n<p>本期的思维导图会和后面的章节汇总一起再分享哦😋</p>\n<p><strong>ps</strong>：最近忙起来啦，更文速度会慢一些哦～，喜欢的话可以 <strong>星标</strong> 哦，这样可以第一时间收到更文消息🐷</p>\n<p><strong>我是 4ye 咱们下期应该…… 很快再见！！</strong> 😆</p>\n<p>喜欢的话还可以关注下公众号 <strong>Java4ye</strong> 支持下 <strong>4ye</strong> 呀😝</p>\n",
            "tags": [
                "Spring家族"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/41b2d1f5.html",
            "url": "https://www.java4ye.cn/posts/41b2d1f5.html",
            "title": "情窦初开，原来喜欢这么可爱的",
            "date_published": "2022-01-16T10:32:28.553Z",
            "content_html": "<p>这两天被一位可爱的小粉丝秀到了，原来 这就是 <strong>年少的喜欢呀</strong>～～😊</p>\n<p>让 4ye 这上了年纪的老人家好生羡慕呀😝</p>\n<p>直接上图让大家一起感受下  &lt;(￣︶￣)↗[GO!]</p>\n<p>（以下内容经过她滴同意 哈哈哈 `~）</p>\n<h3 id=\"我喜欢你溢于言表\"><a class=\"anchor\" href=\"#我喜欢你溢于言表\">#</a> 我喜欢你，溢于言表</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210223234231974.png\" alt=\"image-20210223234231974\" /></p>\n<h3 id=\"我喜欢你无时无刻\"><a class=\"anchor\" href=\"#我喜欢你无时无刻\">#</a> 我喜欢你，无时无刻</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210223233638229.png\" alt=\"image-20210223233638229\" /></p>\n<h3 id=\"我喜欢你小心翼翼\"><a class=\"anchor\" href=\"#我喜欢你小心翼翼\">#</a> 我喜欢你，小心翼翼</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210223233737066.png\" alt=\"image-20210223233737066\" /></p>\n<h3 id=\"啊啊啊啊\"><a class=\"anchor\" href=\"#啊啊啊啊\">#</a> 啊啊啊啊</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210224225727034.png\" alt=\"image-20210224225727034\" /></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210223233803205.png\" alt=\"image-20210223233803205\" /></p>\n<p>4ye 承受着这个年纪不该有得狗粮  ， 哈哈哈哈  这直接往我这边投喂</p>\n<p><img data-src=\"http://img.ryzeyang.top/79MgL\" alt=\"img\" /></p>\n<p><img data-src=\"http://img.ryzeyang.top/v1MrO\" alt=\"img\" /></p>\n<h3 id=\"词云\"><a class=\"anchor\" href=\"#词云\">#</a> 词云</h3>\n<p>咋们还是来看点技术吧，看看这位小粉丝 这喜欢的状态  绘画出来的词云长啥样～</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210830075519955.png\" alt=\"image-20210830075519955\" /></p>\n<h3 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h3>\n<p>代码的话直接参考该连接～</p>\n<p>果然三分钟的事情 ，除了下载包比较费时～</p>\n<blockquote>\n<p>3 分钟教你用 python 制作一个简单词云：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZGpkamRqMTIzL3AvMTIxNTM2MDMuaHRtbA==\">https://www.cnblogs.com/djdjdj123/p/12153603.html</span></p>\n</blockquote>\n<p>代码这里稍微调整了下，注意这里要指定使用的中文字体～</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*- coding: utf-8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @author  Java4ye</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @date  2021/2/24 22:38</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @微信公众号: Java4ye</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @GitHub https://github.com/RyzeYang</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @博客 https://blog.csdn.net/weixin_40251892</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">from</span> os <span class=\"token keyword\">import</span> path</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> jieba</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">from</span> wordcloud <span class=\"token keyword\">import</span> WordCloud<span class=\"token punctuation\">,</span> STOPWORDS</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">### 当前文件路径</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>d <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Read the whole text.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token string\">'like.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">## 进行分词</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#刚开始是分完词放进 txt 再打开却总是显示不出中文很奇怪</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>default_mode <span class=\"token operator\">=</span>jieba<span class=\"token punctuation\">.</span>cut<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>text <span class=\"token operator\">=</span> <span class=\"token string\">\"\\r\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>default_mode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>alice_mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token string\">\"panda.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>stopwords <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>STOPWORDS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>wc <span class=\"token operator\">=</span> WordCloud<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">#设置字体，不指定就会出现乱码，这个字体文件需要下载</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    font_path<span class=\"token operator\">=</span><span class=\"token string\">r'msyh.ttf'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    background_color<span class=\"token operator\">=</span><span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    max_words<span class=\"token operator\">=</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    mask<span class=\"token operator\">=</span>alice_mask<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    stopwords<span class=\"token operator\">=</span>stopwords<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\"># generate word cloud</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>wc<span class=\"token punctuation\">.</span>generate<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># store to file</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>wc<span class=\"token punctuation\">.</span>to_file<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token string\">\"panda_result.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\"># show</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>wc<span class=\"token punctuation\">,</span> interpolation<span class=\"token operator\">=</span><span class=\"token string\">'bilinear'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>plt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">\"off\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>alice_mask<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span>plt<span class=\"token punctuation\">.</span>cm<span class=\"token punctuation\">.</span>gray<span class=\"token punctuation\">,</span> interpolation<span class=\"token operator\">=</span><span class=\"token string\">'bilinear'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>plt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">\"off\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"http://img.ryzeyang.top/python%E8%AF%8D%E4%BA%91.png\" alt=\"python词云\" /></p>\n<h3 id=\"完结-撒花-̄-̄\"><a class=\"anchor\" href=\"#完结-撒花-̄-̄\">#</a> 完结 撒花 <em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</h3>\n<h3 id=\"喜欢真好呀-oo\"><a class=\"anchor\" href=\"#喜欢真好呀-oo\">#</a> 喜欢，真好呀 o (<sup>▽</sup>)o</h3>\n<h3 id=\"不知道此刻阅读的你是否也有这一股喜欢的劲愿你们互相吸引~-牵起手来\"><a class=\"anchor\" href=\"#不知道此刻阅读的你是否也有这一股喜欢的劲愿你们互相吸引~-牵起手来\">#</a> 不知道此刻阅读的你，是否也有这一股喜欢的劲，愿你们互相吸引～牵起手来 😝</h3>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/2894b676.html",
            "url": "https://www.java4ye.cn/posts/2894b676.html",
            "title": "单例模式八个例子",
            "date_published": "2022-01-16T09:54:55.312Z",
            "content_html": "<blockquote>\n<p>实现单例模式的八种模式：饿汉式，懒汉式，双重检查锁模式，静态内部类模式，序列化模式，注册式之枚举，注册式之容器，线程实现 ThreadLocal</p>\n</blockquote>\n<p>参考大神 Tom 的《Spring 5 核心原理与 30 个类手写实战 - 谭勇德》</p>\n<blockquote>\n<p>单例模式 Singleton Pattern</p>\n<p>确保一个类在任何场景下只有一个实例，并提供一个全局访问点</p>\n</blockquote>\n<h3 id=\"使用场景\"><a class=\"anchor\" href=\"#使用场景\">#</a> 使用场景</h3>\n<blockquote>\n<p><em>J2EE 标准中的 ServletContext Serv etContextConfig 等、 Spring 框架应用中的 ApplicationContext 、数据库的连接池 也都是单例形式</em></p>\n</blockquote>\n<h3 id=\"饿汉式\"><a class=\"anchor\" href=\"#饿汉式\">#</a> 饿汉式</h3>\n<p>在类加载的时候就 &lt;font style='color:#0099ff'&gt; 立即初始化 &lt;/font&gt;，并且创建单例对象，属于 &lt; font style='color:#0099ff'&gt; 线程安全 &lt;/font&gt;</p>\n<blockquote>\n<p>SpringIOC 容器 ApplicationContext 就是典型的饿汉式单例模式</p>\n</blockquote>\n<blockquote>\n<p>优点： 没有加任何锁、执行效率比较高，用户体验比懒汉式单例模式更好。</p>\n<p>缺点： 类加载的时候就初始化，不管用与不用都占着空间，浪费了内存，有可能 “占着茅坑不拉屎</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ** 饿汉式 *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> ** @date 2020/9/6 8:19*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HungrySingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">HungrySingleton</span> hungry<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HungrySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">HungrySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">HungrySingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> hungry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"懒汉式\"><a class=\"anchor\" href=\"#懒汉式\">#</a> 懒汉式</h3>\n<blockquote>\n<p>使用时才去创建该对象</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ** 懒汉式 *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> ** @date 2020/9/6 8:19*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LazySingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LazySingleton</span> instance<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">LazySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LazySingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      instance<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LazySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"双重检查锁模式\"><a class=\"anchor\" href=\"#双重检查锁模式\">#</a> 双重检查锁模式</h3>\n<p>懒汉式是线程不安全的，需要<em><strong>加锁</strong></em>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ** 双重检查锁 *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> ** @date 2020/9/6 8:19*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LazyDoubleCheckSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LazyDoubleCheckSingleton</span> lazyDoubleCheckMode<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">LazyDoubleCheckSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LazyDoubleCheckSingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lazyDoubleCheckMode<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LazyDoubleCheckSingleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lazyDoubleCheckMode<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          lazyDoubleCheckMode<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LazyDoubleCheckSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">return</span> lazyDoubleCheckMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"静态内部类模式\"><a class=\"anchor\" href=\"#静态内部类模式\">#</a> 静态内部类模式</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ** 静态内部类模式 *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> ** 这种形式兼顾饿汉式单例模式的内存浪费问题和 synchronized 的性能问题 *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> ** 加载静态变量，方法，不包括这个静态内部类 *</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> ** 被外部类调用的时候内部类才会加载 *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> ***</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> ** @date 2020/9/6 9:12*</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LazyInnerClassSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LazyInnerClassSingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">InnerLazyHolder</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerLazyHolder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">LazyInnerClassSingleton</span> LAZY <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LazyInnerClassSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   ** 防止反射创建 *</pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">LazyInnerClassSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InnerLazyHolder</span><span class=\"token punctuation\">.</span>LAZY <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不允许创建多个实例\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"序列化模式\"><a class=\"anchor\" href=\"#序列化模式\">#</a> 序列化模式</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> ** 序列化模式 *</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> ***</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> ** @date 2020/9/6 21:59*</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SerializableSingleton</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">7018585554862336578L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">SerializableSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SerializableSingleton</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SerializableSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SerializableSingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   *objectInputStream 中通过这个 hasReadResolveMethod 去判断有没有该方法，有的话反序列化会去调用该方法 *</pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   * 返回类型必须是 Object*</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">readResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"注册式单例模式\"><a class=\"anchor\" href=\"#注册式单例模式\">#</a> 注册式单例模式</h3>\n<blockquote>\n<p>注册式单例模式又称为登记式单例模式 就是将每一个实例都登记到某一个地方，使用唯一的标识 。注册式单例模式有两种：一种为<em><strong>枚举式单例</strong></em>，另一为<strong>容器式单例模式</strong></p>\n</blockquote>\n<h4 id=\"枚举式\"><a class=\"anchor\" href=\"#枚举式\">#</a> 枚举式</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ** 注册式单例模式又称为登记式单例模式 就是将每一个实例都登记到某一个地方，使用唯一的标识 。注册式单例模式有两种：一种为枚举式单例，另一为容器式单例模式 *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> ** 注册式单例模式之枚举式 *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> ** @date 2020/9/6 23:18*</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">EnumSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   ** 单例 *</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   ** \\*/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">EnumSingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"容器式\"><a class=\"anchor\" href=\"#容器式\">#</a> 容器式</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> ** 注册式单例模式又称为登记式单例模式 就是将每一个实例都登记到某一个地方，使用唯一 *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> ** 的标识 。注册式单例模式有两种：一种为枚举式单例，另一为容器式单例模式 *</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> ** 注册式单例模式之容器式 *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> ** @date 2020/9/9 7:16*</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ContainerSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">ContainerSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> ioc<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>ioc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ioc<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>          obj <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          ioc<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">return</span> ioc<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"线程单例实现-thread-local\"><a class=\"anchor\" href=\"#线程单例实现-thread-local\">#</a> 线程单例实现 Thread Local</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ** 线程单例实现 Thread Local*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> ** 确保每一个线程只有一个实例对象 *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> ** @date 2020/9/9 7:31*</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocalSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">ThreadLocalSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThreadLocalSingleton</span><span class=\"token punctuation\">></span></span> threadLocal <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">.</span><span class=\"token function\">withInitial</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocalSingleton</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ThreadLocalSingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h3>\n<p>先简单测试下这个 【懒汉式线程不安全版本】 和 【反射破坏单例】 这两种模式。。。其他几个写在下篇博客啦🐖</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LazyInnerClassSingleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LazySingleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedBlockingDeque</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ThreadFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   ** 线程调度工厂创建线程 *</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExcutorThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ThreadFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AtomicInteger</span> atomicInteger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ExcutorThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Thread</span> <span class=\"token function\">newThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> atomicInteger<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token class-name\">String</span> threadName <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\":%s\"</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      thread<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>threadName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>threadName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      <span class=\"token keyword\">return</span> thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>   ** 创建线程池 *</pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>   **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ThreadPoolExecutor</span> <span class=\"token function\">getThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> threadFactoryName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MINUTES<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExcutorThread</span><span class=\"token punctuation\">(</span>threadFactoryName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>   ** 懒汉式 线程不安全 测试 *</pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>   **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">testLazySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token class-name\">ThreadPoolExecutor</span> lazyPool <span class=\"token operator\">=</span> <span class=\"token function\">getThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LazySingleton\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>      <span class=\"token keyword\">int</span> finalI <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>      lazyPool<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LazySingleton</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"[%s]\"</span><span class=\"token punctuation\">,</span> finalI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">//    lazyMode.shutdown();*</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>   ** 反射破坏单例模式 *</pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>   **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">testLazyInnerClassSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LazyInnerClassSingleton</span><span class=\"token punctuation\">></span></span> lazyInnerClassModeClass <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyInnerClassSingleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>      <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LazyInnerClassSingleton</span><span class=\"token punctuation\">></span></span> constructor <span class=\"token operator\">=</span> lazyInnerClassModeClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>      constructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>      <span class=\"token class-name\">LazyInnerClassSingleton</span> lazyInnerClassInstance <span class=\"token operator\">=</span> constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>lazyInnerClassInstance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">NoSuchMethodException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">InvocationTargetException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>懒汉式</li>\n</ol>\n<p><img data-src=\"http://img.ryzeyang.top/20200910072049.png\" alt=\"懒汉式 线程不安全 测试\" /></p>\n<ol start=\"2\">\n<li>反射破坏单例模式</li>\n</ol>\n<p><img data-src=\"http://img.ryzeyang.top/20200911072319.png\" alt=\"反射破坏单例模式\" /></p>\n<p>有什么不对的请多多指教，阿里嘎多😄</p>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/ba01d31c.html",
            "url": "https://www.java4ye.cn/posts/ba01d31c.html",
            "title": "jackson解析泛型的正确写法",
            "date_published": "2020-10-26T23:33:28.000Z",
            "content_html": "<p><img data-src=\"http://img.ryzeyang.top/20201202082043.png\" alt=\"20201202082043\" /></p>\n<blockquote>\n<p>内容概览<br />\n解决 1024 当天遗留的 bug： <code>in unnamed module of loader 'app'</code></p>\n</blockquote>\n<p><img data-src=\"http://img.ryzeyang.top/20201027223716.png\" alt=\"20201027223716\" /></p>\n<h2 id=\"bug描述\"><a class=\"anchor\" href=\"#bug描述\">#</a> bug 描述</h2>\n<p>上次使用 jackson 进行数据转换的时候发生了下面这个错误。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>ClassCastException</span><span class=\"token operator\">:</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>LinkedHashMap</span> cannot be cast <span class=\"token keyword\">to</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span></span>User</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>LinkedHashMap</span> is in <span class=\"token keyword\">module</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>base</span> of loader 'bootstrap'<span class=\"token punctuation\">;</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span></span>User</span> is in unnamed <span class=\"token keyword\">module</span> <span class=\"token namespace\">of</span> loader <span class=\"token char\">'app'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"http://img.ryzeyang.top/20201024190656.png\" alt=\"20201024190656\" /></p>\n<h2 id=\"错误代码如下\"><a class=\"anchor\" href=\"#错误代码如下\">#</a> 错误代码如下：</h2>\n<ol>\n<li>第一种写法</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">ResultDTO</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> resultDTO <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResultDTO</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>resultDTO<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">convertValue</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里报错了</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>第二种写法</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> data <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>代码上 body 是从服务器获取到的数据，格式是 <code>&#123;&quot;data&quot;: [&#123;&#125;,&#123;&#125;]&#125;</code> <br />\n 转换成 <code>resultDTO</code>  也是正常的，可以拿到对应的 data， 转换成 list 也是正常的！<br />\n然后 bug 来了！😱 去获取 list 中的一个元素就报错上面那个错了🙃🙄 两种写法都会报这个错误。。<br />\n整个人都懵了，找了好久都不知道咋回事。。</p>\n<h2 id=\"resultdto代码如下\"><a class=\"anchor\" href=\"#resultdto代码如下\">#</a>  <code>ResultDTO</code>  代码如下：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author RYZEYANG</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @date 2020/10/24 14:50</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResultDTO</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 描述</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 状态码</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 数据</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"解决办法\"><a class=\"anchor\" href=\"#解决办法\">#</a> 解决办法</h2>\n<p>突然想到自己之前也做过 json 的解析呀，那会都很顺利地解决的🐖<br />\n想着不用一步到位，先拿到那个节点的数据，再去转换看看。结果真的成功了！</p>\n<h3 id=\"方案一\"><a class=\"anchor\" href=\"#方案一\">#</a> 方案一</h3>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">JsonNode</span> jsonNode <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">readTree</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jsonNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">JsonNode</span> data <span class=\"token operator\">=</span> jsonNode<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">JavaType</span> javaType <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">getTypeFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">constructParametricType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> javaType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"错误分析之错误代码的第一种写法\"><a class=\"anchor\" href=\"#错误分析之错误代码的第一种写法\">#</a> 错误分析之错误代码的第一种写法</h3>\n<p>因为前面 <code>bjectMapper.readValue(body, ResultDTO.class);</code>  这里没法定义泛型 T 的类型。。所以 jackson 使用了这个 <code>LinkedHashMap</code>  来存解析的数据🐖<br />\n<img data-src=\"http://img.ryzeyang.top/20201027082329.png\" alt=\"20201027082329\" /></p>\n<h3 id=\"错误分析之错误代码的第二种写法\"><a class=\"anchor\" href=\"#错误分析之错误代码的第二种写法\">#</a> 错误分析之错误代码的第二种写法</h3>\n<p><code>objectMapper.readValue(body, Map.class);</code>  这里也是，没办法指定泛型🐖，所以 jackson 还是使用了这个 <code>LinkedHashMap</code>  来存解析的数据<br />\n<img data-src=\"http://img.ryzeyang.top/20201027082937.png\" alt=\"20201027082937\" /></p>\n<p>分析到这里有点悟出来了！怎么才能将泛型加上去啊！🐖</p>\n<h3 id=\"方案二使用泛型的正确写法如下\"><a class=\"anchor\" href=\"#方案二使用泛型的正确写法如下\">#</a> 方案二：使用泛型的正确写法如下：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ResultDTO</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> listResultDTO <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ResultDTO</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>debug 看一下，终于正确了！！😁<br />\n<img data-src=\"http://img.ryzeyang.top/20201027221941.png\" alt=\"20201027221941\" /></p>\n<h2 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h2>\n<p>jaskson 解析使用泛型类的时候，有两种做法</p>\n<ol>\n<li>局部解析🐖：\n<ul>\n<li>通过 <code>readTree()</code>  去获取对应的 jsonnode 节点： <code> JsonNode jsonNode = objectMapper.readTree(body);</code></li>\n<li>再获取到对应节点的数据 <code>jsonNode.get(&quot;data&quot;);</code></li>\n<li>最后通过 <code>readValue()</code> : <code>objectMapper.readValue(data.toString(),  new TypeReference&lt;List&lt;User&gt;&gt;()&#123;&#125;);</code>  解析得到对应的数据</li>\n</ul>\n</li>\n<li>直接解析🐖：\n<ul>\n<li><code> objectMapper.readValue(body, new TypeReference&lt;ResultDTO&lt;List&lt;User&gt;&gt;&gt;()&#123;&#125;);</code> , 直接一步到位。</li>\n</ul>\n</li>\n</ol>\n<p>&quot;(￣y▽,￣)╭ &quot; 😄</p>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/7ca997ba.html",
            "url": "https://www.java4ye.cn/posts/7ca997ba.html",
            "title": "java8四大函数式接口",
            "date_published": "2020-10-13T15:28:10.000Z",
            "content_html": "<p><img data-src=\"http://img.ryzeyang.top/20201202082043.png\" alt=\"20201202082043\" /></p>\n<p>说到 java8  那不得不聊下它的这个函数式编程啦 😁</p>\n<h2 id=\"函数式接口\"><a class=\"anchor\" href=\"#函数式接口\">#</a> 函数式接口</h2>\n<blockquote>\n<p>函数式接口指的是接口中只有一个抽象方法的接口，用注解 <code>@FunctionalInterface</code>  标记，表示该接口是函数式接口</p>\n</blockquote>\n<h3 id=\"注解functionalinterface\"><a class=\"anchor\" href=\"#注解functionalinterface\">#</a> 注解 <code>FunctionalInterface</code></h3>\n<p>如图，只是一个标记接口.<br />\n<img data-src=\"http://img.ryzeyang.top/20201014223650.png\" alt=\"20201014223650\" /></p>\n<h2 id=\"四大接口\"><a class=\"anchor\" href=\"#四大接口\">#</a> 四大接口</h2>\n<h3 id=\"consumer\"><a class=\"anchor\" href=\"#consumer\">#</a> Consumer</h3>\n<p>源码如下:<br />\n<img data-src=\"http://img.ryzeyang.top/20201014225926.png\" alt=\"20201014225926\" /></p>\n<p>作用：内部消化传进来的参数，没有返回值<br />\n<strong>示例:</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> consumer<span class=\"token operator\">=</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>consumer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Consumer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 结果: \"Consumer\"</span></pre></td></tr></table></figure><h3 id=\"supplier\"><a class=\"anchor\" href=\"#supplier\">#</a> Supplier</h3>\n<p>源码如下:<br />\n<img data-src=\"http://img.ryzeyang.top/20201014231056.png\" alt=\"20201014231056\" /></p>\n<p>作用：没有传参，直接返回一个结果<br />\n<strong>示例:</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> supplier<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"Supplier\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>supplier<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 结果: \"Supplier\"</span></pre></td></tr></table></figure><h3 id=\"function\"><a class=\"anchor\" href=\"#function\">#</a> Function</h3>\n<p>额这个源码太长了，截取部分源码如下:<br />\n<img data-src=\"http://img.ryzeyang.top/20201014231327.png\" alt=\"20201014231327\" /><br />\n 可以看到它是综合了这个 <code>consumer</code>  和 <code>Supplier</code> 🐖</p>\n<p>作用：根据传的参数，返回一个结果，这里是既有传参，又有返回值😝</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> func<span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 结果: \"FUNCTION\"</span></pre></td></tr></table></figure><h3 id=\"predicate\"><a class=\"anchor\" href=\"#predicate\">#</a> Predicate</h3>\n<p>额这个源码也比较长，截取部分源码如下:<br />\n<img data-src=\"http://img.ryzeyang.top/20201014232954.png\" alt=\"20201014232954\" /></p>\n<p>作用：判断给的参数是否符合条件</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> predicate<span class=\"token operator\">=</span> <span class=\"token string\">\"predicate\"</span><span class=\"token operator\">::</span><span class=\"token function\">equals</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"predicate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 结果: true</span></pre></td></tr></table></figure><p>啊</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mergeTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span> key<span class=\"token operator\">=</span><span class=\"token string\">\"java4ye\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 写法 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 写法 2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Integer</span> integer <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>integer<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            integer<span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://www.java4ye.cn/posts/8194a98a.html",
            "url": "https://www.java4ye.cn/posts/8194a98a.html",
            "title": "泛型的上下限",
            "date_published": "2020-10-11T23:36:42.000Z",
            "content_html": "<p><img data-src=\"http://img.ryzeyang.top/20201202082043.png\" alt=\"20201202082043\" /></p>\n<p>博主经常混淆了泛型的上限和下限的使用。。🐖, 正巧在阿里巴巴的 java 开发手册 ——《Java 开发手册（嵩山版）》中看到有关泛型的这个知识点👍，写写笔记，希望不要再忘啦😄<br />\n如下图:<br />\n<img data-src=\"http://img.ryzeyang.top/20201012231256.png\" alt=\"20201012231256\" /><br />\n 概念：PECS (Producer Extends Consumer Super) 😐</p>\n<h2 id=\"实体类\"><a class=\"anchor\" href=\"#实体类\">#</a> 实体类</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author RYZEYANG</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @date 2020/10/11 23:50</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Fruit</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Apple</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pear</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Orange</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"泛型的上限\"><a class=\"anchor\" href=\"#泛型的上限\">#</a> 泛型的上限</h2>\n<p>如下图，可以看到这里是不允许再添加任何实例的，只能从该 list 中去获取实例。<br />\n<img data-src=\"http://img.ryzeyang.top/20201012082704.png\" alt=\"20201012082704\" /></p>\n<h3 id=\"为什么不能添加呢\"><a class=\"anchor\" href=\"#为什么不能添加呢\">#</a> 为什么不能添加呢？🐖</h3>\n<p>因为这个 list 可能有以下几个情况</p>\n<ol>\n<li>list 是 Fruit 类型的，此时你去添加 Fruit 的子类都没问题</li>\n<li>list 是 Apple 类型的，此时你只能添加 Apple, 同理 Pear，Orange 也是。🙃</li>\n</ol>\n<p>根本不晓得传进来的参数 list 会是哪种类型，当然不能随意添加啦，<br />\n如果 list 是 Apple 类型的，那就不能添加除 Apple 之外的，那如果是 Pear 呢，也一样，所以就全都不能添加啦。</p>\n<h3 id=\"为什么可以取出呢\"><a class=\"anchor\" href=\"#为什么可以取出呢\">#</a> 为什么可以取出呢？🐖</h3>\n<p>因为我们从 list 中拿出来的必定是 Fruit 类型的，毕竟 Apple 等都去继承 Fruit 了，可以自动<strong>向上转型</strong>✌</p>\n<h2 id=\"泛型的下限\"><a class=\"anchor\" href=\"#泛型的下限\">#</a> 泛型的下限</h2>\n<p>如图，下限和上限相反，上限 get，下限 add</p>\n<p>可以看到下图 get 拿到的都是 object 类型，没有意义🐖<br />\n<img data-src=\"http://img.ryzeyang.top/20201012082940.png\" alt=\"20201012082940\" /></p>\n<h3 id=\"为什么super可以添加呢\"><a class=\"anchor\" href=\"#为什么super可以添加呢\">#</a> 为什么 super 可以添加呢？🐖</h3>\n<p>这里定义了下限是 Fruit, 也就是说这个 list 里面的类型都是 Fruit 的父类，所以我们只能添加 Fruit 和他的子类。</p>\n<h3 id=\"为什么不可以取出呢\"><a class=\"anchor\" href=\"#为什么不可以取出呢\">#</a> 为什么不可以取出呢？🐖</h3>\n<p>因为取的时候没法确实是 Fruit 的哪个父类，最后都只能获取我们的根类 <code>Object</code></p>\n<h2 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h2>\n<p>泛型的上限 <code>&lt;? extends T&gt;</code>  用在频繁获取数据的场景，<br />\n 泛型的下限 <code>&lt;? super T&gt;</code>  用在频繁添加数据的场景</p>\n",
            "tags": [
                "Java"
            ]
        }
    ]
}