{
    "version": "https://jsonfeed.org/version/1",
    "title": "程序员小站",
    "subtitle": "4ye的后端技术小站",
    "icon": "/images/favicon.ico",
    "description": "定个小目标，写个三年(还有两年啦~） 分享一个普通程序员的技术生涯，生活点滴，让学习成为一种习惯！",
    "home_page_url": "https:///Java4ye.github.io",
    "items": [
        {
            "id": "Spring/16张图解锁Spring的整体脉络啦/",
            "url": "Spring/16张图解锁Spring的整体脉络啦/",
            "title": "16张图解锁Spring的整体脉络",
            "date_published": "2022-01-16T10:34:27.097Z",
            "content_html": "<p>今天来梳理下 <strong>Spring</strong> 的整体脉络啦，为后面的文章做个铺垫～</p>\n<p>后面几篇文章应该会讲讲这些内容啦 😆</p>\n<ol>\n<li>Spring  AOP 插件 🐖  （🕊了好久都忘了 😅）</li>\n<li>分享下  <strong>4ye</strong> 在项目中利用  <strong>AOP + MybatisPlus</strong>   对项目进行重构，优化系统中特殊的日志模块的故事</li>\n<li>Spring <strong>属性注入</strong>，<strong>循环依赖</strong>，<strong>事务</strong> 等这几个比较重要的</li>\n<li>Spring  源码中的要点  <strong>AbstractApplicationContext</strong>  中的 <strong>refresh</strong> 方法里的 12 个方法</li>\n<li>Spring 中的设计模式  等等</li>\n<li>目前就想到这么多啦🐷</li>\n</ol>\n<hr />\n<p>话说咱们一直都在用这个 Spring  ，你们对它的感受是啥呀？还是说说不出来 哈哈</p>\n<p>4ye 的感觉也是零零散散的，而且印象中一直都在用 Springboot ，不用再配置一堆东西呀，管理依赖啥的，方便太多了。</p>\n<p>所以借此机会简单梳理下其中的一些脉络，这样去看源码就有条理多啦，更能知道一些扩展点的使用等😝</p>\n<h3 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h3>\n<p>本文会先大概介绍下这些知识点 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904200622280.png\" alt=\"image-20210904200622280\" /></p>\n<h3 id=\"印象中的-spring\"><a class=\"anchor\" href=\"#印象中的-spring\">#</a> 印象中的 Spring</h3>\n<p>脑海中有这么一条公式：</p>\n<p>👉  IOC  = 工厂模式 + XML + 反射</p>\n<p>👉 而 DI ,  AOP ， <strong>事务</strong> 等也都在  XML  中很直观的表现出来</p>\n<p>虽然我们现在大部分用这个注解来代替，但是原理还是基本一样的🐖</p>\n<p>注解使用起来很方便，但是学习的话，还是建议先通过这个 XML ，毕竟结构性的文档，有层次感，可以留下更深的印象～😄</p>\n<h3 id=\"小小spring\"><a class=\"anchor\" href=\"#小小spring\">#</a> 小小 Spring</h3>\n<p>把 Spring 浓缩一下，就有了这么一点小东西🐖</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210831215104931.png\" alt=\"image-20210831215104931\" /></p>\n<p>想了下，我们用 Spring ，其中最主要的一点，就是用它来帮我们管理，创建这个 Bean 。</p>\n<p>那么先从源头看起  —— Bean 从哪来 (＠_＠😉</p>\n<h3 id=\"bean-解析流程\"><a class=\"anchor\" href=\"#bean-解析流程\">#</a> Bean 解析流程</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210901220458461.png\" alt=\"image-20210901220458461\" /></p>\n<p>如图所示，就是通过 <strong>解析器</strong>，对我们的 XML 文件或者注解进行解析，最后将这些信息封装在  BeanDefinition 类中，并通过 BeanDefinitionRegistry 接口将这些信息 <strong>注册</strong> 起来，放在 beanDefinitionMap 变量中，key : beanName , value ：BeanDefinition 。</p>\n<p>简单看看  BeanDefinition 中的属性叭</p>\n<h3 id=\"beandefinition\"><a class=\"anchor\" href=\"#beandefinition\">#</a> BeanDefinition</h3>\n<ul>\n<li>\n<p>beanClass  :  bean 的类型 ，实例化时用的 🐖</p>\n</li>\n<li>\n<p>scope  :  作用范围有 singleton，prototype</p>\n</li>\n<li>\n<p>isLazy   :  <strong>懒加载</strong> ，true  的话 会在 getBean 时生成，而且 scope 的 prototype 无效，false 在 Spring 启动过程中直接生成</p>\n</li>\n<li>\n<p>initMethodName  :  初始化方法，当然是初始化时调用🐖</p>\n</li>\n<li>\n<p>primary  :  主要的，有多个 Bean 时使用它</p>\n</li>\n<li>\n<p>dependsOn  :   依赖的 Bean，必须等依赖 Bean 创建好才可以创建</p>\n</li>\n</ul>\n<blockquote>\n<p>PS: @Component ，@Bean , &lt;bean/&gt; 都会被解析成 BeanDefinition</p>\n</blockquote>\n<h3 id=\"反射\"><a class=\"anchor\" href=\"#反射\">#</a> 反射</h3>\n<p>有了原料后呢，咋们再来看看这个 <strong>工厂</strong> BeanFactory</p>\n<p>先简单想一想这个工厂要怎么创建这个 Bean 呢？</p>\n<p>没错，肯定就是这个 <strong>反射</strong> 啦 😄</p>\n<p>那么，结合我们从原料中获取的重要属性之一的 beanClass ，我们可以画出这么一张图 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210901221544464.png\" alt=\"image-20210901221544464\" /></p>\n<p>那么我们再来看看这个 BeanFactory 叭 😄</p>\n<h3 id=\"beanfactory\"><a class=\"anchor\" href=\"#beanfactory\">#</a> BeanFactory</h3>\n<p>先来看看 作为 IOC 容器的<strong>根接口</strong> 的 BeanFactory  提供了什么方法吧👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904162844126.png\" alt=\"image-20210904162844126\" /></p>\n<p>主要是这个 getBean 方法，以及 <strong>别名获取</strong>，<strong>类型获取</strong> 方法和其他一些判断方法如 ：<strong>单例</strong>，<strong>多例</strong>，<strong>类型匹配</strong>，<strong>包含 bean</strong></p>\n<p>我们来简单看看它的子接口都有哪些叭～😄</p>\n<p>这里分享个小技巧叭🐖</p>\n<p>看源码的时候，一般就直接看这个<strong>默认</strong>接口 如这里的 DefaultListableBeanFactory</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904161436139.png\" alt=\"image-20210904161436139\" /></p>\n<p>基本上看个类名就知道大概作用了，那么先对号入座下👇</p>\n<p><strong>ListableBeanFactory</strong></p>\n<blockquote>\n<p>👉 遍历 bean</p>\n</blockquote>\n<p><strong>HierarchicalBeanFactory</strong></p>\n<blockquote>\n<p>👉  提供 父子关系，可以获取上一级的 BeanFactory</p>\n</blockquote>\n<p><strong>ConfigurableBeanFactory</strong></p>\n<blockquote>\n<p>👉  实现了 SingletonBeanRegistry ，主要是 单例 Bean 的注册，生成</p>\n</blockquote>\n<p><strong>AutowireCapableBeanFactory</strong></p>\n<blockquote>\n<p>👉  和自动装配有关的</p>\n</blockquote>\n<p><strong>AbstractBeanFactory</strong></p>\n<blockquote>\n<p>👉  单例缓存，以及 FactoryBean 相关的</p>\n</blockquote>\n<p><strong>ConfigurableListableBeanFactory</strong></p>\n<blockquote>\n<p>👉  预实例化单例 Bean，分析，修改 BeanDefinition</p>\n</blockquote>\n<p><strong>AbstractAutowireCapableBeanFactory</strong></p>\n<blockquote>\n<p>👉 创建 Bean ，属性注入，实例化，调用初始化方法 等等</p>\n</blockquote>\n<p><strong>DefaultListableBeanFactory</strong></p>\n<blockquote>\n<p>👉 支持单例 Bean ，Bean 别名 ，父子 BeanFactory，Bean 类型转化 ，Bean 后置处理，FactoryBean，自动装配等</p>\n</blockquote>\n<p>是不是非常丰富 😄</p>\n<h3 id=\"factorybean\"><a class=\"anchor\" href=\"#factorybean\">#</a> FactoryBean</h3>\n<p>FactoryBean  ，它本身就是个 Bean，算是小工厂 ，归 BeanFactory 这个大工厂管理的。</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904174616712.png\" alt=\"image-20210904174616712\" /></p>\n<p>可以看到它就只有三个方法</p>\n<ol>\n<li>getObject () 获取对象</li>\n<li>isSingleton () 单例对象</li>\n<li>getObjectType ()  返回的是 Bean 对象的类型</li>\n</ol>\n<p>相比大工厂 BeanFactory 少了特别多东西，没有严格的 Bean 生命周期流程</p>\n<p>在 👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbUxHOERXdW1vVmg0a18tMUdDWTBWUQ==\">《三分钟快速了解 Spring 中的工厂模式》</span> 一文中有介绍到 😄</p>\n<p>FacotryBean 对象本身也是一个 Bean，是一个小工厂，可以生产另外的 Bean</p>\n<p>BeanFactory 是 Spring 容器的根接口，是大工厂，生产各种各样的 Bean</p>\n<p>beanName  就是正常对象</p>\n<p>“&amp;”+beanName   ， 获取的是实现了该接口的 FacotryBean 工厂对象</p>\n<p>大致如下 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904180204105.png\" alt=\"image-20210904180204105\" /></p>\n<h3 id=\"applicationcontext\"><a class=\"anchor\" href=\"#applicationcontext\">#</a> ApplicationContext</h3>\n<p>我们再来看看这个 ApplicationContext</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904161808341.png\" alt=\"image-20210904161808341\" /></p>\n<p>可以看到它扩展了很多功能，除了 BeanFactory ，它还可以<strong>创建，获取 Bean</strong>，以及处理<strong>国际化</strong>，<strong>事件</strong>，<strong>获取资源</strong>等</p>\n<ul>\n<li>EnvironmentCapable  获取 环境变量 的功能，可以获取到 <strong>操作系统变量</strong> 和 <strong>JVM 环境变量</strong></li>\n<li>ListableBeanFactory 获取所有 BeanNames，判断某个 BeanName 是否存在 BeanDefinition 对象，统计 BeanDefinition 对象，获取某个类型对应的所有 beanNames 等功能</li>\n<li>HierarchicalBeanFactory  获取父 BeanFactory ，判断某个 name 是否存在 bean 对象的功能</li>\n<li>MessageSource  <strong>国际化功能</strong>，获取某个国际化资源</li>\n<li>ApplicationEventPublisher <strong>事件发布功能</strong>（重点）</li>\n<li>ResourcePatternResolver <strong>加载，获取资源的功能</strong>，这里的资源可能是文件，图片 等某个 URL 资源都可以</li>\n</ul>\n<p>还有这三个重要的类👇, 就不一一介绍先啦😄</p>\n<ol>\n<li>ClassPathXmlApplicationContext</li>\n<li>AnnotationConfigApplicationContext</li>\n<li>FileSystemXmlApplicationContext</li>\n</ol>\n<p>赶紧来看看这个核心叭！</p>\n<h3 id=\"ioc-容器\"><a class=\"anchor\" href=\"#ioc-容器\">#</a> IOC 容器</h3>\n<p>当然，这时候出场的肯定是 IOC 啦。</p>\n<p>我们都知道 IOC 是 <strong>控制反转</strong>  ，但是别忘了 <strong>容器</strong> 这个词，比如 ** 容器的根接口 **BeanFactory  ，<strong>容器的实现</strong> 👇</p>\n<ol>\n<li>ClassPathXmlApplicationContext</li>\n<li>AnnotationConfigApplicationContext</li>\n<li>FileSystemXmlApplicationContext</li>\n</ol>\n<p>同时我们要注意这里无处不在的 <strong>后置处理器</strong>  xxxPostProcessor 🐷</p>\n<p>这个是 Spring 中扩展性强的原因了！</p>\n<p>我们可以在各个过程中合理应用这些 PostProcessor 来扩展，或者修改 Bean 定义信息等等</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210901222805351.png\" alt=\"image-20210901222805351\" /></p>\n<p>可以看到在这个容器中，完成了 Bean 的初始化，而这个过程还有很多细节 ，请往下看看👇</p>\n<p>DI 到时写 <strong>属性填充</strong> 时再介绍🐷</p>\n<h3 id=\"beanfactory-后置处理器\"><a class=\"anchor\" href=\"#beanfactory-后置处理器\">#</a> BeanFactory 后置处理器</h3>\n<p>作为 IOC 容器根接口的 BeanFactory ，有着非常高的扩展性，比如最开始获取原料 BeanDefinition  时，就出现了两个针对 BeanFactory  工厂的后置处理器 👇</p>\n<p>BeanDefinitionRegistryPostProcessor</p>\n<blockquote>\n<p>通过该接口，我们可以自己掌控我们的 <strong>原料</strong>，通过 BeanDefinitionRegistry  接口去 <strong>新增</strong>，<strong>删除</strong>，<strong>获取</strong>我们这个 BeanDefinition</p>\n</blockquote>\n<p>BeanFactoryPostProcessor</p>\n<blockquote>\n<p>通过该接口，可以在 <strong>实例化对象前</strong>，对  BeanDefinition 进行修改 ，<strong>冻结</strong> ，<strong>预实例化单例 Bean</strong> 等</p>\n</blockquote>\n<p>经过上面层层阻碍后，我们最终会来到目标方法 getBean ，将原料投入生产，最终获取一个个 Bean 对象出来</p>\n<p>那么随之而来的就是这个 Bean 的生命周期啦 😄</p>\n<h3 id=\"bean-生命周期\"><a class=\"anchor\" href=\"#bean-生命周期\">#</a> Bean 生命周期</h3>\n<p>Bean 的创建和管理有<strong>标准化的流程</strong>！</p>\n<p>这里在我们的工厂 BeanFactory 中写得很清楚 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210902072224002.png\" alt=\"image-20210902072224002\" /></p>\n<p>总共 <strong>14</strong> 个步骤，是不是一下子就清晰多了😄</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210902073122559.png\" alt=\"image-20210902073122559\" /></p>\n<p>在看这部分的源码时，要多注意两个英文单词 😝</p>\n<ol>\n<li><strong>实例化</strong> 👉 <strong>Instantiation</strong></li>\n<li><strong>初始化</strong> 👉 <strong>Initialization</strong></li>\n</ol>\n<p>ps: 别看快搞错了 哈哈😝</p>\n<p>仔细阅读上面这 14 个步骤，会发现前面 <strong>8</strong> 个都是 Aware 接口，而他们的作用也很简单，就是获取 xxAware 这个单词的前缀 xx 😄</p>\n<p>比如我们在上文 👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvWGpHSUsxMUZlTnBKV1VUWmhKaHFsZw==\">《三分钟快速上手 Spring 事件机制》</span> 中提到的事件发布器 ApplicationEventPublisher ，只要你实现了 ApplicationEventPublisherAware 接口，就可以<strong>获取</strong> 事件发布器 ApplicationEventPublisher  ！</p>\n<h3 id=\"bean-后置处理器\"><a class=\"anchor\" href=\"#bean-后置处理器\">#</a> Bean 后置处理器</h3>\n<p>在实例化 和 初始化流程中，把这个 Bean 的后置处理器 BeanPostProcessor 安排上，就得到下图啦 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210902082034253.png\" alt=\"image-20210902082034253\" /></p>\n<p>这里留意下 <strong>实例化</strong> 有扩展点  InstantiationAwareBeanPostProcessor ， <strong>初始化</strong> 扩展点 BeanPostProcessor 就非常多啦，我们主要来关注下这个 AOP</p>\n<h3 id=\"aop\"><a class=\"anchor\" href=\"#aop\">#</a> AOP</h3>\n<p>那么 AOP 是在哪个步骤代理对象的呢？👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210903080503505.png\" alt=\"image-20210903080503505\" /></p>\n<p>可以在 AbstractAutoProxyCreator 类中看到 👇</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210903080803199.png\" alt=\"image-20210903080803199\" /></p>\n<p>其他具体信息在下文的 <strong>AOP 插件</strong> 一文中再讲一下😄</p>\n<p>关于代理的知识点可以看看这里</p>\n<p>👉  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvSXpHV0c3Ti1HSVRKc2lIRkxsZHVwQQ==\">《Java 代理模式和字节码的探索》</span></p>\n<p>👉  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvUkJNVjJscWNZSDNINkY2dGJBQ0I1QQ==\">《Cglib 动态代理探索 (ASM，Spring)》</span></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>本文就先介绍到这里啦🐖</p>\n<p>主要介绍了 Spring 里面的这些脉络，方便小伙伴们对它有个整体的印象先～</p>\n<p>再介绍其中的一些扩展点，比如从源材料开始的 BeanFactoryPostprocessor ，到产物 Bean 的 BeanPostprocessor 。</p>\n<p>实例化，初始化的顺序，Bean 的生命周期，以及 BeanFactory 及子类扩展的功能，再到 ApplicationContext 的功能。</p>\n<p>还有这个核心机制： <strong>工厂 + XML + 反射</strong>，以及引出下文要说的 AOP <strong>发生的地方</strong>。</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210904203613899.png\" alt=\"image-20210904203613899\" /></p>\n<p>本期的思维导图会和后面的章节汇总一起再分享哦😋</p>\n<p><strong>ps</strong>：最近忙起来啦，更文速度会慢一些哦～，喜欢的话可以 <strong>星标</strong> 哦，这样可以第一时间收到更文消息🐷</p>\n<p><strong>我是 4ye 咱们下期应该…… 很快再见！！</strong> 😆</p>\n<p>喜欢的话还可以关注下公众号 <strong>Java4ye</strong> 支持下 <strong>4ye</strong> 呀😝</p>\n",
            "tags": [
                "Spring"
            ]
        },
        {
            "id": "Python/情窦初开，连喜欢都这么的青涩/",
            "url": "Python/情窦初开，连喜欢都这么的青涩/",
            "title": "情窦初开，原来喜欢这么可爱的",
            "date_published": "2022-01-16T10:32:28.553Z",
            "content_html": "<p>这两天被一位可爱的小粉丝秀到了，原来 这就是 <strong>年少的喜欢呀</strong>～～😊</p>\n<p>让 4ye 这上了年纪的老人家好生羡慕呀😝</p>\n<p>直接上图让大家一起感受下  &lt;(￣︶￣)↗[GO!]</p>\n<p>（以下内容经过她滴同意 哈哈哈 `~）</p>\n<h3 id=\"我喜欢你溢于言表\"><a class=\"anchor\" href=\"#我喜欢你溢于言表\">#</a> 我喜欢你，溢于言表</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210223234231974.png\" alt=\"image-20210223234231974\" /></p>\n<h3 id=\"我喜欢你无时无刻\"><a class=\"anchor\" href=\"#我喜欢你无时无刻\">#</a> 我喜欢你，无时无刻</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210223233638229.png\" alt=\"image-20210223233638229\" /></p>\n<h3 id=\"我喜欢你小心翼翼\"><a class=\"anchor\" href=\"#我喜欢你小心翼翼\">#</a> 我喜欢你，小心翼翼</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210223233737066.png\" alt=\"image-20210223233737066\" /></p>\n<h3 id=\"啊啊啊啊\"><a class=\"anchor\" href=\"#啊啊啊啊\">#</a> 啊啊啊啊</h3>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210224225727034.png\" alt=\"image-20210224225727034\" /></p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210223233803205.png\" alt=\"image-20210223233803205\" /></p>\n<p>4ye 承受着这个年纪不该有得狗粮  ， 哈哈哈哈  这直接往我这边投喂</p>\n<p><img data-src=\"http://img.ryzeyang.top/79MgL\" alt=\"img\" /></p>\n<p><img data-src=\"http://img.ryzeyang.top/v1MrO\" alt=\"img\" /></p>\n<h3 id=\"词云\"><a class=\"anchor\" href=\"#词云\">#</a> 词云</h3>\n<p>咋们还是来看点技术吧，看看这位小粉丝 这喜欢的状态  绘画出来的词云长啥样～</p>\n<p><img data-src=\"http://img.ryzeyang.top/image-20210830075519955.png\" alt=\"image-20210830075519955\" /></p>\n<h3 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h3>\n<p>代码的话直接参考该连接～</p>\n<p>果然三分钟的事情 ，除了下载包比较费时～</p>\n<blockquote>\n<p>3 分钟教你用 python 制作一个简单词云：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZGpkamRqMTIzL3AvMTIxNTM2MDMuaHRtbA==\">https://www.cnblogs.com/djdjdj123/p/12153603.html</span></p>\n</blockquote>\n<p>代码这里稍微调整了下，注意这里要指定使用的中文字体～</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*- coding: utf-8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @author  Java4ye</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @date  2021/2/24 22:38</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @微信公众号: Java4ye</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @GitHub https://github.com/RyzeYang</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @博客 https://blog.csdn.net/weixin_40251892</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">from</span> os <span class=\"token keyword\">import</span> path</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> jieba</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">from</span> wordcloud <span class=\"token keyword\">import</span> WordCloud<span class=\"token punctuation\">,</span> STOPWORDS</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">### 当前文件路径</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>d <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Read the whole text.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token string\">'like.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">## 进行分词</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#刚开始是分完词放进 txt 再打开却总是显示不出中文很奇怪</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>default_mode <span class=\"token operator\">=</span>jieba<span class=\"token punctuation\">.</span>cut<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>text <span class=\"token operator\">=</span> <span class=\"token string\">\"\\r\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>default_mode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>alice_mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token string\">\"panda.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>stopwords <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>STOPWORDS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>wc <span class=\"token operator\">=</span> WordCloud<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">#设置字体，不指定就会出现乱码，这个字体文件需要下载</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    font_path<span class=\"token operator\">=</span><span class=\"token string\">r'msyh.ttf'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    background_color<span class=\"token operator\">=</span><span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    max_words<span class=\"token operator\">=</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    mask<span class=\"token operator\">=</span>alice_mask<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    stopwords<span class=\"token operator\">=</span>stopwords<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\"># generate word cloud</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>wc<span class=\"token punctuation\">.</span>generate<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># store to file</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>wc<span class=\"token punctuation\">.</span>to_file<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token string\">\"panda_result.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\"># show</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>wc<span class=\"token punctuation\">,</span> interpolation<span class=\"token operator\">=</span><span class=\"token string\">'bilinear'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>plt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">\"off\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>alice_mask<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span>plt<span class=\"token punctuation\">.</span>cm<span class=\"token punctuation\">.</span>gray<span class=\"token punctuation\">,</span> interpolation<span class=\"token operator\">=</span><span class=\"token string\">'bilinear'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>plt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token string\">\"off\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"http://img.ryzeyang.top/python%E8%AF%8D%E4%BA%91.png\" alt=\"python词云\" /></p>\n<h3 id=\"完结-撒花-̄-̄\"><a class=\"anchor\" href=\"#完结-撒花-̄-̄\">#</a> 完结 撒花 <em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</h3>\n<h3 id=\"喜欢真好呀-oo\"><a class=\"anchor\" href=\"#喜欢真好呀-oo\">#</a> 喜欢，真好呀 o (<sup>▽</sup>)o</h3>\n<h3 id=\"不知道此刻阅读的你是否也有这一股喜欢的劲愿你们互相吸引~-牵起手来\"><a class=\"anchor\" href=\"#不知道此刻阅读的你是否也有这一股喜欢的劲愿你们互相吸引~-牵起手来\">#</a> 不知道此刻阅读的你，是否也有这一股喜欢的劲，愿你们互相吸引～牵起手来 😝</h3>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "Spring/hello-world2/",
            "url": "Spring/hello-world2/",
            "title": "Hello World2",
            "date_published": "2022-01-16T10:19:03.524Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": [
                "Spring"
            ]
        },
        {
            "id": "Java/单例模式八个例子/",
            "url": "Java/单例模式八个例子/",
            "title": "单例模式八个例子",
            "date_published": "2022-01-16T09:54:55.312Z",
            "content_html": "<blockquote>\n<p>实现单例模式的八种模式：饿汉式，懒汉式，双重检查锁模式，静态内部类模式，序列化模式，注册式之枚举，注册式之容器，线程实现 ThreadLocal</p>\n</blockquote>\n<p>参考大神 Tom 的《Spring 5 核心原理与 30 个类手写实战 - 谭勇德》</p>\n<blockquote>\n<p>单例模式 Singleton Pattern</p>\n<p>确保一个类在任何场景下只有一个实例，并提供一个全局访问点</p>\n</blockquote>\n<h3 id=\"使用场景\"><a class=\"anchor\" href=\"#使用场景\">#</a> 使用场景</h3>\n<blockquote>\n<p><em>J2EE 标准中的 ServletContext Serv etContextConfig 等、 Spring 框架应用中的 ApplicationContext 、数据库的连接池 也都是单例形式</em></p>\n</blockquote>\n<h3 id=\"饿汉式\"><a class=\"anchor\" href=\"#饿汉式\">#</a> 饿汉式</h3>\n<p>在类加载的时候就 &lt;font style='color:#0099ff'&gt; 立即初始化 &lt;/font&gt;，并且创建单例对象，属于 &lt; font style='color:#0099ff'&gt; 线程安全 &lt;/font&gt;</p>\n<blockquote>\n<p>SpringIOC 容器 ApplicationContext 就是典型的饿汉式单例模式</p>\n</blockquote>\n<blockquote>\n<p>优点： 没有加任何锁、执行效率比较高，用户体验比懒汉式单例模式更好。</p>\n<p>缺点： 类加载的时候就初始化，不管用与不用都占着空间，浪费了内存，有可能 “占着茅坑不拉屎</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ** 饿汉式 *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> ** @date 2020/9/6 8:19*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HungrySingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">HungrySingleton</span> hungry<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HungrySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">HungrySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">HungrySingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> hungry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"懒汉式\"><a class=\"anchor\" href=\"#懒汉式\">#</a> 懒汉式</h3>\n<blockquote>\n<p>使用时才去创建该对象</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ** 懒汉式 *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> ** @date 2020/9/6 8:19*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LazySingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LazySingleton</span> instance<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">LazySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LazySingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      instance<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LazySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"双重检查锁模式\"><a class=\"anchor\" href=\"#双重检查锁模式\">#</a> 双重检查锁模式</h3>\n<p>懒汉式是线程不安全的，需要<em><strong>加锁</strong></em>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ** 双重检查锁 *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> ** @date 2020/9/6 8:19*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LazyDoubleCheckSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LazyDoubleCheckSingleton</span> lazyDoubleCheckMode<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">LazyDoubleCheckSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LazyDoubleCheckSingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lazyDoubleCheckMode<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LazyDoubleCheckSingleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lazyDoubleCheckMode<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          lazyDoubleCheckMode<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LazyDoubleCheckSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">return</span> lazyDoubleCheckMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"静态内部类模式\"><a class=\"anchor\" href=\"#静态内部类模式\">#</a> 静态内部类模式</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ** 静态内部类模式 *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> ** 这种形式兼顾饿汉式单例模式的内存浪费问题和 synchronized 的性能问题 *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> ** 加载静态变量，方法，不包括这个静态内部类 *</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> ** 被外部类调用的时候内部类才会加载 *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> ***</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> ** @date 2020/9/6 9:12*</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LazyInnerClassSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LazyInnerClassSingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">InnerLazyHolder</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerLazyHolder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">LazyInnerClassSingleton</span> LAZY <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LazyInnerClassSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   ** 防止反射创建 *</pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">LazyInnerClassSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InnerLazyHolder</span><span class=\"token punctuation\">.</span>LAZY <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不允许创建多个实例\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"序列化模式\"><a class=\"anchor\" href=\"#序列化模式\">#</a> 序列化模式</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> ** 序列化模式 *</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> ***</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> ** @date 2020/9/6 21:59*</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SerializableSingleton</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">7018585554862336578L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">SerializableSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SerializableSingleton</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SerializableSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SerializableSingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   *objectInputStream 中通过这个 hasReadResolveMethod 去判断有没有该方法，有的话反序列化会去调用该方法 *</pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   * 返回类型必须是 Object*</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">readResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"注册式单例模式\"><a class=\"anchor\" href=\"#注册式单例模式\">#</a> 注册式单例模式</h3>\n<blockquote>\n<p>注册式单例模式又称为登记式单例模式 就是将每一个实例都登记到某一个地方，使用唯一的标识 。注册式单例模式有两种：一种为<em><strong>枚举式单例</strong></em>，另一为<strong>容器式单例模式</strong></p>\n</blockquote>\n<h4 id=\"枚举式\"><a class=\"anchor\" href=\"#枚举式\">#</a> 枚举式</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ** 注册式单例模式又称为登记式单例模式 就是将每一个实例都登记到某一个地方，使用唯一的标识 。注册式单例模式有两种：一种为枚举式单例，另一为容器式单例模式 *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> ** 注册式单例模式之枚举式 *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> ** @date 2020/9/6 23:18*</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">EnumSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   ** 单例 *</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   ** \\*/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">EnumSingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"容器式\"><a class=\"anchor\" href=\"#容器式\">#</a> 容器式</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> ** 注册式单例模式又称为登记式单例模式 就是将每一个实例都登记到某一个地方，使用唯一 *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> ** 的标识 。注册式单例模式有两种：一种为枚举式单例，另一为容器式单例模式 *</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> ** 注册式单例模式之容器式 *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> ** @date 2020/9/9 7:16*</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ContainerSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">ContainerSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> ioc<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>ioc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ioc<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>          obj <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          ioc<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">return</span> ioc<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"线程单例实现-thread-local\"><a class=\"anchor\" href=\"#线程单例实现-thread-local\">#</a> 线程单例实现 Thread Local</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ** 线程单例实现 Thread Local*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> ** 确保每一个线程只有一个实例对象 *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *** *@author* *Java4ye*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> ** @date 2020/9/9 7:31*</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocalSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">ThreadLocalSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThreadLocalSingleton</span><span class=\"token punctuation\">></span></span> threadLocal <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">.</span><span class=\"token function\">withInitial</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocalSingleton</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ThreadLocalSingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h3>\n<p>先简单测试下这个 【懒汉式线程不安全版本】 和 【反射破坏单例】 这两种模式。。。其他几个写在下篇博客啦🐖</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LazyInnerClassSingleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>singleton<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LazySingleton</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedBlockingDeque</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ThreadFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   ** 线程调度工厂创建线程 *</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExcutorThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ThreadFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AtomicInteger</span> atomicInteger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ExcutorThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Thread</span> <span class=\"token function\">newThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> atomicInteger<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token class-name\">String</span> threadName <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\":%s\"</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      thread<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>threadName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>threadName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      <span class=\"token keyword\">return</span> thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>   ** 创建线程池 *</pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>   **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ThreadPoolExecutor</span> <span class=\"token function\">getThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> threadFactoryName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MINUTES<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExcutorThread</span><span class=\"token punctuation\">(</span>threadFactoryName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>   ** 懒汉式 线程不安全 测试 *</pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>   **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">testLazySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token class-name\">ThreadPoolExecutor</span> lazyPool <span class=\"token operator\">=</span> <span class=\"token function\">getThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LazySingleton\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>      <span class=\"token keyword\">int</span> finalI <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>      lazyPool<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LazySingleton</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"[%s]\"</span><span class=\"token punctuation\">,</span> finalI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token comment\">//    lazyMode.shutdown();*</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token comment\">/***</pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>   ** 反射破坏单例模式 *</pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>   **/</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">testLazyInnerClassSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LazyInnerClassSingleton</span><span class=\"token punctuation\">></span></span> lazyInnerClassModeClass <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyInnerClassSingleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>      <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LazyInnerClassSingleton</span><span class=\"token punctuation\">></span></span> constructor <span class=\"token operator\">=</span> lazyInnerClassModeClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>      constructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>      <span class=\"token class-name\">LazyInnerClassSingleton</span> lazyInnerClassInstance <span class=\"token operator\">=</span> constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>lazyInnerClassInstance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">NoSuchMethodException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">InvocationTargetException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>懒汉式</li>\n</ol>\n<p><img data-src=\"http://img.ryzeyang.top/20200910072049.png\" alt=\"懒汉式 线程不安全 测试\" /></p>\n<ol start=\"2\">\n<li>反射破坏单例模式</li>\n</ol>\n<p><img data-src=\"http://img.ryzeyang.top/20200911072319.png\" alt=\"反射破坏单例模式\" /></p>\n<p>有什么不对的请多多指教，阿里嘎多😄</p>\n",
            "tags": [
                "Java"
            ]
        }
    ]
}